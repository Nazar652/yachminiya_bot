# -*- coding: utf8 -*-

import telebot
from telebot import types
from traceback import print_exc
from io import StringIO
import random
from pprint import pprint
from database import *
from tables import *
from threading import Timer
from variables import *

bot = telebot.TeleBot(Token, threaded=False)
BOT_USER = bot.get_me().id


def f_queue(m):
    """–∞–Ω—Ç–∏—Å–ø–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    global queue, t_queue
    if m.from_user.id in queue:
        if t_queue > time.time():
            try:
                bot.send_message(m.chat.id, f'–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ!')
            except:
                pass
            queue.append(m.from_user.id)
            del (queue[0])
            t_queue = time.time() + 0.2
            return True
        else:
            queue.append(m.from_user.id)
            del (queue[0])
            t_queue = time.time() + 0.2
    else:
        queue.append(m.from_user.id)
        del (queue[0])
        t_queue = time.time() + 0.2
    return False


def extract_unique_code(text):
    return text.split()[1] if len(text.split()) > 1 else None


def f_queue_call(call):
    '''–∞–Ω—Ç–∏—Å–ø–∞–º –∫–Ω–æ–ø–∫–∏'''
    global queue_call, t_queue_call
    if call.from_user.id in queue_call:
        if t_queue_call > time.time():
            bot.answer_callback_query(callback_query_id=call.id, text='–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ.', show_alert=True)
            queue_call.append(call.from_user.id)
            del (queue_call[0])
            t_queue_call = time.time() + 0.1
            return True
        else:
            queue_call.append(call.from_user.id)
            del (queue_call[0])
            t_queue_call = time.time() + 0.1
    else:
        queue_call.append(call.from_user.id)
        del (queue_call[0])
        t_queue_call = time.time() + 0.1
    return False


def main_menu(m, lab):
    """–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="üí¨ –û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç –Ø—á–º—ñ–Ω—ñ—ó",
                                            url='https://t.me/Yachminiya')
    keyboard.add(url_button)
    callback_button = types.InlineKeyboardButton(text="üó∫ –ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó", callback_data="prostir")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", callback_data="golos")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚öñÔ∏è C—É–¥", callback_data="sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üí° –ü–æ–¥–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é", callback_data="petition")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üì±–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é", callback_data="menus")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="all_info")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text='–í–∞—Å –≤—ñ—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏ "–Ø—á–º—ñ–Ω—ñ—è".\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –°–∏—Å—Ç–µ–º–∏.',
                              reply_markup=keyboard)
    else:
        bot.send_message(m.chat.id, '–í–∞—Å –≤—ñ—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏ "–Ø—á–º—ñ–Ω—ñ—è".\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –°–∏—Å—Ç–µ–º–∏.',
                         reply_markup=keyboard)


def timeout(u, m):
    bot.send_message(m.chat.id, get_str_passport(u), parse_mode='HTML')
    t.cancel()


def glas(am):
    last_nums = int(am) % 100
    last_num = int(am) % 10
    if 10 < last_nums < 20:
        glas = '—è—á–æ–∫'
    elif int(last_num) % 10 in (2, 3, 4):
        glas = '—è—á–∫–∏'
    elif int(last_num) % 10 in (5, 6, 7, 8, 9, 0):
        glas = '—è—á–æ–∫'
    else:
        glas = '—è—á–∫–∞'
    return glas


def commission(x, mnozh):
    x = int(x)
    if x <= 8:
        n = (2 / x)
    elif x <= 16:
        n = (4 / (x + 8))
    elif x <= 32:
        n = (8 / (x + 32))
    elif x <= 64:
        n = (16 / (x + 96))
    elif x <= 128:
        n = (32 / (x + 256))
    elif x <= 256:
        n = (64 / (x + 640))
    elif x <= 512:
        n = (128 / (x + 1536))
    elif x <= 1024:
        n = (256 / (x + 3584))
    elif x <= 2048:
        n = (512 / (x + 8192))
    else:
        n = (1024 / (x + 18432))
    n *= mnozh
    n *= 0.5
    return round(x * n)


def prostir_f(m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text=f"üóØ –ß–∞—Ç–∏ –Ø—á–º—ñ–Ω—ñ—ó", callback_data=f"chats")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"üì∫ –ö–∞–Ω–∞–ª–∏ –Ø—á–º—ñ–Ω—ñ—ó", callback_data=f"channels")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text='–ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó ‚Äî –≤—Å—ñ —á–∞—Ç–∏ —Ç–∞ –∫–∞–Ω–∞–ª–∏ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫—ñ –¥–æ—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.',
                              reply_markup=keyboard)
    else:
        bot.send_message(chat_id=m.chat.id,
                         text='–ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó ‚Äî –≤—Å—ñ —á–∞—Ç–∏ —Ç–∞ –∫–∞–Ω–∞–ª–∏ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫—ñ –¥–æ—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.',
                         reply_markup=keyboard)


def sud_f(m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π —Å—É–¥", callback_data="krime_sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ê–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å—É–¥", callback_data="apel_sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text='–û–±–µ—Ä—ñ—Ç—å —Å—É–¥, –≤ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤',
                              reply_markup=keyboard)
    else:
        bot.send_message(chat_id=m.chat.id,
                         text='–û–±–µ—Ä—ñ—Ç—å —Å—É–¥, –≤ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤',
                         reply_markup=keyboard)


def all_info_f(m, u, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text=f"üìí –ü–æ—Å—ñ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–ø—Ä–∏–±—É–ª–∏—Ö",
                                            url='https://telegra.ph/YAchm%D1%96nnij-Pos%D1%96bnik-dlya-novopribulih-01-28')
    keyboard.add(url_button)
    url_button = types.InlineKeyboardButton(text=f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –°–∏—Å—Ç–µ–º–∏",
                                            url='https://telegra.ph/Spisok-komand-Sistemi-YAchm%D1%96n%D1%96ya-02-01')
    keyboard.add(url_button)
    passport = get_passport(u.id)
    if passport:
        callback_button = types.InlineKeyboardButton(text=f"üìñ –ü–∞—Å–ø–æ—Ä—Ç", callback_data=f"pass_pp")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"üí∞ –†–∞—Ö—É–Ω–æ–∫", callback_data=f"acc_pp")
        keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data=f"aktyv_pp")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –í–∞—Å —É –°–∏—Å—Ç–µ–º—ñ', message_id=m.message_id,
                              chat_id=m.chat.id, reply_markup=keyboard)
    else:
        bot.send_message(text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –í–∞—Å —É –°–∏—Å—Ç–µ–º—ñ',
                         chat_id=m.chat.id, reply_markup=keyboard)


def menus_f(m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üí∞–ú–µ–Ω—é –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è", callback_data="business")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üë•–ú–µ–Ω—é —Ä–æ–¥—É", callback_data="rid")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text('–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏', chat_id=m.chat.id,
                              message_id=m.message_id, reply_markup=keyboard)
    else:
        bot.send_message(text='–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏', chat_id=m.chat.id, reply_markup=keyboard)


def rid_f(u, m, lab=True):
    passport = get_passport(u.id)
    if passport is None:
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id, text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
        return

    if passport[13] != '–°–∞–º—ñ—Ç–Ω–∏–∫':
        rid = get_rid(passport[13])
        if int(rid[2]) == u.id:
            head = True
        else:
            head = False
        keyboard = types.InlineKeyboardMarkup()
        if head:
            word = '–≥–æ–ª–æ–≤–æ—é'
            callback_button = types.InlineKeyboardButton(text=f"üÜï–ü—Ä–∏–π–Ω—è—Ç–∏ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ —Ä–æ–¥—É",
                                                         callback_data=f"new_rid_member")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"üë•–ß–ª–µ–Ω–∏ —Ä–æ–¥—É",
                                                         callback_data=f"rid_members")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚úçÔ∏è–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ä—ñ–¥",
                                                         callback_data=f"edit_rid")
            keyboard.add(callback_button)
        else:
            word = '—á–ª–µ–Ω–æ–º'
            callback_button = types.InlineKeyboardButton(text=f"üÜï–í–∏–π—Ç–∏ –∑ —Ä–æ–¥—É",
                                                         callback_data=f"exit_rid")
            keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–í–∏ —î {word} —Ä–æ–¥—É {rid[1]}',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–í–∏ —î {word} —Ä–æ–¥—É {rid[1]}',
                             reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"üÜï–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—ñ–¥", callback_data=f"new_rid")
        keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–í–∏ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç–µ –∂–æ–¥–Ω–æ–º—É –∑ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ–¥—ñ–≤, –ø—Ä–æ—Ç–µ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–¥',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–í–∏ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç–µ –∂–æ–¥–Ω–æ–º—É –∑ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ–¥—ñ–≤, –ø—Ä–æ—Ç–µ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–¥',
                             reply_markup=keyboard)


def business_f(business, m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='‚úçÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞', callback_data='edit_business')
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üë•–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏', callback_data='praciv')
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üíµ–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏',
                                        callback_data='finances')
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='‚ùå–ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ',
                                        callback_data='del_business')
    keyboard.add(button)
    keyboard = menu_footer(keyboard, 'business')
    if lab:
        bot.edit_message_text(text=f'<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>',
                          message_id=m.message_id, chat_id=m.chat.id, reply_markup=keyboard,
                          parse_mode="HTML", disable_web_page_preview=True)
    else:
        bot.send_message(text=f'<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>',
                              chat_id=m.chat.id, reply_markup=keyboard,
                              parse_mode="HTML", disable_web_page_preview=True)


def menu_footer(keyboard, call_data):
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=call_data)
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    return keyboard


def get_str_passport(u):
    passport = get_passport(u.id)
    if passport is None:
        return f'{name(u)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
    passport_out = f'<b>–ü–∞—Å–ø–æ—Ä—Ç</b>\n'
    passport_out += f'<i>–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó</i>\n\n'
    passport_out += f'''<b>–Ü–º'—è:</b> <i><a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a></i>\n'''
    passport_out += f"<b>–°–∞–Ω:</b> <i>{passport[8]}</i>\n"
    passport_out += f"<b>–°—Ç–∞—Ç—å:</b> <i>{passport[6]}</i>\n"
    passport_out += f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>{passport[10]}</i>\n"
    passport_out += f"\n<i>–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ:</i>"
    passport_out += f"\n<i>{passport[7]}</i>"
    return passport_out


def get_business(id):
    business = get_business_id(id)
    if business is None:
        business = get_business_name(id)
    return business


def get_str_business(id):
    """–ø–æ–≤–µ—Ä—Ç–∞—î –±—ñ–∑–Ω–µ—Å —É –≤–∏–≥–ª—è–¥—ñ str"""
    business = get_business(id)
    if business is None:
        return f'–í–∫–∞–∑–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞'
    passport = get_passport(business[3])
    business_out = f'<b>–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ</b>\n\n'
    business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>\n'''
    business_out += f'<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i><a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a></i>\n'
    business_out += f"<b>–¢–µ–≥:</b> <code>{business[1]}</code>\n"
    business_out += f'<b>–ê–∫—Ç–∏–≤–∏</b>: <i>{business[4]} {glas(business[4])}</i>\n'
    return business_out


def get_str_rid(id):
    """–ø–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–¥ —É –≤–∏–≥–ª—è–¥—ñ str"""
    rid = get_rid(id)
    if rid is None:
        return f'–†—ñ–¥ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ —ñ—Å–Ω—É—î.'
    all_id = list(map(lambda x: int(x), rid[3].split()[2:]))
    passport = get_passport(rid[2])
    all_id.append(passport[1])
    businesses = get_business_owner(all_id)
    del (all_id[-1])
    rid_out = f'<b>–†—ñ–¥</b>\n'
    rid_out += f'''<a href="https://t.me/FamilyRegistry/{rid[5]}">{rid[1]}</a>\n\n'''
    rid_out += f'–ì–æ–ª–æ–≤–∞:\n<b><a href="t.me/{passport[5]}">{passport[2]} {passport[3]}</a></b>\n'
    money = 0
    akt = 0
    if len(all_id) > 0:
        rid_out += f'\n–ß–ª–µ–Ω–∏:\n'
    for i in all_id:
        passport = get_passport(i)
        money += passport[9]
        rid_out += f'<a href="t.me/{passport[5]}">{passport[2]} {passport[3]}</a>\n'
    for i in businesses:
        akt += i[4]

    rid_out += f'\n–°—Ç–∞—Ç–∫–∏: {money} {glas(money)}\n'
    rid_out += f'–ê–∫—Ç–∏–≤–∏: {akt} {glas(akt)}\n'
    return rid_out


def update_channel_rid(rid_name):
    if rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫':
        return
    rid = get_rid(rid_name)
    rid_out = get_str_rid(rid[1])
    bot.edit_message_text(chat_id=-1001424413839, text=rid_out, message_id=rid[5], parse_mode='HTML',
                          disable_web_page_preview=True)


def update_channel_business(business_name):
    business = get_business(business_name)
    business_out = get_str_business(business[1])
    bot.edit_message_text(chat_id=-1001282951480, text=business_out, message_id=business[5], parse_mode='HTML',
                          disable_web_page_preview=True)


def get_seans_business(id, m):
    def except_bus(m):
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤", callback_data="business")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        bot.edit_message_text(
            '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É —Å–µ—Å—ñ—ó –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –©–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑–∞–π–¥—ñ—Ç—å —É –º–µ–Ω—é –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —ñ –æ–±–µ—Ä—ñ—Ç—å —Ü–µ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ.',
            message_id=m.message_id, chat_id=m.chat.id, reply_markup=keyboard)
    try:
        id = business_seans[id]
    except:
        except_bus(m)
        return None
    business = get_business(id)
    if business is None:
        except_bus(m)
        return None
    return business


def get_str_acc(u):
    """–ø–æ–≤–µ—Ä—Ç–∞—î —Ä–∞—Ö—É–Ω–æ–∫"""
    passport = get_passport(u.id)
    if passport is None:
        return f'{name(u)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
    all_businesses = get_all_businesses()
    akt = 0
    for i in range(len(all_businesses)):
        if all_businesses[i][3] == u.id:
            akt += all_businesses[i][4]

    account = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
    account += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
    account += f'''–Ü–º'—è: <a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a>\n'''
    account += f'–ö–æ–¥: <code>{passport[1]}</code>\n\n'
    account += f'–°—Ç–∞—Ç–∫–∏: {int(passport[9])} {glas(passport[9])}\n'
    account += f'–ê–∫—Ç–∏–≤–∏: {akt} {glas(akt)}\n'
    account += f'–ó–∞—Ä–ø–ª–∞—Ç–∞: {passport[11]} {glas(passport[11])}'
    return account


def non_reg(u, m):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='ü§ñ –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é', url='t.me/yachminiya_bot')
    keyboard.add(button)
    bot.send_message(m.chat.id,
                     f'{name(u)} –Ω–µ –ø—Ä–æ–π—à–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —É –°–∏—Å—Ç–µ–º—ñ.',
                     parse_mode='HTML', reply_markup=keyboard)


def html(s):
    """–¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ö—Ç–º–ª —Å–∏–º–≤–æ–ª—ñ–≤"""
    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')


def name(user):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è –∞–±–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ. –ü–†–Ü–ó–í–ò–©–ê –°–ê–°–ê–ê–ê–ê–ê–¢–¨"""
    if user.last_name is not None:
        return f'{user.first_name} {user.last_name}'
    return user.first_name


@bot.message_handler(func=lambda m: m.chat.type == 'private', commands=['start', 'menu'])
def com_start(m):
    u = m.from_user
    bot.delete_message(m.chat.id, m.message_id)
    user = get_user(m.from_user.id)
    if user is None:
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="üìÉ –û—Ñ–æ—Ä–º–∏—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó",
                                                url='https://t.me/Graphstvo')
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(url_button)
        keyboard.add(callback_button)
        out = f'–ü—Ä–∏–≤—ñ—Ç, {html(name(m.from_user))}! –°—Ö–æ–∂–µ, —â–æ —Ç–∏ –≤–ø–µ—Ä—à–µ —Ç—É—Ç, —Ç–æ–º—É —Ç–∏ —â–µ –Ω–∞–ø–µ–≤–Ω–µ –Ω–µ –¥—É–∂–µ —Ä–æ–∑—É–º—ñ—î—à, —â–æ —Ç–∞–∫–µ –Ø—á–º—ñ–Ω—ñ—è. –¢–æ–º—É –¥—É–∂–µ —Ä–∞–¥–∏–º–æ —Ç–æ–±—ñ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ <a href="https://telegra.ph/YAchm%D1%96nnij-Pos%D1%96bnik-dlya-novopribulih-01-28">–Ø—á–º—ñ–Ω–Ω–∏–π –ü–æ—Å—ñ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–ø—Ä–∏–±—É–ª–∏—Ö</a>. –î–∞–ª—ñ –º–∏ —Ç–æ–±—ñ —Ä–∞–¥–∏–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ì—Ä–∞—Ñ—Å—Ç–≤–∞ —Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂—á–µ). –ë–∞–∂–∞—î–º–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É!'
        bot.send_message(m.chat.id, out, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)
        # bot.send_message(-1001381818993, f'<a href="tg://user?id={u.id}">{html(name(u))}</a>\n{u.id}', parse_mode='HTML')
        new_user(m.from_user)
        chats = get_all_chats()
        for i in chats:
            try:
                bot.unban_chat_member(int(i[2]), m.from_user.id, True)
                bot.promote_chat_member(int(i[2]), m.from_user.id)
            except:
                pass
    else:
        code = extract_unique_code(m.text)
        if code == 'prostir':
            prostir_f(m, False)
        elif code == 'all_info':
            all_info_f(m, u, False)
        elif code == "golos":
            pass
        elif code == 'menus':
            menus_f(m, False)
        elif code == 'sud':
            sud_f(m, False)
        else:
            main_menu(m, False)


@bot.message_handler(func=lambda m: m.chat.type == 'supergroup', commands=['start', 'menu'])
def com_start(m):
    try:
        bot.delete_message(m.chat.id, m.message_id)
    except:
        pass
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="üí¨ –û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç –Ø—á–º—ñ–Ω—ñ—ó",
                                            url='https://t.me/Yachminiya')
    keyboard.add(url_button)
    callback_button = types.InlineKeyboardButton(text="üó∫ –ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó",
                                                 url="t.me/yachminiya_test_bot?start=prostir")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", url="t.me/yachminiya_test_bot?start=golos")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚öñÔ∏è C—É–¥", url="t.me/yachminiya_test_bot?start=sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üì±–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é",
                                                 url="t.me/yachminiya_test_bot?start=menus")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", url="t.me/yachminiya_test_bot?start=all_info")
    keyboard.add(callback_button)
    bot.send_message(m.chat.id, '–í–∞—Å –≤—ñ—Ç–∞—î –≥—Ä—É–ø–æ–≤–µ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏.\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –≥–æ–ª–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –°–∏—Å—Ç–µ–º–∏.',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global voting_q, del_pass

    m = call.message
    u = call.from_user
    if f_queue_call(call):
        return

    if call.data == "pass":
        if call.from_user.id != m.reply_to_message.from_user.id:
            bot.answer_callback_query(callback_query_id=call.id, text='–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è –í–∞—Å!',
                                      show_alert=True)
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text)
        bot.send_message(chat_id=call.message.chat.id, text=pass_form, parse_mode='HTML')
        return

    if call.data == 'menu':
        main_menu(call.message, False)
        return

    if call.data == 'menul':
        main_menu(call.message, True)
        return

    if call.data == 'sud':
        sud_f(m)
        return

    if call.data == 'prostir':
        prostir_f(m)
        return

    if call.data == 'all_info':
        all_info_f(m, u)
        return

    if call.data == 'menus':
        menus_f(m)
        return

    if call.data == 'pass_pp':
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'all_info')

        out = get_str_passport(u)
        bot.edit_message_text(out, m.chat.id, m.message_id, parse_mode='HTML', reply_markup=keyboard)
        return

    if call.data == 'acc_pp':
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'all_info')

        out = get_str_acc(u)
        bot.edit_message_text(out, m.chat.id, m.message_id, parse_mode='HTML', reply_markup=keyboard)
        return

    if call.data == 'aktyv_pp':
        usr = get_user(u.id)
        all_users = get_all_users()
        all_messages = 0
        all_words = 0
        for i in all_users:
            all_messages += i[7]
            all_words += i[8]

        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'all_info')

        out = f'–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n<a href="tg://user?id={u.id}">{html(name(u))}</a>\n\n'
        out += f'–†–µ–ø—É—Ç–∞—Ü—ñ—è: {usr[3]}\n'
        out += f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –≤–µ—Å—å —á–∞—Å: {usr[7]}\n'
        out += f'–°–ª—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å: {usr[8]}\n'
        out += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤—É: {round(((usr[7] / all_messages) + (usr[8] / all_words)) * 50, 2)}%"
        bot.edit_message_text(out, m.chat.id, m.message_id, parse_mode='HTML', reply_markup=keyboard)
        return

    if call.data == 'chats':
        chats = get_all_chats()
        u = get_user(u.id)
        keyboard = types.InlineKeyboardMarkup()
        for i in chats:
            if str(i[0]) in u[9].split():
                try:
                    if i[4] != 'NoneURL':
                        url_button = types.InlineKeyboardButton(text=i[1], url=i[4])
                        keyboard.add(url_button)
                except:
                    pass
        keyboard = menu_footer(keyboard, 'prostir')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ –Ø—á–º—ñ–Ω—ñ—ó, –¥–æ —è–∫–∏—Ö –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø.\n–Ø–∫—â–æ —Ç—É—Ç –Ω–µ–º–∞ —è–∫–æ–≥–æ—Å—å —á–∞—Ç—É, —É —è–∫–æ–º—É –≤–∏ —î, –≤–≤–µ–¥—ñ—Ç—å —É —Ç–æ–º—É —á–∞—Ç—ñ –∫–æ–º–∞–Ω–¥—É <code>!–¥–æ–¥–∞—Ç–∏_—á–∞—Ç</code>',
                              reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data == 'channels':
        channels = get_all_channels()
        u = get_user(u.id)
        keyboard = types.InlineKeyboardMarkup()
        for i in channels:
            if str(i[0]) in u[10].split():
                try:
                    if i[3] != 'NoneURL':
                        url_button = types.InlineKeyboardButton(text=i[1], url=i[3])
                        keyboard.add(url_button)
                except:
                    pass
        keyboard = menu_footer(keyboard, 'prostir')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –Ø—á–º—ñ–Ω—ñ—ó, –¥–æ —è–∫–∏—Ö –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø.', reply_markup=keyboard,
                              parse_mode='HTML')
        return

    if call.data == 'krime_sud':
        def krime_sud(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∏')
                main_menu(m, False)
                return
            if m.text.split()[0] != '–°—Ç–∞—Ç—Ç—è':
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                bot.register_next_step_handler(m, krime_sud)
                return
            if len(m.text.split()) < 3:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                bot.register_next_step_handler(m, krime_sud)
                return
            try:
                st = int(m.text.split()[1])
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç—Ç—ñ')
                bot.register_next_step_handler(m, krime_sud)
                return
            bot.send_message(-1001457025006,
                             f'<a href="tg://user?id={m.from_user.id}">{html(name(m.from_user))}</a> –°—Ç–∞—Ç—Ç—è {st} –ø—Ä–æ—Ç–∏ {" ".join(m.text.split()[2:])}',
                             parse_mode='HTML')
            bot.send_message(m.chat.id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –ø–æ–∑–æ–≤. –û—á—ñ–∫—É–π—Ç–µ, —ñ–∑ –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è")
            main_menu(m, False)

        text = '''
        –î–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∏ —É –ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π –°—É–¥ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —Ñ–æ—Ä–º—ñ:
        <code>–°—Ç–∞—Ç—Ç—è [‚Ññ —Å—Ç–∞—Ç—Ç—ñ] [—Ç–µ–≥/–Ω—ñ–∫/id –≤–∏–Ω—É–≤–∞—Ç—Ü—è]</code>\n<a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86-Krim%D1%96naln%D1%96-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª –Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É. –ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è</a>\n–ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–∫–∞–∑—ñ–≤.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤—É, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>
        '''
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML',
                              disable_web_page_preview=True)
        bot.register_next_step_handler(call.message, krime_sud)
        return

    if call.data == 'apel_sud':
        def apel_sud(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∏')
                main_menu(m, False)
                return
            bot.send_message(-1001203194174,
                             f'<a href="tg://user?id={m.from_user.id}">{html(name(m.from_user))}</a>',
                             parse_mode='HTML')
            bot.forward_message(-1001203194174, m.chat.id, m.message_id)
            bot.send_message(m.chat.id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –ø–æ–∑–æ–≤. –û—á—ñ–∫—É–π—Ç–µ, —ñ–∑ –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è")
            main_menu(m, False)

        text = '''–î–ª—è –ø–æ–¥–∞—á—ñ –∞–ø–µ–ª—è—Ü—ñ—ó —É –ê–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π –°—É–¥ –æ–ø–∏—à—ñ—Ç—å —ó—ó, –±–∞–∂–∞–Ω–æ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—è –°—É–¥—É. –Ø–∫—â–æ –≤–∏ –ø–æ–¥–∞—î—Ç–µ –Ω–µ –∞–ø–µ–ª—è—Ü—ñ—é, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à –ø–æ–∑–æ–≤. –Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –ø–æ–∑–æ–≤ –∞–±–æ –∞–ø–µ–ª—è—Ü—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>'''
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML',
                              disable_web_page_preview=True)
        bot.register_next_step_handler(call.message, apel_sud)
        return

    if call.data == 'petition':
        passport = get_passport(u.id)
        if passport is None:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
            return
        if passport[10] != '–ü–æ–≤–Ω–∏–π':
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó', reply_markup=keyboard)
            return

        def petition_1(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó')
                main_menu(m, False)
                return
            if len(m.text) > 100:
                bot.send_message(m.chat.id, '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
                bot.register_next_step_handler(m, petition_1)
                return

            def petition_2(m, title):
                if m.text == '–°–¢–û–ü':
                    bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó')
                    main_menu(m, False)
                    return
                if len(m.text) > 2000:
                    bot.send_message(m.chat.id, '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ç–∏—Ü—ñ—ó, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
                    bot.register_next_step_handler(m, petition_2)
                    return
                text = m.text
                num = get_petition_last()
                text_p = f'<b>{html(title)}</b>\n–ê–≤—Ç–æ—Ä: <a href="tg://user?id={m.from_user.id}">{passport[2]} {passport[3]}</a>\n\n{html(text)}\n\n<a href="https://t.me/c/1219790275/{int(num) + 1}">–ü—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ –ø–µ—Ç–∏—Ü—ñ—é</a>'
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ ‚Äî 1', callback_data='petition_vote')
                keyboard.add(button)
                # bot.send_message(-1001403193441, text_p, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)
                text_p = f'<a href="https://t.me/c/1403193441/{int(num) + 1}">{html(title)}</a>\n\n<a href="tg://user?id={m.from_user.id}">{passport[2]} {passport[3]}</a> id:{m.from_user.id}'
                # bot.send_message(-1001219790275, text_p, parse_mode='HTML', disable_web_page_preview=True)
                insert_petition_last(num + 1)
                bot.send_message(m.chat.id,
                                 f'–ü–µ—Ç–∏—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞.\n<a href="https://t.me/c/1403193441/{int(num) + 1}">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a>',
                                 parse_mode='HTML')
                main_menu(m, False)

            bot.send_message(m.chat.id,
                             '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ç–∏—Ü—ñ—ó. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É ‚Äî 2000 —Å–∏–º–≤–æ–ª—ñ–≤.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>',
                             parse_mode='HTML')
            bot.register_next_step_handler(m, petition_2, m.text)

        text = '''–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ç–∏—Ü—ñ—ó. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É ‚Äî 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>'''
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML',
                              disable_web_page_preview=True)
        bot.register_next_step_handler(call.message, petition_1)
        return

    if call.data == 'petition_vote':
        passport = get_passport(u.id)
        if passport is None:
            bot.answer_callback_query(callback_query_id=call.id, text='–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                      show_alert=True)
            return
        votes_m = bot.forward_message(thrash, -1001219790275, call.message.message_id)
        text = votes_m.text.split('\n')
        for i in range(2, len(text)):
            if str(call.from_user.id) == text[i].split()[-1][3:]:
                bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –≤–∂–µ –ø—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ —Ü—é –ø–µ—Ç–∏—Ü—ñ—é',
                                          show_alert=True)
                return
        text_p = f'<a href="{votes_m.entities[0].url}">{text[0]}</a>\n\n'
        for i in range(2, len(text)):
            text_p += f'<a href="tg://user?id={text[i].split()[-1][3:]}">{" ".join(text[i].split()[:-1])}</a> {text[i].split()[-1]}\n'
        text_p += f'<a href="tg://user?id={call.from_user.id}">{passport[2]} {passport[3]}</a> id:{call.from_user.id}'
        bot.edit_message_text(text=text_p, chat_id=-1001219790275, message_id=call.message.message_id,
                              parse_mode='HTML', disable_web_page_preview=True)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text=f'–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ ‚Äî {len(text) - 1}', callback_data='petition_vote')
        keyboard.add(button)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=keyboard)
        bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ —Ü—é –ø–µ—Ç–∏—Ü—ñ—é', show_alert=True)
        return

    if call.data == 'menu_changed':
        bot.edit_message_text(f"{call.message.text}", chat_id=call.message.chat.id, message_id=call.message.message_id)
        main_menu(m, False)
        return

    if call.data == 'vidmova':
        user = m.entities[0].user
        if u.id != user.id:
            bot.answer_callback_query(callback_query_id=call.id, text='–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è –í–∞—Å!',
                                      show_alert=True)
            return
        passport = get_passport(u.id)
        all_passports = get_all_passports()
        del (all_passports[passport[0] - 1])
        for i in range(len(all_passports)):
            all_passports[i][0] = i + 1
        del_table_passports()
        db.insert(table_passports)
        insert_all_passports_l(all_passports)
        amount = get_amount_of_passports()
        bot.edit_message_text(chat_id=m.chat.id, message_id=call.message.message_id,
                              text=f'{name(u)} –≤—Ç—Ä–∞—á–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó!')
        del_passport_g(all_passports, amount)
        # TODO —Ä—ñ–¥ —Ç–∞ –±—ñ–∑–Ω–µ—Å

    if call.data == "kvorum":
        starshyna = get_passport(u.id)
        if starshyna is None:
            bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –Ω–µ –°—Ç–∞—Ä—à–∏–Ω–∞',
                                      show_alert=True)
            return
        if not int(starshyna[12].split()[1]):
            bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –Ω–µ –°—Ç–∞—Ä—à–∏–Ω–∞',
                                      show_alert=True)
            return

        stars = call.message.text.split('\n')[-1].split(', ')
        mess = '\n'.join(call.message.text.split('\n')[:-1])

        out = f'{mess}\n'

        if call.message.entities is not None:
            for i in call.message.entities:
                if i.user.id == call.from_user.id:
                    bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏',
                                              show_alert=True)
                    return

            for i in range(len(stars)):
                out += f'<a href="tg://user?id={m.entities[i].user.id}">{stars[i]}</a>, '

        out += f'<a href="tg://user?id={call.from_user.id}">{starshyna[2]} {starshyna[3]}</a>'

        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"–ü—Ä–∏—Å—É—Ç–Ω—ñ–π - {len(stars) + 1}", callback_data="kvorum")
        keyboard.add(callback_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=out,
                              reply_markup=keyboard, parse_mode='HTML')

    if call.data == 'rid':
        rid_f(u, m)
        return

    if call.data == "rid_members":
        keyboard = types.InlineKeyboardMarkup()
        passport = get_passport(call.from_user.id)
        rid = get_rid(passport[13])

        for i in range(2, len(rid[3].split())):
            employer = get_passport(int(rid[3].split()[i]))
            callback_button = types.InlineKeyboardButton(text=f"{employer[2]} {employer[3]}",
                                                         callback_data=f"rid_member{i}")
            keyboard.add(callback_button)

        keyboard = menu_footer(keyboard, 'rid')
        bot.edit_message_text(text=f'–ß–ª–µ–Ω–∏ —Ä–æ–¥—É {rid[1]}', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)
        return

    if call.data == "new_rid":
        def form_bus(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–¥—É')
                main_menu(m, False)
                return
            mess = m.text.split('\n')
            rid_name = html(m.text)
            rid = get_rid(rid_name)
            if rid:
                bot.send_message(m.chat.id,
                                 '–¢–∞–∫–∏–π —Ä—ñ–¥ —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–Ω–æ–≤—É. –Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>')
                bot.register_next_step_handler(m, form_bus)
                return

            if rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫' or rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫–∏':
                bot.send_message(m.chat.id,
                                 '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ "–°–∞–º—ñ—Ç–Ω–∏–∫–∏". –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>')
                bot.register_next_step_handler(m, form_bus)
                return

            business_out = f'–í–∞—à —Ä—ñ–¥ –º–∞—Ç–∏–º–µ –Ω–∞–∑–≤—É <b>{rid_name}</b>. <b>–£–≤–∞–≥–∞!</b> –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–¥—É –∫–æ—à—Ç—É—î 500 —è—á–æ–∫. –ö–æ—à—Ç–∏ –±—É–¥—É—Ç—å —Å–ø–∏—Å–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n\n'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Ä—ñ–¥', callback_data='rid_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É', callback_data='new_rid')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–¥—É', callback_data='rid')
            keyboard.add(button)
            bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)

        bot.edit_message_text(
            text='–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —Ä–æ–¥—É. <b>–£–≤–∞–≥–∞!</b> –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ "–°–∞–º—ñ—Ç–Ω–∏–∫–∏". –Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>',
            message_id=call.message.id, chat_id=call.message.chat.id, parse_mode='HTML')
        bot.register_next_step_handler(call.message, form_bus)

    if call.data == 'rid_done':
        bot.edit_message_text(
            text=f'–ó–∞—á–µ–∫–∞–π—Ç–µ. –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ä—ñ–¥.',
            message_id=call.message.message_id, chat_id=call.message.chat.id)
        mess = call.message.text.split()
        index_1 = mess.index('–Ω–∞–∑–≤—É')
        index_2 = mess.index('–£–≤–∞–≥–∞!')
        namep = html(' '.join(mess[index_1 + 1:index_2])[:-1])
        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        if int(passport[9]) < 1:
            bot.edit_message_text(text='–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–¥—É',
                                  message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  reply_markup=keyboard)
            return
        passport[9] = int(passport[9]) - 500
        passport[13] = namep

        rid_out = f'<b>–†—ñ–¥</b>\n'
        rid_out += f'''{namep}\n\n'''
        username = passport[5]
        rid_out += f'–ì–æ–ª–æ–≤–∞:\n<b><a href="t.me/{username}">{passport[2]} {passport[3]}</a></b>\n'
        n = bot.send_message(-1001424413839, rid_out, parse_mode='HTML').id
        new_rid(u, m, n)
        update_channel_rid(namep)
        bot.edit_message_text(
            text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ —Ä—ñ–¥ <a href="https://t.me/FamilyRegistry/{n}">{namep}</a>.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard,
            disable_web_page_preview=True, parse_mode='HTML')
        insert_passport_a(passport)

    if call.data == "new_rid_member":
        bot.edit_message_text(
            f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤ —Ä—ñ–¥. <a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id –∞–∫–∞—É–Ω—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –≤ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
            chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤ —Ä—ñ–¥')
                rid_f(u, m, False)
                return

            if m.text == str(m.from_user.id):
                bot.send_message(m.chat.id,
                                 '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —Å–µ–±–µ —É —Å–≤—ñ–π –∂–µ —Ä—ñ–¥)\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑)\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –≤ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return

            if not m.text.isdigit():
                bot.send_message(m.chat.id,
                                 '–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Å–æ–±–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –≤ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return

            id = int(m.text)
            new_emp = get_passport(id)
            if new_emp is None:
                bot.send_message(m.chat.id,
                                 '–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –æ—Å–æ–±–∞ –Ω–µ –º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –≤ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return

            if new_emp[13] != '–°–∞–º—ñ—Ç–Ω–∏–∫':
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={new_emp[1]}">{new_emp[2]} {new_emp[3]}</a> —É–∂–µ —î —á–ª–µ–Ω–æ–º —Ä–æ–¥—É {new_emp[13]}. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –≤ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return

            passport = get_passport(u.id)
            rid = get_rid(passport[13])
            peoples = rid[3].split()

            if m.text in peoples:
                bot.send_message(m.chat.id,
                                 '–¶–µ–π –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω —É–∂–µ —î —á–ª–µ–Ω–æ–º –≤–∞—à–æ–≥–æ —Ä–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –≤ —Ä—ñ–¥, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return
            try:
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='new_rid_member_done')
                keyboard.add(button)
                button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='new_rid_member_cancel')
                keyboard.add(button)
                bot.send_message(int(m.text),
                                 f'–í–∞—Å —Ö–æ—á—É—Ç—å –ø—Ä–∏–π–Ω—è—Ç–∏ —É —Ä—ñ–¥ <a href="t.me/FamilyRegistry/{rid[5]}">{rid[1]}</a>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={new_emp[1]}">{new_emp[2]} {new_emp[3]}</a> –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —É —Ä—ñ–¥. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.',
                                 parse_mode='HTML')
            except:
                bot.send_message(m.chat.id,
                                 '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –°–∏—Å—Ç–µ–º–∏. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —É –Ω—å–æ–≥–æ, —â–æ–± –≤—ñ–Ω –≤—ñ–¥–Ω–æ–≤–∏–≤ —á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é.')
            rid_f(u, m, False)

        bot.register_next_step_handler(call.message, new_emp_id)
        return

    if call.data == 'edit_rid':
        def form_bus(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏ —Ä–æ–¥—É.')
                rid_f(u, m, False)
                return
            rid_name = html(m.text)
            rid = get_rid(rid_name)
            if rid:
                bot.send_message(m.chat.id,
                                 '–¢–∞–∫–∏–π —Ä—ñ–¥ —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ–¥—É, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, form_bus)
                return

            if rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫' or rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫–∏':
                bot.send_message(m.chat.id,
                                 '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ "–°–∞–º—ñ—Ç–Ω–∏–∫–∏". –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ–¥—É, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, form_bus)
                return

            business_out = f'–í–∞—à —Ä—ñ–¥ –º–∞—Ç–∏–º–µ –Ω–∞–∑–≤—É <b>{rid_name}</b>.'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É', callback_data='edit_rid_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É', callback_data='edit_rid')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é —Ä–æ–¥—É', callback_data='rid')
            keyboard.add(button)
            bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)

        bot.edit_message_text(
            text='–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ä–æ–¥—É. <b>–£–≤–∞–≥–∞!</b> –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ "–°–∞–º—ñ—Ç–Ω–∏–∫–∏".\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ–¥—É, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
            message_id=call.message.id, chat_id=call.message.chat.id, parse_mode='HTML')
        bot.register_next_step_handler(call.message, form_bus)

    if call.data == 'edit_rid_done':
        bot.edit_message_text(
            text=f'–ó–∞—á–µ–∫–∞–π—Ç–µ. –ó–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞–∑–≤–∞ —Ä–æ–¥—É.',
            message_id=call.message.message_id, chat_id=call.message.chat.id)
        mess = call.message.text.split()
        index = mess.index('–Ω–∞–∑–≤—É')
        namep = html(mess[index:-1])
        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        rid = get_rid(passport[13])

        rid[1] = namep
        all_id = rid[3].split()[2:]
        all_passports = get_all_passports()
        for i in all_id:
            passport = get_passport(int(i))
            passport[13] = i
            insert_passport_l(passport)
            all_passports[passport[0] - 1][13] = i
        insert_rid_a(rid)
        update_channel_rid(rid[1])
        bot.edit_message_text(
            text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –Ω–∞–∑–≤—É —Ä–æ–¥—É –Ω–∞ <a href="https://t.me/FamilyRegistry/{rid[5]}">{namep}</a>.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard,
            disable_web_page_preview=True, parse_mode='HTML')
        insert_all_passports_g(all_passports)
        return

    if call.data == "new_rid_member_done":
        url = call.message.entities[0].url
        ch_id = -1001424413839
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        rid_name = msg.text.split('\n')[1]
        rid = get_rid(rid_name)
        if f'{call.from_user.id}' in rid[3].split():
            bot.edit_message_text(f'–í–∏ –≤–∂–µ —î —á–ª–µ–Ω–æ–º —Ä–æ–¥—É {rid[1]}!', message_id=call.message.message_id,
                                  chat_id=call.message.chat.id)
            return
        rid[3] += f' {call.from_user.id}'
        bot.edit_message_text(f'–¢–µ–ø–µ—Ä –í–∏ —á–ª–µ–Ω —Ä–æ–¥—É {rid[1]}!', message_id=call.message.message_id,
                              chat_id=call.message.chat.id)
        employer = get_passport(call.from_user.id)
        bot.send_message(int(rid[2]),
                         f'<a href="tg://user?id={employer[1]}">{employer[2]} {employer[3]}</a> —Å—Ç–∞–≤ —á–ª–µ–Ω–æ–º —Ä–æ–¥—É {rid[1]}!',
                         parse_mode='HTML')
        employer[13] = rid[1]
        employer[14] = time.time()
        insert_rid_a(rid)
        insert_passport_a(employer)
        update_channel_rid(rid[1])
        return

    if call.data == "new_rid_member_cancel":
        url = call.message.entities[0].url
        ch_id = -1001424413839
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        rid_name = msg.text.split('\n')[1]
        rid = get_rid(rid_name)
        bot.edit_message_text(f'–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ –∑–∞–ø–∏—Ç—É.', message_id=call.message.message_id,
                              chat_id=call.message.chat.id)
        employer = get_passport(call.from_user.id)
        bot.send_message(rid[2],
                         f'<a href="tg://user?id={employer[1]}">{employer[2]} {employer[3]}</a> –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–∞–ø–∏—Ç—É –Ω–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —É —Ä—ñ–¥',
                         parse_mode='HTML')
        return

    if call.data == 'del_member':
        member_user = call.message.entities[0].user
        member = get_passport(member_user.id)
        passport = get_passport(u.id)
        rid = get_rid(passport[13])
        employers = rid[3].split()
        number = employers.index(str(member_user.id))
        del (employers[number])
        rid[3] = ' '.join(employers)
        try:
            bot.send_message(member_user.id,
                             f'–í–∞—Å –≤–∏–ª—É—á–∏–ª–∏ –∑ —Ä–æ–¥—É {rid[1]}.')
        except:
            pass

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=f'–í–∏ –≤–∏–ª—É—á–∏–ª–∏ <a href="tg://user?id={member_user.id}">{member[2]} {member[3]}</a> –∑ —Ä–æ–¥—É {rid[1]}.',
            message_id=call.message.message_id,
            parse_mode='HTML'
        )

        rid_f(u, m, False)
        member[13] = '–°–∞–º—ñ—Ç–Ω–∏–∫'
        insert_rid_a(rid)
        insert_passport_a(member)
        update_channel_rid(rid[1])
        return

    if call.data[0:10] == "rid_member":
        i = int(call.data[10:])
        passport = get_passport(u.id)
        rid = get_rid(passport[13])
        rid_member = get_passport(rid[3].split()[i])
        if rid_member is None:
            bot.edit_message_text(f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞', chat_id=call.message.chat.id, message_id=call.message.message_id)
            return

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üö∑–í–∏–ª—É—á–∏—Ç–∏ —á–ª–µ–Ω–∞ —Ä–æ–¥—É", callback_data='del_member')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, 'rid_members')
        bot.edit_message_text(f'<a href="tg://user?id={rid_member[1]}">{rid_member[2]} {rid_member[3]}</a>', chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML', reply_markup=keyboard)

    if call.data == 'exit_rid':
        member_user = u
        member = get_passport(u.id)
        rid = get_rid(member[13])
        employers = rid[3].split()
        number = employers.index(str(member_user.id))
        del (employers[number])
        rid[3] = ' '.join(employers)

        keyboard = menu_footer(types.InlineKeyboardMarkup(), 'rid')
        bot.edit_message_text(f'–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–æ–¥—É {rid[1]}.', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)

        try:
            bot.send_message(
                chat_id=rid[2],
                text=f'<a href="tg://user?id={member_user.id}">{member[2]} {member[3]}</a> –≤–∏–π—à–æ–≤ –∑ —Ä–æ–¥—É {rid[1]}.',
                parse_mode='HTML'
            )
        except:
            pass
        rid_f(u, m, False)
        member[13] = '–°–∞–º—ñ—Ç–Ω–∏–∫'
        insert_rid_a(rid)
        insert_passport_a(member)
        update_channel_rid(rid[1])
        return

    if call.data == 'business':
        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        if passport is None:
            keyboard = menu_footer(types.InlineKeyboardMarkup(), 'menus')
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
            return

        if passport[10] != '–ü–æ–≤–Ω–∏–π':
            keyboard = menu_footer(types.InlineKeyboardMarkup(), 'menus')
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞', reply_markup=keyboard)
            return

        businesses = get_business_owner([u.id])
        if businesses is None:
            callback_button = types.InlineKeyboardButton(text=f"üÜï–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ",
                                                         callback_data=f"new_business")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—î –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.',
                                  reply_markup=keyboard)
            return

        for i in businesses:
            callback_button = types.InlineKeyboardButton(text=f"{i[2]}",
                                                         callback_data=f"business{i[0]}")
            keyboard.add(callback_button)

        callback_button = types.InlineKeyboardButton(text=f"üÜï–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ",
                                                     callback_data=f"new_business")
        keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, 'menus')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–¶–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –º–µ–Ω—é –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞–º–∏ '
                                   '–∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–µ',
                              reply_markup=keyboard)
        return

    if call.data[0:8] == "business":
        i = int(call.data[8:])
        business_seans[u.id] = get_all_businesses()[i-1][1]
        business = get_seans_business(u.id, m)
        if not business:
            return
        business_f(business, m)
        return

    if call.data == "praciv":
        keyboard = types.InlineKeyboardMarkup()
        business = get_seans_business(u.id, m)
        if business is None:
            return
        for i in business[5].split()[2:]:
            employer = get_passport(int(i))
            if employer is None:
                continue
            callback_button = types.InlineKeyboardButton(text=f"{employer[2]} {employer[3]}",
                                                         callback_data=f"employer{i}")
            keyboard.add(callback_button)

        callback_button = types.InlineKeyboardButton(text=f"üÜï–ù–∞–π–Ω—è—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", callback_data=f"new_employer")
        keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, f"business{business[0]}")
        bot.edit_message_text(text=f'–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ "{business[2]}"', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)
        return

    if call.data[0:8] == "employer":
        i = int(call.data[8:])
        business = get_seans_business(u.id, m)
        if business is None:
            return
        employer = get_passport(i)
        if employer is None:
            keyboard = menu_footer(types.InlineKeyboardMarkup(), f"praciv")
            bot.edit_message_text(f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞', chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)
            return

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üí≥–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—é –ø–ª–∞—Ç—É", callback_data='change_bill')
        keyboard.add(button)
        button = types.InlineKeyboardButton(text="üö∑–ó–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", callback_data='del_employer')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f"praciv")
        bot.edit_message_text(f'<a href="tg://user?id={employer[1]}">{employer[2]} {employer[3]}</a>', chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML', reply_markup=keyboard)

    if call.data == 'new_employer':
        bot.edit_message_text(f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–π–Ω—è—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—É. <a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id –∞–∫–∞—É–Ω—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞–π–º–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            business = get_seans_business(u.id, m)
            if business is None:
                return

            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –Ω–∞–π–º–∞–Ω–Ω—è –Ω–∞ —Ä–æ–±–æ—Ç—É')
                business_f(business, m, False)
                return

            if m.text == str(m.from_user.id):
                bot.send_message(m.chat.id,
                                 '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π–Ω—è—Ç–∏ —Å–µ–±–µ –Ω–∞ —Å–≤–æ—é –∂ —Ä–æ–±–æ—Ç—É)\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑)\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞–π–º–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return

            new_emp = get_passport(int(m.text))
            if new_emp is None:
                bot.send_message(m.chat.id, '–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –æ—Å–æ–±–∞ –Ω–µ –º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞–π–º–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return

            employers = business[5].split()

            if m.text in employers:
                bot.send_message(m.chat.id, '–¶–µ–π –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω —É–∂–µ –ø—Ä–∞—Ü—é—î —É –≤–∞—à–æ–º—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞–π–º–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, new_emp_id)
                return


            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='new_employer_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='new_employer_cancel')
            keyboard.add(button)
            try:
                bot.send_message(int(m.text), f'–í–∞—Å —Ö–æ—á—É—Ç—å –Ω–∞–π–Ω—è—Ç–∏ –Ω–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ <a href="t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>', parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)
                bot.send_message(m.chat.id, f'<a href="tg://user?id={new_emp[1]}">{new_emp[2]} {new_emp[3]}</a> –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–π–Ω—è—Ç—Ç—è –Ω–∞ —Ä–æ–±–æ—Ç—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.', parse_mode='HTML')
            except:

                bot.send_message(m.chat.id, '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –°–∏—Å—Ç–µ–º–∏. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —É –Ω—å–æ–≥–æ, —â–æ–± –≤—ñ–Ω –≤—ñ–¥–Ω–æ–≤–∏–≤ —á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é.')
            business_f(business, m, False)

        bot.register_next_step_handler(call.message, new_emp_id)
        return

    if call.data == "new_employer_done":
        url = call.message.entities[0].url
        ch_id = -1001162793975
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        tag = msg.text.split()[msg.text.split().index('–¢–µ–≥:') + 1]
        business = get_business(tag)
        if f'{u.id}' in business[5].split():
            bot.edit_message_text(f'–í–∏ –≤–∂–µ —î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]}!', message_id=call.message.message_id,
                                  chat_id=call.message.chat.id)
            return
        business[5] += f' {call.from_user.id}'
        business[6] += f' 0'
        bot.edit_message_text(f'–¢–µ–ø–µ—Ä –í–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]}!', message_id=call.message.message_id, chat_id=call.message.chat.id)
        insert_business_a(business)
        employer = get_passport(call.from_user.id)
        employer[15] += f' {tag}'
        insert_passport_a(employer)
        try:
            bot.send_message(int(business[3]), f'<a href="tg://user?id={employer[1]}">{employer[2]} {employer[3]}</a> —Å—Ç–∞–≤ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]}!', parse_mode='HTML')
        except:
            pass
        return

    if call.data == 'edit_business':
        business = get_seans_business(u.id, m)
        if business is None:
            return

        def form_bus(m):
            business = get_seans_business(u.id, m)
            if business is None:
                return
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞')
                business_f(business, m, False)
                return
            mess = m.text.split('\n')
            try:
                namep = ' '.join(mess[-3].split()[1:])
                tag = '_'.join(mess[-2].split()[1:]).upper()
                about = ' '.join(mess[-1].split()[2:])

                low = 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
                for i in tag:
                    if i.lower() not in low:
                        if not i.isnumeric() and i != '_':
                            bot.send_message(m.chat.id,
                                             f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–≥. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç–µ–≥ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                            bot.register_next_step_handler(m, form_bus)
                            return

                business = get_business(namep)

                if business:
                    bot.send_message(m.chat.id, '–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                    bot.register_next_step_handler(m, form_bus)
                    return

                business = get_business(tag)

                if business:
                    bot.send_message(m.chat.id,
                                     '–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                    bot.register_next_step_handler(m, form_bus)
                    return


                passport = get_passport(m.from_user.id)

                business_out = f'–®–∞–±–ª–æ–Ω –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞\n\n'
                business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <i>{namep}</i>\n'''
                business_out += f'''<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i><a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a></i>\n'''
                business_out += f"<b>–¢–µ–≥:</b> <i>{tag}</i>\n"
                business_out += f"<b>–†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:</b> <i>{about}</i>\n"
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —à–∞–±–ª–æ–Ω', callback_data='business_edit_done')
                keyboard.add(button)
                button = types.InlineKeyboardButton(text='–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ', callback_data='edit_business')
                keyboard.add(button)
                bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)
            except:
                bot.send_message(m.chat.id,
                                 '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')
                bot.register_next_step_handler(call.message, form_bus)
                return
        bot.edit_message_text(text=business_form, message_id=call.message.id, chat_id=call.message.chat.id, parse_mode='HTML')
        bot.register_next_step_handler(call.message, form_bus)

    if call.data == "new_employer_cancel":
        url = call.message.entities[0].url
        ch_id = -1001162793975
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        tag = msg.text.split()[msg.text.split().index('–¢–µ–≥:') + 1]
        business = get_business(tag)
        bot.edit_message_text(f'–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ –∑–∞–ø–∏—Ç—É', message_id=call.message.message_id, chat_id=call.message.chat.id)
        employer = get_passport(call.from_user.id)
        try:
            bot.send_message(int(business[3]), f'<a href="tg://user?id={employer[1]}">{employer[2]} {employer[3]}</a> –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–∞–ø–∏—Ç—É –Ω–∞ –Ω–∞–π–Ω—è—Ç—Ç—è –Ω–∞ —Ä–æ–±–æ—Ç—É', parse_mode='HTML')
        except:
            pass
        return

    if call.data == 'business_edit_done':
        mess = m.text.split('\n')
        namep = ' '.join(mess[-4].split()[1:])
        tag = '_'.join(mess[-2].split()[1:]).upper()
        about = ' '.join(mess[-1].split()[2:])

        business = get_seans_business(u.id, m)
        if business is None:
            return

        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞", callback_data=f"business{business[0]}")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        business_out = get_str_business(business[1])
        try:
            bot.edit_message_text(text=business_out, chat_id=-1001162793975, message_id=int(business[7]), parse_mode='HTML')
        except:
            pass
        edit_business = [business[0], tag, namep, u.id, business[4], business[5], business[6], business[7], business[8], about]
        bot.edit_message_text(text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–ª–∏ <a href="https://t.me/businesses_yachminiya/{business[7]}">{namep}</a>.', message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard, disable_web_page_preview=True, parse_mode='HTML')
        insert_business_a(edit_business)
        return

    if call.data == 'new_business':
        if f_queue_call(call):
            return

        def form_bus(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞')
                main_menu(m, False)
                return
            mess = m.text.split('\n')
            try:
                namep = ' '.join(mess[-3].split()[1:])
                tag = '_'.join(mess[-2].split()[1:]).upper()
                about = ' '.join(mess[-1].split()[2:])
            except:
                bot.send_message(m.chat.id,
                                 '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')
                bot.register_next_step_handler(call.message, form_bus)
                return

            low = 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
            for i in tag:
                if i.lower() not in low:
                    if not i.isnumeric() and i != '_':
                        bot.send_message(m.chat.id,
                                         f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–≥. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç–µ–≥ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                        bot.register_next_step_handler(m, form_bus)
                        return

            if tag == '':
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–≥. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç–µ–≥ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, form_bus)
                return

            if namep == '':
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, form_bus)
                return

            if about == '.' or about == ' .':
                bot.send_message(m.chat.id,
                                 f'–ó–∞–º—ñ—Å—Ç—å –∫—Ä–∞–ø–∫–∏ –≤ —Ä—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–±–∞ —â–æ—Å—å –≤–ø–∏—Å–∞—Ç–∏. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, form_bus)
                return

            business = get_business(namep)

            if business:
                bot.send_message(m.chat.id,
                                 '–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.')
                bot.register_next_step_handler(m, form_bus)
                return

            business = get_business(tag)

            if business:
                bot.send_message(m.chat.id,
                                 '–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å <code>–°–¢–û–ü</code>.')
                bot.register_next_step_handler(m, form_bus)
                return

            passport = get_passport(m.from_user.id)

            business_out = f'–®–∞–±–ª–æ–Ω –≤–∞—à–æ–≥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –£–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É. <b>–£–≤–∞–≥–∞!</b> –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—ñ–∑–Ω–µ—Å—É –∫–æ—à—Ç—É—î 500 —è—á–æ–∫. –ö–æ—à—Ç–∏ –±—É–¥—É—Ç—å —Å–ø–∏—Å–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n\n'
            business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <i>{namep}</i>\n'''
            business_out += f'''<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i><a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a></i>\n'''
            business_out += f"<b>–¢–µ–≥:</b> <i>{tag}</i>\n"
            business_out += f"<b>–†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:</b> <i>{about}</i>\n"
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ', callback_data='business_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ', callback_data='new_business')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞', callback_data='business')
            keyboard.add(button)
            bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)

        bot.edit_message_text(text=business_form, message_id=call.message.id, chat_id=call.message.chat.id, parse_mode='HTML')
        bot.register_next_step_handler(call.message, form_bus)

    if call.data == 'business_done':
        mess = call.message.text.split('\n')
        namep = ' '.join(mess[-4].split()[1:])
        tag = '_'.join(mess[-2].split()[1:]).upper()
        about = ' '.join(mess[-1].split()[2:])
        passport = get_passport(u.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        if passport[9] < 500:
            bot.edit_message_text(text='–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞', message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard)
            return
        passport[9] = passport[9] - 500
        business_out = f'<b>–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ</b>\n\n'
        business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <i>{namep}</i>\n'''
        business_out += f'<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i><a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a></i>\n'
        business_out += f"<b>–¢–µ–≥:</b> <code>{tag}</code>\n"
        business_out += f'<b>–ê–∫—Ç–∏–≤–∏</b>: <i>0 —è—á–æ–∫</i>'
        n = bot.send_message(-1001162793975, business_out, parse_mode='HTML').id
        bot.edit_message_text(text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ <a href="https://t.me/businesses_yachminiya/{n}">{namep}</a>.', message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard, disable_web_page_preview=True, parse_mode='HTML')
        new_business(u, namep, n, tag, about)
        insert_passport_a(passport)
        business_out = get_str_business(namep)
        bot.edit_message_text(text=business_out, chat_id=-1001162793975, message_id=n, parse_mode='HTML', disable_web_page_preview=True)

    if call.data == "change_bill":
        employer_user = m.entities[0].user
        employer = get_passport(employer_user.id)

        business = get_seans_business(u.id, m)
        if business is None:
            return

        number = business[5].split().index(str(employer_user.id))
        old_bill = business[6].split()[number]

        bot.edit_message_text(f'–í–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ <a href="tg://user?id={employer_user.id}">{employer[2]} {employer[3]}</a>\n–ô–æ–≥–æ —Ç–µ–ø–µ—Ä—ñ—à–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {old_bill} {glas(old_bill)}\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ —è—á–æ–∫ –¥–ª—è –Ω–æ–≤–æ—ó –∑–∞—Ä–ø–ª–∞—Ç–∏. –Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>', message_id=call.message.message_id, chat_id=call.message.chat.id, parse_mode='HTML')

        def new_bill_f(m):
            if m.text == '–°–¢–û–ü':
                keyboard = types.InlineKeyboardMarkup()
                callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data=f"praciv")
                keyboard.add(callback_button)
                callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
                keyboard.add(callback_button)
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–º—ñ–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏', reply_markup=keyboard)
                return

            try:
                new_bill = int(m.text)
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>', parse_mode='HTML')
                bot.register_next_step_handler(m, new_bill_f)
                return

            if new_bill < 0:
                bot.send_message(m.chat.id,
                                 "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>", parse_mode='HTML')
                bot.register_next_step_handler(m, new_bill_f)
                return

            bills = business[6].split()
            bills[number] = str(new_bill)
            business[6] = ' '.join(bills)

            bot.send_message(m.chat.id, f'–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ <a href="tg://user?id={employer_user.id}">{employer[2]} {employer[3]}</a> –Ω–∞ {new_bill} {glas(new_bill)}', parse_mode='HTML')
            business_f(business, m, False)
            insert_business_a(business)
            try:
                bot.send_message(employer_user.id, f'–í–∞–º –∑–º—ñ–Ω–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ {business[2]}\n–í–∞—à–∞ –Ω–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ {new_bill} {glas(new_bill)}')
            except:
                pass

        bot.register_next_step_handler(call.message, new_bill_f)
        return

    if call.data == 'del_employer':
        employer_user = call.message.entities[0].user
        employer = get_passport(employer_user.id)

        business = get_seans_business(u.id, m)
        if business is None:
            return

        number = business[5].split().index(str(employer_user.id))
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"–ó–≤—ñ–ª—å–Ω–∏—Ç–∏", callback_data=f"del_employer_done")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"employer{number}")
        keyboard.add(callback_button)
        bot.edit_message_text(f'–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ <a href="tg://user?id={employer_user.id}">{employer[2]} {employer[3]}</a>?', message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data == 'del_employer_done':
        employer_user = call.message.entities[0].user
        employer = get_passport(employer_user.id)

        business = get_seans_business(u.id, m)
        if business is None:
            return

        number = business[5].split().index(str(employer_user.id))
        employers = business[5].split()
        bills = business[6].split()
        del(employers[number])
        del(bills[number])
        business[5] = ' '.join(bills)
        business[6] = ' '.join(bills)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=f'–í–∏ –∑–≤—ñ–ª—å–Ω–∏–ª–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ <a href="tg://user?id={employer_user.id}">{employer[2]} {employer[3]}</a>.',
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
        business_f(business, m, False)
        insert_business_a(business)
        try:
            bot.send_message(employer_user.id,
                             f'–í–∞—Å –∑–≤—ñ–ª—å–Ω–∏–ª–∏ –∑ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2][0]}')
        except:
            pass

    if call.data == "finances":
        business = get_seans_business(u.id, m)
        if business is None:
            return

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton('üí∏–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏', callback_data='transfer')
        keyboard.add(button)
        button = types.InlineKeyboardButton('üí≥–ó–Ω—è—Ç–∏ –∫–æ—à—Ç–∏', callback_data='withdraw')
        keyboard.add(button)
        button = types.InlineKeyboardButton('üíµ–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏ –∑—ñ —Å–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É', callback_data='count')
        keyboard.add(button)
        button = types.InlineKeyboardButton('üè¶–í–∏–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º', callback_data='salary')
        keyboard.add(button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"business{business[0]}")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        bot.edit_message_text(f'–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏\n{business[2]}\n–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}', message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard)

    if call.data == 'transfer':
        business = get_seans_business(u.id, m)
        if business is None:
            return
        msg = f"{business[2]}\n–î–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –∫–æ—à—Ç—ñ–≤ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n    <code>[id –æ—Ç—Ä–∏–º—É–≤–∞—á–∞] [—Å—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É] [–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)]</code>\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>\n–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}"
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id, text=msg,
                              parse_mode='HTML')
        def transfer(m):
            nonlocal business
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–µ—Ä–µ–∫–∞–∑—É –∫–æ—à—Ç—ñ–≤.')
                business_f(business, m, False)
                return
            mess = m.text.split()
            if len(mess) < 2:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, transfer)
                return
            try:
                amount_m = int(mess[1])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, transfer)
                return

            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, transfer)
                return
            acc_t = get_passport(mess[0])
            bus = False
            if acc_t is None:
                acc_t = get_business(mess[0])
                bus = True
                if acc_t is None:
                    bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                    bot.register_next_step_handler(m, transfer)
                    return

            if len(mess) > 2:
                description = ' '.join(m.text.split()[2:])
            else:
                description = None

            if int(business[4]) < amount_m:
                bot.send_message(m.chat.id, f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à—É —Å—É–º—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, transfer)
                return

            comm = commission(int(amount_m), 1)

            if business[4] < amount_m + comm:
                bot.send_message(m.chat.id,
                                 f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à—É —Å—É–º—É –∫–æ—à—Ç—ñ–≤.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.', parse_mode='HTML')
                bot.register_next_step_handler(m, transfer)
                return

            business[4] = business[4] - amount_m - comm
            namep1 = f'<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>'
            if bus:
                acc_t[4] = acc_t[4] + amount_m
                namep2 = f'<a href="https://t.me/businesses_yachminiya/{acc_t[7]}">{acc_t[2]}</a>'
                money_t = acc_t[4]
            else:
                acc_t[9] = acc_t[9] + amount_m
                namep2 = f'<a href="tg://user?id={acc_t[1]}">{acc_t[2]} {acc_t[3]}</a>'
                money_t = acc_t[9]

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep1} ({business[4]})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep2} ({money_t})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            msg += f'–ö–æ–º—ñ—Å—ñ—è: {comm} {glas(comm)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'

            bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
            # bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

            if bus:
                # bot.edit_message_text(get_str_business(acc_t[1]), -1001162793975, acc_t[7], parse_mode='HTML')

                msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
                msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
                msg += f'–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
                msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep1} ({business[9]})\n'
                msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep2} ({money_t})\n'
                msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
                if description is not None:
                    msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
                try:
                    bot.send_message(acc_t[3], msg, parse_mode='HTML', disable_web_page_preview=True)
                except:
                    pass
            else:
                msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
                msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
                msg = f'–ù–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
                msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep1} ({business[9]})\n'
                msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
                if description is not None:
                    msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
                try:
                    bot.send_message(acc_t[1], msg, parse_mode='HTML', disable_web_page_preview=True)
                except:
                    pass

            business_f(business, m, False)
            insert_business_a(business)
            acc_g = get_passport(business[3])
            if bus:
                insert_business_a(acc_t)
                acc_t = get_passport(acc_t[3])
            else:
                insert_passport_a(acc_t)
            update_channel_business(business[1])
            update_channel_rid(acc_g[13])
            update_channel_rid(acc_t[13])

        bot.register_next_step_handler(m, transfer)
        return

    if call.data == 'withdraw':
        business = get_seans_business(u.id, m)
        if business is None:
            return
        acc_t = get_passport(u.id)
        def withdraw(m):
            nonlocal business, acc_t
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤.')
                business_f(business, m, False)
                return

            try:
                amount_m = int(m.text)
            except:
                bot.send_message(m.chat.id,
                                 '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, withdraw)
                return

            if business[4] < amount_m:
                bot.send_message(m.chat.id, f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π –¥–ª—è –∑–Ω—è—Ç—Ç—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, withdraw)
                return

            if amount_m < 1:
                bot.send_message(m.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π –¥–ª—è –∑–Ω—è—Ç—Ç—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, withdraw)
                return

            business[4] = business[4] - amount_m
            acc_t[9] = acc_t[9] + amount_m

            namep = f'<a href="tg://user?id={acc_t[1]}">{acc_t[2]} {acc_t[3]}</a>'
            money_t = acc_t[9]

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: <a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a> ({business[4]})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep} ({money_t})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

            business_f(business, m, False)
            insert_business_a(business)
            insert_passport_a(acc_t)
            update_channel_business(business[1])
            update_channel_rid(acc_t[13])

        bot.edit_message_text(text=f'{business[2]}\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ—à—Ç—ñ–≤, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω—è—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>\n–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}\n–°—Ç–∞—Ç–∫–∏: {acc_t[11]} {glas(acc_t[11])}', message_id=call.message.message_id, chat_id=call.message.chat.id, parse_mode='HTML')
        bot.register_next_step_handler(call.message, withdraw)
        return

    if call.data == 'count':
        business = get_seans_business(u.id, m)
        if business is None:
            return
        acc_g = get_passport(u.id)

        def count(m):
            nonlocal business, acc_g
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤.')
                business_f(business, m, False)
                return

            try:
                amount_m = int(m.text)
            except:
                bot.send_message(m.chat.id,
                                 '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, count)
                return

            if acc_g[9] < amount_m:
                bot.send_message(m.chat.id,
                                 f'–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, count)
                return

            if amount_m < 1:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π –¥–ª—è –Ω–∞—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>.',
                                 parse_mode='HTML')
                bot.register_next_step_handler(m, count)
                return

            business[4] = business[4] + amount_m
            acc_g[9] = acc_g[9] - amount_m

            namep = f'<a href="tg://user?id={acc_g[1]}">{acc_g[2]} {acc_g[3]}</a>'
            money_t = acc_g[9]

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep} ({money_t})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: <a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a> ({business[4]})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

            business_f(business, m, False)
            insert_business_a(business)
            insert_passport_a(acc_g)
            update_channel_business(business[1])
            update_channel_rid(acc_g[13])

        bot.edit_message_text(
            text=f'{business[2]}\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ—à—Ç—ñ–≤, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω—è—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞\n–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ—à—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å <code>–°–¢–û–ü</code>\n–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}\n–°—Ç–∞—Ç–∫–∏: {acc_g[9]} {glas(acc_g[9])}',
            message_id=call.message.message_id, chat_id=call.message.chat.id, parse_mode='HTML')
        bot.register_next_step_handler(call.message, count)
        return



@bot.message_handler(func=lambda m: m.chat.id == -1001452719524, content_types=['new_chat_members'])
def new_chat_member_gr(m):
    global welcome_m, pass_form_call

    for i in m.new_chat_members:
        if i.is_bot():
            continue
        user = get_user(i.id)
        if user is None:
            non_reg(i, m)
            try:
                bot.restrict_chat_member(chat_id=m.chat.id, user_id=i.id)
            except:
                pass
            continue
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üñã –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç", callback_data="pass")
    keyboard.add(callback_button)
    chat = m.chat
    welc = chat[3]
    welc_l = welc.split('{enter}')
    welc_out = ''
    for i in range(len(welc_l)):
        welc_out += f'{welc_l[i]}\n'
    welc_out = welc_out.replace('{empty}', f'{chr(8205)}')
    welc_out = welc_out.replace('{name}', f'{name(m.from_user)}')

    pass_form_call = m.from_user.id
    bot.send_message(m.chat.id, welc_out, parse_mode='HTML', reply_markup=keyboard, reply_to_message_id=m.message_id)


@bot.message_handler(content_types=['new_chat_members'])
def new_chat_members(m):
    chat = m.chat
    if m.new_chat_members[0].id == BOT_USER:
        if get_chat(m.chat.id) is not None:
            return
        out = f'{chat.title}\n'
        out += f'{chat.id}\n'
        if chat.username is not None:
            out += f'{chat.username}\n\n'
        if chat.description is not None:
            out += f'{chat.description}'
        # bot.send_message(-1001476087749, f'{out}')

        if m.from_user.id != CREATOR:
            bot.send_message(chat.id, f'{out}\n\n–§–ª–µ—à–∫–∞ –∑ —Ü–∏–º–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ –≤–∂–µ –≤ –ì–∞–∞–∑—ñ')
            bot.send_message(chat.id, '–±—É–µ–Ω–æ—Å –¥—ñ–∞—Å, –ø–µ–¥—Ä—ñ–ª–∞—Å!')
            bot.leave_chat(chat.id)
            return

        new_chat(chat)
        return

    for i in m.new_chat_members:
        user = get_user(i.id)
        if user is None:
            try:
                bot.restrict_chat_member(chat_id=m.chat.id, user_id=i.id)
            except:
                pass
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='ü§ñ –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é', url='t.me/yachminiya_bot')
            keyboard.add(button)
            bot.send_message(m.chat.id,
                             f'<a href="tg://user?id={i.id}">{name(i)}</a>, –≤—ñ—Ç–∞—î–º–æ! –¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤(–ª–∞) –¥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó, –∞–ª–µ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–∞ –∫–Ω–æ–ø–∫–æ—é –∑–Ω–∏–∑—É',
                             parse_mode='HTML', reply_markup=keyboard)

    chat_db = get_chat(chat.id)
    welc = chat_db[3]
    if welc == 'None':
        return
    welc_l = welc.split('{enter}')
    welc_out = ''
    for i in range(len(welc_l)):
        welc_out += f'{welc_l[i]}\n'
    welc_out = welc_out.replace('chr(8205)', f'{chr(8205)}')
    welc_out = welc_out.replace('{name}', f'{name(m.new_chat_members[0])}')
    bot.reply_to(m, welc_out, parse_mode='HTML')


@bot.message_handler(content_types=["text"])
def commands(m):
    global aktyv, lakt, zhandarm, CREATOR, voting_q, del_pass, weekdays, global_user, t
    tt = time.time()
    mess = m.text.split()

    man = get_user(m.from_user.id)
    man_pass = get_passport(m.from_user.id)
    if man is not None:
        changed = False
        if man[2] != name(m.from_user):
            man[2] = name(m.from_user)
            changed = True
        if man[5] != m.from_user.username:
            man[5] = m.from_user.username
            changed = True
        if changed:
            insert_user_a(man)
    if man_pass is not None:
        changed = False
        if man_pass[4] != name(m.from_user):
            man_pass[4] = name(m.from_user)
            changed = True
        if man_pass[5] != m.from_user.username:
            man_pass[5] = m.from_user.username
            changed = True
        if changed:
            insert_passport_a(man_pass)

    if m.forward_sender_name or m.forward_from or m.forward_from_chat or m.forward_from_message_id:
        return

    if m.text[0] == '!':
        if f_queue(m):
            return

    # TODO aktyv
    """if m.chat.type == 'private':
        msg = bot.forward_message(-1001344984878, m.chat.id, m.message_id)
        bot.reply_to(msg, f'{m.chat.id} {m.message_id}')

    if m.chat.id == -1001344984878:
        if m.reply_to_message is not None:
            mess_r = m.reply_to_message
            c_id = int(mess_r.text.split()[0])
            m_id = int(mess_r.text.split()[1])
            try:
                if mess()[0] == '—Ä':
                    bot.send_message(chat_id=c_id, text=' '.join(m.text.split()[1:]), reply_to_message_id=m_id)
                else:
                    bot.send_message(chat_id=c_id, text=' '.join(m.text.split()))
            except:
                pass

    if m.chat.id == -1001404271371:
        bot.forward_message(-1001492661297, m.chat.id, m.message_id)"""

    if mess[0] == '!–ø':
        if len(mess) > 1:
            try:
                u = bot.get_chat(int(mess[1]))
            except Exception as e:
                bot.send_message(m.chat.id, f'–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Å–æ–±–∏.')
                return
            rig = True
        elif m.reply_to_message:
            u = m.reply_to_message.from_user
            rig = True
        else:
            u = m.from_user
            rig = False

        if rig:
            usr = get_user(m.from_user.id)
            if usr is None:
                non_reg(m.from_user, m)
                return
            if not int(usr[6].split()[1]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —á—É–∂–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.')
                return

        bot.send_message(m.chat.id, get_str_passport(u), parse_mode='HTML')
        if m.chat.id == -1001329014820:
            bot.send_message(m.chat.id, time.time() - tt)

    if m.text.lower() in reputation or m.text.lower() in bad_reputation:
        if m.chat.type == 'private':
            return
        if m.reply_to_message is None:
            return
        elif m.reply_to_message.from_user.id == m.from_user.id:
            bot.reply_to(m, '–ù–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Å–æ–±—ñ')
            return

        if m.text.lower() in reputation:
            l = 1
            word = '–ø—ñ–¥–≤–∏—â—É—î'
            cooldown = 60
        else:
            l = -1
            word = '–∑–∞–Ω–∏–∂—É—î'
            cooldown = 90

        u_g_id = m.from_user.id
        u_t_id = m.reply_to_message.from_user.id
        u_g = get_user(u_g_id)
        if u_g is None:
            non_reg(m.from_user, m)
            return

        u_t = get_user(u_t_id)
        if u_g is None:
            non_reg(m.reply_to_message.from_user, m)
            return

        if int(u_g[4]) < int(time.time() // 1):
            u_g[4] = int(time.time() // 1) + cooldown
            u_t[3] = int(u_t[3]) + l

            msg = f'{u_g[2]}[{u_g[3]}] {word} —Ä–µ–ø—É—Ç–∞—Ü—ñ—é {u_t[2]}[{u_t[3]}]'
            bot.send_message(m.chat.id, msg, parse_mode='HTML')
            insert_user_a(u_g)
            insert_user_a(u_t)
            return
        else:
            time_to_sfdfsdfsfdsdf = int((float(u_g[4]) - time.time()) // 1) + 2
            last_nums = int(time_to_sfdfsdfsfdsdf) % 100
            last_num = int(time_to_sfdfsdfsfdsdf) % 10
            if 10 < last_nums < 20:
                glas_s = '—Å–µ–∫—É–Ω–¥'
            elif int(last_num) % 10 in (2, 3, 4):
                glas_s = '—Å–µ–∫—É–Ω–¥–∏'
            elif int(last_num) % 10 in (5, 6, 7, 8, 9, 0):
                glas_s = '—Å–µ–∫—É–Ω–¥'
            else:
                glas_s = '—Å–µ–∫—É–Ω–¥—É'
            bot.send_message(m.chat.id, f'–ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {time_to_sfdfsdfsfdsdf} {glas_s}')
            return

    if mess[0] == '!—Ç–µ—Å—Ç':
        '''global_user = m.from_user
        t = Timer(int(mess[1]), timeout, args=(m.from_user, m))
        t.start()'''
        bot.send_message(m.chat.id, '!–∞')

    if mess[0] == '!—Ç–æ–ø' or mess[0] == '!–∫—Ä–∞—â–∏–π_—Ç–æ–ø':
        if mess[0] == '!—Ç–æ–ø':
            top = True
        else:
            top = False
        if len(m.text.split()) > 1:
            try:
                am_n = int(m.text.split()[1])
            except:
                bot.reply_to(m, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                return
        else:
            am_n = 10

        users = get_all_users_rep_order()
        amount = len(users)

        """for i in range(amount):
            for j in range(i, amount):
                if top:
                    if int(users[i][3]) < int(users[j][3]):
                        users[i], users[j] = users[j], users[i]
                else:
                    if int(users[i][3]) > int(users[j][3]):
                        users[i], users[j] = users[j], users[i]"""

        if am_n > 30:
            am_n = 30
        elif am_n > amount:
            am_n = amount
        if top:
            msg_out = f'–ù–∞–π–∫—Ä–∞—â–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è\n'
            users.reverse()
        else:
            msg_out = f'–î—ñ–π—Å–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è\n'

        for i in range(am_n):
            if int(users[i][3]) != 0:
                msg_out += f'{users[i][3]} <a href="t.me/{users[i][5]}">{html(users[i][2])}</a>\n'
        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)
        if m.chat.id == -1001329014820:
            bot.send_message(m.chat.id, time.time() - tt)
        return

    if m.text.split()[0] == '!–∫—Ä–∞—â–∏–π_—Ç–æ–ø':
        if len(m.text.split()) > 1:
            try:
                am_n = int(m.text.split()[1])
            except:
                bot.reply_to(m, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                return
        else:
            am_n = 10

        users = get_all_users()
        amount = len(users)

        for i in range(amount):
            for j in range(i, amount):
                if int(users[i][3]) > int(users[j][3]):
                    users[i], users[j] = users[j], users[i]

        if am_n > 30:
            am_n = 30
        elif am_n > amount:
            am_n = amount
        msg_out = f'–î—ñ–π—Å–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è\n'

        for i in range(am_n):
            msg_out += f'{users[i][3]} <a href="t.me/{users[i][5]}">{html(users[i][2])}</a>\n'
        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)
        return

    if mess[0] == '!—Ä–∞—Ö—É–Ω–æ–∫':
        if len(mess) > 1:
            try:
                u = bot.get_chat(int(mess[1]))
            except Exception as e:
                bot.send_message(m.chat.id, f'–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Å–æ–±–∏.')
                return
            rig = True
        elif m.reply_to_message:
            u = m.reply_to_message.from_user
            rig = True
        else:
            u = m.from_user
            rig = False

        if rig:
            usr = get_user(m.from_user.id)
            if usr is None:
                non_reg(m.from_user, m)
                return
            if not int(usr[6].split()[2]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —á—É–∂–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.')
                return

        bot.send_message(m.chat.id, get_str_acc(u), parse_mode='HTML')

    if mess[0] == '!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏':
        acc_g = get_passport(m.from_user.id)
        if acc_g is None:
            bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.')

        if m.reply_to_message is None:
            if len(mess) < 3:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[2])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            acc_t = get_passport(mess[1])
            pp_bus = 0
            if acc_t is None:
                acc_t = get_business(mess[1])
                pp_bus = 1
                if acc_t is None:
                    bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                    return

            if len(mess) > 3:
                description = ' '.join(m.text.split()[3:])
            else:
                description = None
        else:
            if len(mess) < 2:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[1])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            try:
                acc_t = get_passport(m.reply_to_message.from_user.id)
                pp_bus = 2
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                return
            if len(mess) > 2:
                description = ' '.join(m.text.split()[2:])
            else:
                description = None

        if int(acc_g[9]) < amount_m:
            bot.send_message(m.chat.id, f'–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É')
            return

        comm = commission(int(amount_m), 2)

        if int(acc_g[9]) < amount_m + comm:
            bot.send_message(m.chat.id,
                             f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à—É —Å—É–º—É –∫–æ—à—Ç—ñ–≤')
            return

        if pp_bus == 0 or pp_bus == 2:
            acc_g[9] = acc_g[9] - amount_m - comm
            acc_t[9] = acc_t[9] + amount_m
            namep = f'<a href="tg://user?id={acc_t[1]}">{acc_t[2]} {acc_t[3]}</a>'
            money_t = acc_t[9]
        else:
            acc_g[9] = int(acc_g[9]) - amount_m - comm
            acc_t[4] = int(acc_t[4]) + amount_m
            namep = f'<a href="https://t.me/businesses_yachminiya/{acc_t[7]}">{acc_t[2]}</a>'
            money_t = acc_t[4]

        msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
        msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
        msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
        msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: <a href="tg://user?id={acc_g[1]}">{acc_g[2]} {acc_g[3]}</a> ({acc_g[9]})\n'
        msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep} ({money_t})\n'
        msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
        msg += f'–ö–æ–º—ñ—Å—ñ—è: {comm} {glas(comm)}\n'
        if description is not None:
            msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'

        bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
        # bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

        if pp_bus == 0:
            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg = f'–ù–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: <a href="tg://user?id={acc_g[1]}">{acc_g[2]} {acc_g[3]}</a> ({acc_g[9]})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
            try:
                bot.send_message(acc_t[1], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass
        elif pp_bus == 1:
            # bot.edit_message_text(get_str_business(acc_t[1]), -1001162793975, acc_t[7], parse_mode='HTML')

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: <a href="tg://user?id={acc_g[1]}">{acc_g[2]} {acc_g[3]}</a> ({acc_g[9]})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep} ({money_t})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
            try:
                bot.send_message(acc_t[3], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass

        insert_passport_a(acc_g)
        if pp_bus == 0 or pp_bus == 2:
            insert_passport_a(acc_t)
        else:
            insert_business_a(acc_t)
            acc_t = get_passport(acc_t[3])

        update_channel_rid(acc_g[13])
        update_channel_rid(acc_t[13])

    if m.text.split()[0] == '!–æ–ª—ñ–≥–∞—Ä—Ö–∏':
        if len(m.text.split()) > 1:
            try:
                am_n = int(m.text.split()[1])
            except:
                bot.reply_to(m, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                return
        else:
            am_n = 10

        passports = get_all_passports()
        amount = len(passports)
        all_businesses = get_all_businesses()
        for i in range(len(passports)):
            for j in range(len(all_businesses)):
                if passports[i][1] == all_businesses[j][3]:
                    passports[i][9] = passports[i][9] + all_businesses[j][4]

        for i in range(amount):
            for j in range(i, amount):
                if int(passports[i][9]) < int(passports[j][9]):
                    passports[i], passports[j] = passports[j], passports[i]

        if am_n > 30:
            am_n = 30
        elif am_n > amount:
            am_n = amount
        msg_out = f'–ù–∞–π–∫—Ä–∞—â–∞ –ù–∞–π–±–∞–≥–∞—Ç—à—ñ\n'

        for i in range(am_n):
            if int(passports[i][9]) > 0:
                msg_out += f'{passports[i][9]} <a href="t.me/{passports[i][5]}">{passports[i][2]} {passports[i][3]}</a>\n'
        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)
        return

    if m.text == '!–æ—á–∏—Å—Ç–∏—Ç–∏':
        if m.chat.type == 'private':
            return
        if m.reply_to_message is None:
            bot.reply_to(m, '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        u = get_user(m.from_user.id)
        if u is None:
            non_reg(m.from_user, m)
            return
        if not int(u[6].split()[3]):
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É')
            return
        try:
            usr = bot.forward_message(thrash, m.chat.id, m.reply_to_message.message_id).forward_from
            bot.delete_message(m.chat.id, m.reply_to_message.message_id)
        except:
            return
        if usr is not None:
            frw = True
        else:
            frw = False

        for i in range(m.reply_to_message.message_id + 1, m.message_id):
            try:
                if frw:
                    usr = bot.forward_message(thrash, m.chat.id, i).forward_from
                    if usr is not None:
                        if usr.id == m.reply_to_message.from_user.id:
                            bot.delete_message(m.chat.id, i)
                else:
                    mess = bot.forward_message(thrash, m.chat.id, i)
                    usr = mess.forward_from
                    usr_name = mess.forward_sender_name
                    if usr is None:
                        if usr_name == name(m.reply_to_message.from_user):
                            bot.delete_message(m.chat.id, i)
            except:
                pass

        try:
            bot.delete_message(m.chat.id, m.message_id)
        except:
            pass

    if m.text == '!–¥–µ–ª':
        if m.chat.type == 'private':
            return
        if m.reply_to_message is None:
            bot.reply_to(m, '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        u = get_user(m.from_user.id)
        if u is None:
            non_reg(m.from_user, m)
            return
        if not int(u[6].split()[3]):
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É')
            return

        try:
            bot.delete_message(m.chat.id, m.reply_to_message.message_id)
            bot.delete_message(m.chat.id, m.message_id)
        except:
            pass

    if m.text == '!–∞–π–¥—ñ':
        if m.reply_to_message is not None:
            bot.send_message(m.chat.id, f'{m.reply_to_message.from_user.id}')
            return
        bot.send_message(m.chat.id, f'{m.chat.id}')

    if m.text == '!id':
        msg = f'Chat id: <code>{m.chat.id}</code>\n'
        msg += f'User id: <code>{m.from_user.id}</code>\n'
        if m.reply_to_message is not None:
            msg += f'Reply user id: <code>{m.reply_to_message.from_user.id}</code>\n'
            msg += f'Reply message id: <code>{m.reply_to_message.message_id}</code>\n'
        try:
            bot.send_message(m.chat.id, msg, parse_mode='HTML')
        except:
            pass

    """if m.text == '!–æ–Ω–æ–≤–∏—Ç–∏_–∞–∫—Ç–∏–≤':
        aktyv_r()
        bot.reply_to(m, '–¢–∞–±–ª–∏—Ü—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
        return"""

    if mess[0] == '!–∞':
        if m.reply_to_message is not None:
            u = m.reply_to_message.from_user
        else:
            u = m.from_user
        usr = get_user(u.id)
        if usr is None:
            non_reg(u, m)
            return
        all_users = get_all_users()
        all_messages = 0
        all_words = 0
        for i in all_users:
            all_messages += i[7]
            all_words += i[8]

        if len(mess) == 1:
            out = f'–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n<a href="tg://user?id={u.id}">{html(name(u))}</a>\n\n'
            out += f'–†–µ–ø—É—Ç–∞—Ü—ñ—è: {usr[3]}\n'
            out += f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –≤–µ—Å—å —á–∞—Å: {usr[7]}\n'
            out += f'–°–ª—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å: {usr[8]}\n'
            out += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤—É: {round(((usr[7] / all_messages) + (usr[8] / all_words)) * 50, 2)}%"
            bot.send_message(m.chat.id, out, parse_mode='HTML')
            return

        if mess[1].lower() == '—Ç–∏–∂–¥–µ–Ω—å':
            word1 = '–¢–∏–∂–Ω–µ–≤–∞'
            word2 = '—Ç–∏–∂–¥–µ–Ω—å'
            day = None
            one_day = False
        elif mess[1].lower() == '—Å—å–æ–≥–æ–¥–Ω—ñ':
            day = datetime.today().weekday()
            word1 = '–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è'
            word2 = '—Å—å–æ–≥–æ–¥–Ω—ñ'
            one_day = True
        elif mess[1].lower() == '–≤—á–æ—Ä–∞':
            day = datetime.today().weekday() - 1
            if day < 0:
                day += 7
            word1 = '–í—á–æ—Ä–∞—à–Ω—è'
            word2 = '–≤—á–æ—Ä–∞'
            one_day = True
        elif mess[1].lower() == '–ø–æ–∑–∞–≤—á–æ—Ä–∞':
            day = datetime.today().weekday() - 2
            if day < 0:
                day += 7
            word1 = '–ü–æ–∑–∞–≤—á–æ—Ä–∞—à–Ω—è'
            word2 = '–≤—á–æ—Ä–∞—à–Ω—è'
            one_day = True
        elif mess[1].lower() == '–∑–∞–≤—Ç—Ä–∞':
            time.sleep(1)
            bot.send_message(m.chat.id, '–Ø, –ø–æ —Ç–≤–æ—î–º—É, —Å—Ö–æ–∂–∞ –Ω–∞ –í–∞–Ω–≥—É?')
            return
        elif mess[1].lower() == '–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞':
            time.sleep(1)
            bot.send_message(m.chat.id, '–ù—É —Ü–µ –≤–∂–µ –Ω–µ –ª—ñ–∑–µ –≤ –∂–æ–¥–Ω—ñ —Ä–∞–º–∫–∏. –©–æ —Ç–∏ —Ö–æ—á–µ—à –≤—ñ–¥ –º–µ–Ω–µ?')
            return
        else:
            try:
                day, word2, word1 = weekdays[mess[1].lower()]
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                return
            one_day = True

        if one_day:
            all_msgs = 0
            all_words = 0
            msg = int(usr[11].split()[day])
            word = int(usr[12].split()[day])
            for i in all_users:
                all_msgs += int(i[11].split()[day])
                all_words += int(i[12].split()[day])
            m_per = msg / all_msgs
            w_per = word / all_words
            percent = round((m_per + w_per) * 50, 2)
        else:
            msg = 0
            word = 0
            all_msgs = 0
            all_words = 0
            msgs = usr[11].split()
            words = usr[12].split()
            for i in all_users:
                msg_l = i[11].split()
                word_l = i[12].split()
                for j in range(len(msg_l)):
                    all_msgs += int(msg_l[j])
                    all_words += int(word_l[j])

            for i in range(len(msgs)):
                msg += int(msgs[i])
                word += int(words[i])
            m_per = msg / all_msgs
            w_per = word / all_words
            percent = round((m_per + w_per) * 50, 2)

        out = f'{word1} –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n'
        out += f'<a href="tg://user?id={u.id}">{html(name(u))}\n\n</a>'
        out += f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ {word2}: {msg}\n'
        out += f'–°–ª—ñ–≤ –∑–∞ {word2}: {word}\n'
        out += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤—É: {percent}%"
        bot.send_message(m.chat.id, out, parse_mode='HTML')

    if mess[0] == '!—Å—Ç–∞—Ç—Ç—è':
        if m.chat.type == 'private':
            bot.reply_to(m, '–£–¥–∞—á—ñ, –±—Ä–∞—Ç–∞–Ω)')
            return
        try:
            number = int(mess[1])
        except:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
            return
        if len(mess) < 3:
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                return
            id_loh = m.reply_to_message.from_user.id
        else:
            id_loh = int(mess[2])

        zhan = get_user(m.from_user.id)
        if zhan is None:
            non_reg(m.from_user, m)
            return

        zher = get_passport(id_loh)
        if zher is None:
            ban = True
            zher = get_user(id_loh)
            if zher is None:
                try:
                    zher = bot.get_chat(id_loh)
                    zher_name = name(zher)
                except:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                    return
            else:
                zher_name = zher[2]
        else:
            ban = False
            zher_name = zher[2] + zher[3]

        if ban:
            if not int(zhan[6].split()[4]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.')
                return
        else:
            if not int(zhan[6].split()[3]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.')
                return
        adm = get_all_admin()
        am = len(adm)
        st = adm[number - 1]
        if number > am:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ.')
            return
        if zhandarm > 5:
            bot.reply_to(m, '–ß–µ—Ä–≥—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞')
            return

        chats = get_all_chats()
        for i in range(len(chats)):
            if ban:
                time_b = time.time() + int(st[2]) * 3600
                try:
                    bot.kick_chat_member(chat_id=chats[i][2], user_id=id_loh, until_date=time_b)
                except:
                    pass
            else:
                time_m = time.time() + int(st[2]) * 3600
                try:
                    bot.restrict_chat_member(chat_id=chats[i][2], user_id=id_loh, until_date=time_m)
                except:
                    pass
        zhan = get_passport(m.from_user.id)
        if ban:
            try:
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={id_loh}">{html(zher_name)}</a> –≤–∏–ª—É—á–µ–Ω–∏–π —ñ–∑ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó –∑–∞ —Å—Ç–∞—Ç–µ—é {number} <a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86%D0%86-Adm%D1%96n%D1%96strativn%D1%96-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª—É –Ü–Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É</a> –Ω–∞ {st[2]} –≥–æ–¥–∏–Ω(–∏)',
                                 parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass
            if int(zhan[1]) == CREATOR:
                posada = '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–æ–º'
            elif int(zhan[6].split()[4]):
                posada = '–°—Ç–∞—Ä—à–∏–º –ñ–∞–Ω–¥–∞—Ä–º–æ–º'
            else:
                posada = '–ú–æ–ª–æ–¥—à–∏–º –ñ–∞–Ω–¥–∞—Ä–º–æ–º'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤ —É –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –°—É–¥', callback_data='admin_sud')
            keyboard.add(button)
            bot.send_message(id_loh,
                             f'–í–∏ –±—É–ª–∏ –≤–∏–ª—É—á–µ–Ω—ñ —ñ–∑ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó {posada} <a href="tg://user?id={m.from_user.id}">{zhan[2]} {zhan[3]}</a> –Ω–∞ {st[2]} –≥–æ–¥–∏–Ω(–∏) –∑–∞ —Å—Ç–∞—Ç–µ—é {number} <a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86%D0%86-Adm%D1%96n%D1%96strativn%D1%96-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª—É –Ü–Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É</a>\n–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:\n{st[1]}\n\n–Ø–∫—â–æ –≤–∏ –≤–≤–∞–∂–∞—î—Ç–µ, —â–æ —Ü–µ–π –≤–∏—Ä–æ–∫ –±—É–≤ –Ω–µ–ø—Ä–∞–≤–æ–º—ñ—Ä–Ω–∏–º, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –°—É–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ',
                             reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)
        else:
            try:
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={id_loh}">{html(zher_name)}</a> –≤—Ç—Ä–∞—á–∞—î –ø—Ä–∞–≤–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó –∑–∞ —Å—Ç–∞—Ç–µ—é {number} <a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86%D0%86-Adm%D1%96n%D1%96strativn%D1%96-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª—É –Ü–Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É</a> –Ω–∞ {st[2]} –≥–æ–¥–∏–Ω(–∏)',
                                 parse_mode='HTML', disable_web_page_preview=True)
            except:
                return
            if int(zhan[1]) == CREATOR:
                posada = '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–æ–º'
            elif int(zhan[6].split()[4]):
                posada = '–°—Ç–∞—Ä—à–∏–º –ñ–∞–Ω–¥–∞—Ä–º–æ–º'
            else:
                posada = '–ú–æ–ª–æ–¥—à–∏–º –ñ–∞–Ω–¥–∞—Ä–º–æ–º'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤ —É –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –°—É–¥', callback_data='admin_sud')
            keyboard.add(button)
            bot.send_message(m.reply_to_message.from_user.id,
                             f'–í–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –ø—Ä–∞–≤–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó {posada} <a href="tg://user?id={m.from_user.id}">{zhan[2]} {zhan[3]}</a> –Ω–∞ {st[2]} –≥–æ–¥–∏–Ω(–∏) –∑–∞ —Å—Ç–∞—Ç–µ—é {number} <a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86%D0%86-Adm%D1%96n%D1%96strativn%D1%96-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª—É –Ü–Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É</a>\n–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:\n{st[1]}\n\n–Ø–∫—â–æ –≤–∏ –≤–≤–∞–∂–∞—î—Ç–µ, —â–æ —Ü–µ–π –≤–∏—Ä–æ–∫ –±—É–≤ –Ω–µ–ø—Ä–∞–≤–æ–º—ñ—Ä–Ω–∏–º, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –°—É–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ',
                             reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)

        zhandarm += 1
        return

    if m.text == '!–¥–æ–¥–∞—Ç–∏_—á–∞—Ç':
        if m.chat.type == 'private':
            return
        user = get_user(m.from_user.id)
        if user is None:
            non_reg(m.from_user, m)
            return
        chat = get_chat(m.chat.id)
        number = chat[0]

        user[9] += f' {number}'
        insert_user_a(user)
        bot.reply_to(m, '–¶–µ–π —á–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó!')
        return

    if m.text == '!–ø–æ–º–∏–ª—É–≤–∞–Ω–Ω—è':
        if m.chat.type == 'private':
            bot.reply_to(m, '–£–¥–∞—á—ñ, –±—Ä–∞—Ç–∞–Ω)')
            return
        if m.reply_to_message is None:
            bot.send_message(m.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

        zhan = get_user(m.from_user.id)
        if zhan is None:
            non_reg(m.from_user, m)
            return
        rights = zhan[6]
        if not int(rights.split()[4]):
            bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return

        chats = get_all_chats()
        for i in chats:
            try:
                bot.unban_chat_member(chat_id=i[2], user_id=m.reply_to_message.from_user.id, only_if_banned=True)
                bot.promote_chat_member(chat_id=i[2], user_id=m.reply_to_message.from_user.id)
            except:
                pass
        bot.send_message(m.chat.id, f'{html(name(m.reply_to_message.from_user))} –ø–æ–Ω–æ–≤–ª–µ–Ω–∏–π(–∞) —É —Å–≤–æ—ó—Ö –ø—Ä–∞–≤–∞—Ö')
        try:
            bot.send_message(m.reply_to_message.from_user.id, '–í–∏ –ø–æ–Ω–æ–≤–ª–µ–Ω—ñ —É —Å–≤–æ—ó—Ö –ø—Ä–∞–≤–∞—Ö —É –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó')
        except:
            pass
        return

    if m.text == '!—á–µ—Ä–≥–∞':
        if m.from_user.id != CREATOR:
            # bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return
        zhandarm = 0
        bot.send_message(m.chat.id, '–ß–µ—Ä–≥—É –ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—ó —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!')
        return

    # if m.text == '!–∑–∞—Ä–ø–ª–∞—Ç–∞':

    # –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è. –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

    if mess[0] == '!–Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ':
        if len(mess) == 1:
            word_vars = None
            day = False
            week = False
            am_n = 10
        elif len(mess) == 2:
            if mess[1].isdigit():
                word_vars = None
                am_n = int(mess[1])
                day = False
                week = False
            else:
                if mess[1].lower() == '—Ç–∏–∂–¥–µ–Ω—å':
                    word_vars = '—Ç–∏–∂–¥–µ–Ω—å'
                    day = False
                    week = True
                    am_n = 10
                else:
                    try:
                        word_vars = weekdays[mess[1].lower()]
                        day = True
                        week = False
                        am_n = 10
                    except:
                        bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
                        return
        elif len(mess) == 3:
            if mess[1].isdigit():
                n = 1
                d = 2
            elif mess[2].isdigit():
                n = 2
                d = 1
            else:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
                return
            am_n = int(mess[n])
            if mess[d].lower() == '—Ç–∏–∂–¥–µ–Ω—å':
                word_vars = '—Ç–∏–∂–¥–µ–Ω—å'
                day = False
                week = True
            elif mess[d].lower() == '—Å—å–æ–≥–æ–¥–Ω—ñ':
                word_vars = (datetime.today().weekday(), '—Å—å–æ–≥–æ–¥–Ω—ñ')
                day = True
                week = False
            elif mess[d].lower() == '–≤—á–æ—Ä–∞':
                day = datetime.today().weekday() - 1
                if day < 0:
                    day += 7
                word_vars = (day, '–≤—á–æ—Ä–∞')
                day = True
                week = False
            elif mess[d].lower() == '–ø–æ–∑–∞–≤—á–æ—Ä–∞':
                day = datetime.today().weekday() - 2
                if day < 0:
                    day += 7
                word_vars = (day, '–ø–æ–∑–∞–≤—á–æ—Ä–∞')
                day = True
                week = False
            elif mess[d].lower() == '–∑–∞–≤—Ç—Ä–∞':
                time.sleep(0.2)
                bot.send_message(m.chat.id, '–Ø, –ø–æ —Ç–≤–æ—î–º—É, —Å—Ö–æ–∂–∞ –Ω–∞ –í–∞–Ω–≥—É?')
                return
            elif mess[d].lower() == '–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞':
                time.sleep(0.2)
                bot.send_message(m.chat.id, '–ù—É —Ü–µ –≤–∂–µ –Ω–µ –ª—ñ–∑–µ –≤ –∂–æ–¥–Ω—ñ —Ä–∞–º–∫–∏. –©–æ —Ç–∏ —Ö–æ—á–µ—à –≤—ñ–¥ –º–µ–Ω–µ?')
                return
            else:
                try:
                    word_vars = weekdays[mess[d].lower()]
                    day = True
                    week = False
                except:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
                    return
        else:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return

        users = get_all_users()
        if am_n > len(users):
            am_n = len(users)
        elif am_n > 30:
            am_n = 30

        if week:
            msg_out = '–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n'
            all_msgs = 0
            all_words = 0
            akt = []
            for i in range(len(users)):
                akt.append([users[i][2], 0, 0, 0, users[i][5]])
                for j in users[i][11].split():
                    all_msgs += int(j)
                    akt[i][1] += int(j)
                for j in users[i][12].split():
                    all_words += int(j)
                    akt[i][2] += int(j)
        elif day:
            msg_out = f'–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∑–∞ {word_vars[1]}\n'
            all_msgs = 0
            all_words = 0
            akt = []
            for i in range(len(users)):
                akt.append([users[i][2], 0, 0, 0, users[i][5]])
                msg_list = users[i][11].split()
                word_list = users[i][12].split()
                all_msgs += int(msg_list[word_vars[0]])
                akt[i][1] = int(msg_list[word_vars[0]])
                all_words += int(word_list[word_vars[0]])
                akt[i][2] = int(word_list[word_vars[0]])
        else:
            msg_out = f'–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ\n'
            all_msgs = 0
            all_words = 0
            akt = []
            for i in range(len(users)):
                akt.append([users[i][2], 0, 0, 0, users[i][5]])
                all_msgs += int(users[i][7])
                akt[i][1] = int(users[i][7])
                all_words += int(users[i][8])
                akt[i][2] = int(users[i][8])

        for i in range(len(users)):
            akt[i][3] = ((akt[i][1] / all_msgs) + (akt[i][2] / all_words)) * 50
        for i in range(len(users)):
            for j in range(i, len(users)):
                if akt[i][3] < akt[j][3]:
                    akt[i], akt[j] = akt[j], akt[i]
        long = False
        for i in range(am_n):
            buf = str(round(akt[i][3], 2))
            if len(buf) == 5:
                long = True
            if long:
                prob = ' '
            else:
                prob = ''
            if len(buf) == 3:
                ins = f'{prob}{buf}0'
            elif len(buf) == 4:
                ins = f'{prob}{buf}'
            else:
                ins = buf
            msg_out += f'<code>{ins}% </code><a href="t.me/{akt[i][4]}">{html(akt[i][0])}</a>\n'

        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)

    if m.text.split()[0] == '!–ø—Ä–∞–≤–∞':
        if m.from_user.id != CREATOR:
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!')
            return
        id = int(mess[1])
        rights = ' '.join(mess[2:])
        user = get_user(id)
        if user is None:
            bot.send_message(m.chat.id, '—â–æ—Å—å –Ω–µ —Ç–∞–∫.')
            return
        user[6] = rights
        insert_user_a(user)
        bot.send_message(m.chat.id, '–ü—Ä–∞–≤–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
        return

    if m.text.split()[0] == '!–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞':
        if m.from_user.id != CREATOR:
            return
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è', callback_data='golos')
        keyboard.add(button)
        msg = ''
        bot.send_message(m.chat.id, msg, reply_markup=keyboard)

    if m.text.split()[0] == '!–ª–æ—Ç–µ—Ä–µ—è':
        user = get_user(m.from_user.id)
        if user is None:
            return

        if not int(user[6].split()[7]):
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return

        try:
            num = m.text.split()[1].split('-')
            num1 = int(num[0])
            num2 = int(num[1])
            if len(m.text.split()) > 2:
                num3 = int(m.text.split()[2])
                our_list = list(range(num1, num2 + 1))
                num_out = ''
                for i in range(num3):
                    el = random.choice(our_list)
                    our_list.remove(el)
                    num_out += f'{el}\n'
            else:
                num_out = random.randint(num1, num2)
            bot.send_message(m.chat.id, num_out)
        except Exception as e:
            bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç')
            return

        if m.text.split()[0] == '!–ø–æ–≤':
            if m.from_user.id != CREATOR:
                return
            id_t = int(m.text.split()[1])
            text = ' '.join(m.text.split()[2:])
            try:
                bot.send_message(id_t, text)
            except:
                pass
        if m.text.split()[0] == '!–ø–æ–≤—Ä':
            if m.from_user.id != CREATOR:
                return
            id_t = int(m.text.split()[1])
            rep_id = int(m.text.split()[2])
            text = ' '.join(m.text.split()[3:])
            try:
                bot.send_message(id_t, text, reply_to_message_id=rep_id)
            except:
                pass

    if m.text.split()[0] in ('!–Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏', '!—Å–ø–∏—Å–∞—Ç–∏'):
        user = get_user(m.from_user.id)
        if user is None:
            bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.')
        if not int(user[6].split()[7]):
            bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return

        if m.reply_to_message is None:
            if len(mess) < 3:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[2])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            acc_t = get_passport(mess[1])
            pp_bus = 0
            if acc_t is None:
                acc_t = get_business(mess[1])
                pp_bus = 1
                if acc_t is None:
                    bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                    return

            if len(mess) > 3:
                description = ' '.join(m.text.split()[3:])
            else:
                description = None
        else:
            if len(mess) < 2:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[1])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            try:
                acc_t = get_passport(m.reply_to_message.from_user.id)
                pp_bus = 2
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                return
            if len(mess) > 2:
                description = ' '.join(m.text.split()[2:])
            else:
                description = None

        if m.text.split()[0] == '!–Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏':
            line_1 = '–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤'
            line_2 = '–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è'
            line_3 = '–ù–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏'
            line_4 = '–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–ª–∏ –∫–æ—à—Ç–∏'
            plus = True
        else:
            line_1 = '–°–ø–∏—Å–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤'
            line_2 = '—Å–ø–∏—Å–∞–Ω–Ω—è'
            line_3 = '–ó –≤–∞—à–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —Å–ø–∏—Å–∞–ª–∏ –∫–æ—à—Ç–∏'
            line_4 = '–ó —Ä–∞—Ö—É–Ω–∫—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–ª–∏ –∫–æ—à—Ç–∏'
            plus = False

        if pp_bus == 0 or pp_bus == 2:
            if plus:
                acc_t[9] = acc_t[9] + amount_m
            else:
                acc_t[9] = acc_t[9] - amount_m
            namep = f'<a href="tg://user?id={acc_t[1]}">{acc_t[2]} {acc_t[3]}</a>'
            money_t = acc_t[9]
        else:
            if plus:
                acc_t[4] = int(acc_t[4]) + amount_m
            else:
                acc_t[4] = int(acc_t[4]) - amount_m
            namep = f'<a href="https://t.me/businesses_yachminiya/{acc_t[7]}">{acc_t[2]}</a>'
            money_t = acc_t[4]

        msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
        msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
        msg += f'{line_1}\n'
        msg += f'–†–∞—Ö—É–Ω–æ–∫: {namep} ({money_t})\n'
        msg += f'–°—É–º–∞ {line_2}: {amount_m} {glas(amount_m)}\n'
        if description is not None:
            msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {line_2}: {description}'

        bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
        # bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

        if pp_bus == 0:
            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg = f'{line_3}\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
            try:
                bot.send_message(acc_t[1], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass
        elif pp_bus == 1:
            # bot.edit_message_text(get_str_business(acc_t[1]), -1001162793975, acc_t[7], parse_mode='HTML')

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'{line_4}\n'
            msg += f'–†–∞—Ö—É–Ω–æ–∫: {namep} ({money_t})\n'
            msg += f'–°—É–º–∞ {line_2}: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {line_2}: {description}'
            try:
                bot.send_message(acc_t[3], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass

        if pp_bus == 0 or pp_bus == 2:
            insert_passport_a(acc_t)
        else:
            insert_business_a(acc_t)
        return

    if m.text.split()[0] == '!—Å–∞–Ω':
        new_san = ' '.join(mess[1:])
        sans = new_san.split(', ')
        user = get_user(m.from_user.id)
        user_s = get_user(m.reply_to_message.from_user.id)
        passport = get_passport(m.reply_to_message.from_user.id)

        if m.from_user.id != CREATOR:
            if sans[0] == '–ë–µ–∑—Ä–æ–±—ñ—Ç–Ω–∏–π' and int(user[6].split()[8]) == 1 and passport[8] == '–ë–µ–∑ —Å–∞–Ω—É':
                pass
            else:
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É')
                return
        if m.reply_to_message is None:
            bot.reply_to(m, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        try:
            sans_all = get_sans(sans)
        except Exception as e:
            bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∞–Ω\n{e}')
            return
        bill = 0
        us_rights = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        pass_rights = [0, 0, 0, 0, 0]
        for i in sans_all:
            bill += i[2]
            us_rights_buf = i[3].split()
            pass_rights_buf = i[4].split()
            for j in range(len(us_rights_buf)):
                us_rights[j] = str(int(us_rights_buf[j]) | int(us_rights[j]))
            for j in range(len(pass_rights_buf)):
                pass_rights[j] = str(int(pass_rights_buf[j]) | int(pass_rights[j]))

        passport[12] = ' '.join(pass_rights)
        user_s[6] = ' '.join(us_rights)
        old_san = passport[8]
        passport[8] = new_san
        passport[11] = bill
        # passport[9] = int(passport[9]) + int(int(bill)/2)
        bot.send_message(m.chat.id, '–°–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ')
        out = f'<a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a>\n{old_san} ‚üπ {new_san}'
        # bot.send_message(-1001268255961, out, parse_mode='HTML')
        insert_passport_a(passport)
        insert_user_a(user_s)
        return

    if m.text.split()[0] == '!–ø—ñ–Ω':
        if m.from_user.id != CREATOR:
            return
        chat_to_pin = m.text.split()[1]
        message_to_pin = m.text.split()[2]
        bot.pin_chat_message(chat_to_pin, message_to_pin)

    if m.text == "!–∑–∞–∫–æ–Ω":
        if f_queue(m):
            return
        bot.send_message(m.chat.id, '<a href="https://t.me/ZakonYach">–ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó</a>', parse_mode='HTML')

    '''if m.text == '!—Ä–æ–∑—Å–∏–ª–∫–∞':
        if m.from_user.id != CREATOR:
            return
        all_id = get_vote()
        all_passports = get_all_passports()
        passports_id = all_passports[1]
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è', callback_data='golos')
        keyboard.add(button)
        msg = ''
        for i in range(len(passports_id)):
            if passports_id[i] not in all_id:
                if all_passports[10][i] == '1':
                    try:
                        # bot.forward_message(int(passports_id[i]), -1001320320609, 192)
                        bot.send_message(int(passports_id[i]), mes, reply_markup=keyboard)
                        msg += f'<a href="tg://user?id={passports_id[i]}">–ø—ñ–¥–æ—Ä–∞—Å –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤\n</a>'
                    except:
                        msg += f'<a href="tg://user?id={passports_id[i]}">–ø—ñ–¥–æ—Ä–∞—Å –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω–∏–π\n</a>'
        bot.send_message(m.chat.id, msg, parse_mode='HTML')'''

    if m.text.split()[0] == '!—Ä–æ–∑—Å–∏–ª–∫–∞_–Ω':
        if m.from_user.id != CREATOR:
            return
        users = get_all_users()
        n = int(mess[1])
        if n == -1:
            bot.forward_message(CREATOR, -1001320320609, 189)
            return

        for i in range(n * 50, (n + 1) * 50):
            try:
                bot.forward_message(int(users[i][2]), -1001320320609, 189)
            except Exception as e:
                print(e)

    if m.text.split()[0] == '!—Ö—Ç–º–ª':
        if m.from_user.id != CREATOR:
            return
        bot.send_message(CREATOR, ' '.join(m.text.split()[1:]), parse_mode='HTML')

    # TODO –±–∞–Ω —ñ –º—É—Ç

    if m.text == '!–∂–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
        if m.chat.type == 'private':
            return
        chat = get_chat(m.chat.id)
        if chat[4] == 'NoneURL':
            return
        out = f'<a href="tg://user?id={m.from_user.id}">{html(name(m.from_user))}</a>\n<a href="{chat[4]}/{m.message_id}">{m.chat.title}</a>'
        # bot.send_message(-1001422128910, out, parse_mode='HTML')
        bot.send_message(m.chat.id, '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ')
        return

    if m.text == '!–∫–æ–º–∞–Ω–¥–∏':
        bot.send_message(m.chat.id,
                         f'<a href="https://telegra.ph/Spisok-komand-Sistemi-YAchm%D1%96n%D1%96ya-02-01">–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –°–∏—Å—Ç–µ–º–∏</a>',
                         parse_mode='HTML', disable_web_page_preview=True)

    if m.text.split()[0] == '!—Ç–µ–≥':
        try:
            id = mess[1]
            text = mess[2:]
            bot.send_message(m.chat.id, f'<a href="tg://user?id={id}">{" ".join(text)}</a>', parse_mode='HTML')
        except:
            pass

    if mess[0] == '!–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ':
        if len(m.text.split()) < 2:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return
        pidp_id = ' '.join(mess[1:])

        business_out = get_str_business(pidp_id)

        bot.send_message(m.chat.id, business_out, parse_mode='HTML')
        return

    if m.text.split()[0] == '!—Ä—ñ–¥':

        if len(m.text.split()) < 2:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return
        rid_id = ' '.join(m.text.split()[1:])

        rid_out = get_str_rid(rid_id)
        bot.send_message(m.chat.id, rid_out, parse_mode='HTML', disable_web_page_preview=True)
        if m.chat.id == -1001329014820:
            bot.send_message(m.chat.id, time.time() - tt)
        return

    if m.chat.id == -1001486037908:
        mess = m.text.split()
        if {'–§–æ—Ä–º–∞', '–¥–ª—è', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è', '–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞', "–Ü–º'—è:", '–ü—Ä—ñ–∑–≤–∏—â–µ:', '–°—Ç–∞—Ç—å:'}.issubset(set(mess)):
            try:
                name_i = mess.index("–Ü–º'—è:")
                surname_i = mess.index("–ü—Ä—ñ–∑–≤–∏—â–µ:")
                sex_i = mess.index("–°—Ç–∞—Ç—å:")
                namep = ' '.join(mess[name_i + 1:surname_i])
                surname = ' '.join(mess[surname_i + 1:sex_i])
                full_name = namep + surname
                sex = str(mess[sex_i + 1])
                if len(namep) > 25:
                    bot.send_message(m.chat.id, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª—ñ–≤")
                    return
                elif len(surname) > 25:
                    bot.send_message(m.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª—ñ–≤")
                    return
                if len(namep) == 0:
                    bot.send_message(m.chat.id, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º")
                    return
                elif len(surname) == 0:
                    bot.send_message(m.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º")
                    return
                elif len(full_name) > 40:
                    bot.send_message(m.chat.id, "–°—É–º–∞ –¥–æ–≤–∂–∏–Ω –ø—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ —ñ–º–µ–Ω—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∞ –∑–∞ 40 —Å–∏–º–≤–æ–ª—ñ–≤")
                    return
                for i in full_name:
                    if i not in alphabet:
                        bot.send_message(m.chat.id,
                                         """–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–∏—Ä–∏–ª–∏—á–Ω—ñ –±—É–∫–≤–∏, –¥–µ—Ñ—ñ—Å —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ.""")
                        return
                if sex.lower() != '—á–æ–ª–æ–≤—ñ—á–∞' and sex.lower() != '–∂—ñ–Ω–æ—á–∞':
                    bot.send_message(m.chat.id, '–°—Ç–∞—Ç—å –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —á–æ–ª–æ–≤—ñ—á–∞ –∞–±–æ –∂—ñ–Ω–æ—á–∞')
                    return

                passport_out = f'<b>–®–∞–±–ª–æ–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞</b>\n'
                passport_out += f'<i>–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó</i>\n\n'
                passport_out += f'''<b>–Ü–º'—è:</b> <i><a href="tg://user?id={m.from_user.id}">{namep} {surname}</a></i>\n'''
                passport_out += f"<b>–°–∞–Ω:</b> <i>–ë–µ–∑ —Å–∞–Ω—É</i>\n"
                passport_out += f"<b>–°—Ç–∞—Ç—å:</b> <i>{sex}</i>\n"
                passport_out += f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>–ë–µ–∑ —Å—Ç–∞—Ç—É—Å—É</i>\n"
                passport_out += f"\n<i>–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ:</i>"
                passport_out += f"\n<i>0000-00-00 00:00:00</i>"
                bot.reply_to(m, passport_out, parse_mode='HTML')
            except:
                bot.reply_to(m,
                             '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')

        if m.text == '!—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è':
            ms = m.reply_to_message
            passport = get_passport(ms.from_user.id)
            if passport is not None:
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a> –≤–∂–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó!',
                                 parse_mode='HTML')
                return
            mess = ms.text.split()
            try:
                name_i = mess.index("–Ü–º'—è:")
                surname_i = mess.index("–ü—Ä—ñ–∑–≤–∏—â–µ:")
                sex_i = mess.index("–°—Ç–∞—Ç—å:")
                namep = ' '.join(mess[name_i + 1:surname_i])
                surname = ' '.join(mess[surname_i + 1:sex_i])
                sex = str(mess[sex_i + 1])
                if sex == '–ß–æ–ª–æ–≤—ñ—á–∞' or sex == '—á–æ–ª–æ–≤—ñ—á–∞':
                    sex = '–ß–æ–ª–æ–≤—ñ—á–∞'
                elif sex == '–ñ—ñ–Ω–æ—á–∞' or sex == '–∂—ñ–Ω–æ—á–∞':
                    sex = '–ñ—ñ–Ω–æ—á–∞'
                else:
                    return
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                return

            new_passport(ms.from_user, namep, surname, sex)
            passport = get_str_passport(ms.from_user.id)
            bot.send_message(m.chat.id, passport, parse_mode='HTML')
            keyboard = types.InlineKeyboardMarkup()
            but = types.InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∏–π –ß–∞—Ç –Ø—á–º—ñ–Ω—ñ—ó", url='t.me/Yachminiya')
            keyboard.add(but)
            bot.send_message(m.chat.id,
                             f'–¢–∏ –æ—Ç—Ä–∏–º–∞–≤(–ª–∞) –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ —ñ–∑ —Å—Ç–∞—Ç—É—Å–æ–º "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π". –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ "–ü–æ–≤–Ω–∏–π" —Å—Ç–∞—Ç—É—Å, –≤–∏–∫–æ–Ω–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —É–º–æ–≤–∏ —ñ–∑ <a href="https://telegra.ph/Zakon-pro-gromadyanstvo-01-24">–ó–∞–∫–æ–Ω—É –ø—Ä–æ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ</a>, —Ç–∞ –∑–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏ –≤ –ì—Ä–∞—Ñ—Å—Ç–≤–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –ø—Ä–æ—Ö–∞–Ω–Ω—è–º.\n\n–©–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –Ω–∞–¥—Å–∏–ª–∞–π –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∫–æ–º–∞–Ω–¥—É !–∞. –î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–∞—Å–ø–æ—Ä—Ç - !–ø.\n',
                             disable_web_page_preview=True, parse_mode='HTML', reply_markup=keyboard,
                             reply_to_message_id=ms.message_id)
            return

        if m.text == '!–≤—ñ–¥–º–æ–≤–∞_–≤—ñ–¥_–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞':
            passport = get_passport(m.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å –≤—ñ–¥ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞', callback_data='vidmova')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞',
                                                callback_data='stop_vidmova')
            keyboard.add(button)
            bot.send_message(m.chat.id,
                             text=f'<a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a>, –í–∏ —Å–ø—Ä–∞–≤–¥—ñ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç–µ—Å—å –≤—ñ–¥ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó? –í–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ –≤—Å—ñ —Å–≤–æ—ó —Å—Ç–∞—Ç–∫–∏. –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.',
                             reply_markup=keyboard, parse_mode='HTML')

        if m.text == '!–≤–∏–ª—É—á–∏—Ç–∏_–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ':
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                return
            graf = get_passport(m.from_user.id)
            if graf is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            graf = get_user(m.from_user.id)
            if graf is None:
                non_reg(m.from_user, m)
                return
            if not int(graf[6].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return
            passport = get_passport(m.reply_to_message.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return

            all_passports = get_all_passports()
            del (all_passports[passport[0] - 1])
            for i in range(len(all_passports)):
                all_passports[i][0] = i + 1
            del_table_passports()
            db.insert(table_passports)
            insert_all_passports_l(all_passports)
            amount = get_amount_of_passports()
            bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –≤—Ç—Ä–∞—á–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó!')
            del_passport_g(all_passports, amount)
            # TODO —Ä—ñ–¥ —Ç–∞ –±—ñ–∑–Ω–µ—Å

        if mess[0] == '!—Å—Ç–∞—Ç—É—Å':
            if len(mess) < 2:
                return
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!')
                return
            graf = get_passport(m.from_user.id)
            if graf is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            graf = get_user(m.from_user.id)
            if graf is None:
                non_reg(m.from_user, m)
                return
            if not int(graf[6].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return
            if mess[1] not in ('–ü–æ–≤–Ω–∏–π', '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π'):
                bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞!')
                return
            passport = get_passport(m.reply_to_message.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            user = get_user(m.reply_to_message.from_user.id)

            if (mess[1] == '–ü–æ–≤–Ω–∏–π') and (
                    time.time() - datetime.strptime(passport[7], '%Y-%m-%d %H:%M:%S').timestamp() < 259200 or user[
                7] < 300):
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='up_status')
                keyboard.add(button)
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a> –Ω–µ –≤–∏–∫–æ–Ω–∞–≤ —É—Å—ñ –ø—ñ–¥—Å—Ç–∞–≤–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –°—Ç–∞—Ä—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞ –∞–±–æ –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞.',
                                 parse_mode='HTML', reply_markup=keyboard)
                return

            passport[10] = mess[1]
            bot.send_message(m.chat.id,
                             f'–°—Ç–∞—Ç—É—Å –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ <a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a> –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {passport[10]}!',
                             parse_mode='HTML')
            insert_passport_a(passport)

        if m.text == '!—Ñ–æ—Ä–º–∏':
            out = '–§–æ—Ä–º–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚Äì <code>!–ø–∞—Å–ø–æ—Ä—Ç</code>\n–§–æ—Ä–º–∞ –¥–ª—è –ø–∞—Ä—Ç—ñ—ó ‚Äì  <code>!–ø–∞—Ä—Ç—ñ—è</code>'
            bot.send_message(m.chat.id, out, parse_mode='HTML')
            return

        if m.text == '!–ø–∞—Ä—Ç—ñ—è':
            out = '<code>–ü–∞—Ä—Ç—ñ—è –Ø—á–º—ñ–Ω—ñ—ó\n"–ù–∞–∑–≤–∞ –ø–∞—Ä—Ç—ñ—ó"\n\n–ö–µ—Ä—ñ–≤–Ω–∏–∫ ‚Äî @\n\n1. @\n2. @\n3. @\n4. @\n</code>'
            bot.send_message(m.chat.id, out, parse_mode='HTML')
            return

        if m.text == '!–ø–∞—Å–ø–æ—Ä—Ç':
            bot.send_message(m.chat.id, pass_form, parse_mode='HTML')

    if m.chat.id == -1001262104547 or m.chat.id == -1001457025006:
        if mess[0] == '!–≤—ñ–¥–º–æ–≤–∞' and m.reply_to_message is not None:
            passport = get_passport(m.from_user.id)
            if passport is None:
                return
            try:
                bot.send_message(m.reply_to_message.entities[0].user.id,
                                 f'–í–∞–º –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ —É –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—ñ –ø–æ–∑–æ–≤—É\n–ü—Ä–∏—á–∏–Ω–∞:\n{" ".join(m.text.split()[1:])}\n–í–∞–º –≤—ñ–¥–º–æ–≤–∏–≤ –°—É–¥–¥—è <a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}</a>',
                                 parse_mode='HTML')
                bot.send_message(m.chat.id, '–í—ñ–¥–º–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')
            except Exception as e:
                bot.send_message(m.chat.id, f'—â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{e}')
            return

        if m.text.split()[0] == '!–≤—ñ–¥–ø–æ–≤—ñ–¥—å':
            if m.reply_to_message is None:
                return
            try:
                bot.send_message(m.reply_to_message.entities[0].user.id, m.text.split()[1:], parse_mode='HTML')
                bot.send_message(m.chat.id, '–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')
            except Exception as e:
                bot.send_message(m.chat.id, f'—â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{e}')
            return

    if m.chat.id == -1001157589989:
        if m.text == '!–ø–æ—á–∞—Ç–æ–∫_–∑–∞—Å—ñ–¥–∞–Ω–Ω—è':
            rech = get_passport(m.from_user.id)
            if rech is None:
                return
            if not int(rech[12].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return

            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text="–ü—Ä–∏—Å—É—Ç–Ω—ñ–π", callback_data="kvorum")
            keyboard.add(callback_button)

            bot.send_message(m.chat.id, f'–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–≤–æ—Ä—É–º—É\n\n–ü—Ä–∏—Å—É—Ç–Ω—ñ:', reply_markup=keyboard)


def main():
    try:
        bot.polling()
    except Exception:
        t = StringIO()
        print_exc(file=t)
        t = html(t.getvalue())
        link = 'telegra.ph/file/84f9fe5ef05fa6c9edf80.png'
        out = f'<a href="{link}">{chr(8205)}</a>@yachminiya_test_bot:\n{t}'
        bot.send_message(419596848, out, parse_mode='HTML')
        main()


if __name__ == '__main__':
    main()
