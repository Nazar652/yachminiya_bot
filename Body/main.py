# -*- coding: utf8 -*-

import telebot
from telebot import types
from traceback import print_exc
from io import StringIO
import random
from database import *
from tables import *
from variables import *
import re
from operator import itemgetter
# from pprint import pprint

bot = telebot.TeleBot(Token) # , threaded=False
BOT_USER = 1875045403


def f_queue(m):
    """–∞–Ω—Ç–∏—Å–ø–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    global queue, t_queue
    if m.from_user.id in queue:
        if t_queue > time.time():
            try:
                bot.send_message(m.chat.id, f'–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ!')
            except:
                pass
            queue.append(m.from_user.id)
            del (queue[0])
            t_queue = time.time() + 0.2
            return True
        else:
            queue.append(m.from_user.id)
            del (queue[0])
            t_queue = time.time() + 0.2
    else:
        queue.append(m.from_user.id)
        del (queue[0])
        t_queue = time.time() + 0.2
    return False


def extract_unique_code(text):
    return text.split()[1] if len(text.split()) > 1 else ''


def f_queue_call(call):
    '''–∞–Ω—Ç–∏—Å–ø–∞–º –∫–Ω–æ–ø–∫–∏'''
    global queue_call, t_queue_call
    if call.from_user.id in queue_call:
        if t_queue_call > time.time():
            bot.answer_callback_query(callback_query_id=call.id, text='–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ.', show_alert=True)
            queue_call.append(call.from_user.id)
            del (queue_call[0])
            t_queue_call = time.time() + 0.1
            return True
        else:
            queue_call.append(call.from_user.id)
            del (queue_call[0])
            t_queue_call = time.time() + 0.1
    else:
        queue_call.append(call.from_user.id)
        del (queue_call[0])
        t_queue_call = time.time() + 0.1
    return False


def main_menu(m, lab):
    """–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="üí¨ –û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç –Ø—á–º—ñ–Ω—ñ—ó",
                                            url='https://t.me/Yachminiya')
    keyboard.add(url_button)
    callback_button = types.InlineKeyboardButton(text="üó∫ –ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó", callback_data="prostir")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", callback_data="golos")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚öñÔ∏è C—É–¥", callback_data="sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üí° –ü–æ–¥–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é", callback_data="petition")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üì±–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é", callback_data="menus")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="all_info")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text='–í–∞—Å –≤—ñ—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏ "–Ø—á–º—ñ–Ω—ñ—è".\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –°–∏—Å—Ç–µ–º–∏.',
                              reply_markup=keyboard)
    else:
        try:
            bot.send_message(m.chat.id,
                             '–í–∞—Å –≤—ñ—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏ "–Ø—á–º—ñ–Ω—ñ—è".\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –°–∏—Å—Ç–µ–º–∏.',
                             reply_markup=keyboard)
            bot.edit_message_reply_markup(m.chat.id, m.message_id, reply_markup=None)
        except:
            pass


def timeout(u, m):
    bot.send_message(m.chat.id, get_str_passport(u.id), parse_mode='HTML')


def zhan_hour(zh_id):
    if zhan_queue[zh_id] > 0:
        zhan_queue[zh_id] -= 1


def del_doc(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except:
        pass


def glas(am):
    last_nums = int(am) % 100
    last_num = int(am) % 10
    if 10 < last_nums < 20:
        glas = '—è—á–æ–∫'
    elif int(last_num) % 10 in (2, 3, 4):
        glas = '—è—á–∫–∏'
    elif int(last_num) % 10 in (5, 6, 7, 8, 9, 0):
        glas = '—è—á–æ–∫'
    else:
        glas = '—è—á–∫–∞'
    return glas


def aktyv_r():
    '''–∞–∫—Ç–∏–≤'''
    global aktyv, lakt
    passports = get_all_passports()
    if false_day:
        day = false_day
    else:
        day = datetime.today().day
    month = datetime.today().month
    day_db = get_all_meta()[0][0]
    min_day = 0
    if day_db == day:
        day_is = True
    else:
        day_is = False
        insert_day_meta(day)
        if day < day_db:
            min_day = 31 - months[month_num[month - 2]][1]
    for i in passports:
        msgs = i[23].split()
        words = i[24].split()
        try:
            if day_is:
                msgs[day - 1] = str(int(msgs[day - 1]) + aktyv[i[1]][0])
                i[23] = ' '.join(msgs)
                words[day - 1] = str(int(words[day - 1]) + aktyv[i[1]][1])
                i[24] = ' '.join(words)
            else:
                if min_day:
                    for j in range(30, 30 - min_day, -1):
                        msgs[j] = '0'
                        words[j] = '0'
                msgs[day - 1] = str(aktyv[i[1]][0])
                i[23] = ' '.join(msgs)
                words[day - 1] = str(aktyv[i[1]][1])
                i[24] = ' '.join(words)
        except Exception as e:
            if not day_is:
                if min_day:
                    for j in range(30, 30 - min_day, -1):
                        msgs[j] = '0'
                        words[j] = '0'
                msgs[day - 1] = '0'
                i[23] = ' '.join(msgs)
                words[day - 1] = '0'
                i[24] = ' '.join(words)
        insert_passport_l(i)
    insert_all_passports_g(passports)
    lakt = 0
    aktyv = {}


def commission(x, mnozh):
    x = int(x)
    if x <= 8:
        n = (2 / x)
    elif x <= 16:
        n = (4 / (x + 8))
    elif x <= 32:
        n = (8 / (x + 32))
    elif x <= 64:
        n = (16 / (x + 96))
    elif x <= 128:
        n = (32 / (x + 256))
    elif x <= 256:
        n = (64 / (x + 640))
    elif x <= 512:
        n = (128 / (x + 1536))
    elif x <= 1024:
        n = (256 / (x + 3584))
    elif x <= 2048:
        n = (512 / (x + 8192))
    else:
        n = (1024 / (x + 18432))
    n *= mnozh
    n *= 0.5
    return round(x * n)


def user_link(id, *text):
    return f'<a href="tg://user?id={id}">{" ".join(text)}</a>'


def prostir_f(m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text=f"üóØ –ß–∞—Ç–∏ –Ø—á–º—ñ–Ω—ñ—ó", callback_data=f"chats")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"üì∫ –ö–∞–Ω–∞–ª–∏ –Ø—á–º—ñ–Ω—ñ—ó", callback_data=f"channels")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–º –Ø—á–º—ñ–Ω—ñ—ó", callback_data="prostir_menu")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text='–ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó ‚Äî –≤—Å—ñ —á–∞—Ç–∏ —Ç–∞ –∫–∞–Ω–∞–ª–∏ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫—ñ –¥–æ—Ç—Ä–∏–º—É—é—Ç—å—Å—è '
                                   '–ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.',
                              reply_markup=keyboard)
    else:
        bot.send_message(chat_id=m.chat.id,
                         text='–ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó ‚Äî –≤—Å—ñ —á–∞—Ç–∏ —Ç–∞ –∫–∞–Ω–∞–ª–∏ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫—ñ –¥–æ—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.',
                         reply_markup=keyboard)


def sud_f(m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π —Å—É–¥", callback_data="krime_sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ê–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å—É–¥", callback_data="apel_sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text='–û–±–µ—Ä—ñ—Ç—å —Å—É–¥, –≤ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤',
                              reply_markup=keyboard)
    else:
        bot.send_message(chat_id=m.chat.id,
                         text='–û–±–µ—Ä—ñ—Ç—å —Å—É–¥, –≤ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤',
                         reply_markup=keyboard)


def all_info_f(m, u, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text=f"üìí –ü–æ—Å—ñ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–ø—Ä–∏–±—É–ª–∏—Ö",
                                            url='https://telegra.ph/YAchm%D1%96nnij-'
                                                'Pos%D1%96bnik-dlya-novopribulih-01-28')
    keyboard.add(url_button)
    url_button = types.InlineKeyboardButton(text=f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –°–∏—Å—Ç–µ–º–∏",
                                            url='https://telegra.ph/Spisok-komand-Sistemi-YAchm%D1%96n%D1%96ya-02-01')
    keyboard.add(url_button)
    passport = get_passport(u.id)
    if passport:
        callback_button = types.InlineKeyboardButton(text=f"üìñ –ü–∞—Å–ø–æ—Ä—Ç", callback_data=f"pass_pp")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"üí∞ –†–∞—Ö—É–Ω–æ–∫", callback_data=f"acc_pp")
        keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data=f"aktyv_pp")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text(text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –í–∞—Å —É –°–∏—Å—Ç–µ–º—ñ', message_id=m.message_id,
                              chat_id=m.chat.id, reply_markup=keyboard)
    else:
        bot.send_message(text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –í–∞—Å —É –°–∏—Å—Ç–µ–º—ñ',
                         chat_id=m.chat.id, reply_markup=keyboard)


def menus_f(m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üí∞–ú–µ–Ω—é –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è", callback_data="business")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üë•–ú–µ–Ω—é —Ä–æ–¥—É", callback_data="rid")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é –¥–µ—Ä–∂—Å–ª—É–∂–±–æ–≤—Ü—è", callback_data="state_menu")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é –ø—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó", callback_data="prostir_menu")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.add(callback_button)
    if lab:
        bot.edit_message_text('–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏', chat_id=m.chat.id,
                              message_id=m.message_id, reply_markup=keyboard)
    else:
        bot.send_message(text='–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏', chat_id=m.chat.id, reply_markup=keyboard)


def rid_f(u, m, lab=True):
    passport = get_passport(u.id)
    if passport is None:
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id, text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
        return

    if passport[13] != '–°–∞–º—ñ—Ç–Ω–∏–∫':
        rid = get_rid(passport[13])
        if int(rid[2]) == u.id:
            head = True
        else:
            head = False
        keyboard = types.InlineKeyboardMarkup()
        if head:
            word = '–≥–æ–ª–æ–≤–æ—é'
            callback_button = types.InlineKeyboardButton(text=f"üÜï–ü—Ä–∏–π–Ω—è—Ç–∏ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ —Ä–æ–¥—É",
                                                         callback_data=f"new_rid_member")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"üë•–ß–ª–µ–Ω–∏ —Ä–æ–¥—É",
                                                         callback_data=f"rid_members")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚úçÔ∏è–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ä—ñ–¥",
                                                         callback_data=f"edit_rid")
            keyboard.add(callback_button)
        else:
            word = '—á–ª–µ–Ω–æ–º'
            callback_button = types.InlineKeyboardButton(text=f"üÜï–í–∏–π—Ç–∏ –∑ —Ä–æ–¥—É",
                                                         callback_data=f"exit_rid")
            keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–í–∏ —î {word} —Ä–æ–¥—É {rid[1]}',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–í–∏ —î {word} —Ä–æ–¥—É {rid[1]}',
                             reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"üÜï–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—ñ–¥", callback_data=f"new_rid")
        keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–í–∏ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç–µ –∂–æ–¥–Ω–æ–º—É –∑ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ–¥—ñ–≤, –ø—Ä–æ—Ç–µ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–¥',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–í–∏ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç–µ –∂–æ–¥–Ω–æ–º—É –∑ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ–¥—ñ–≤, –ø—Ä–æ—Ç–µ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–¥',
                             reply_markup=keyboard)


def business_f(business, m, lab=True):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='‚úçÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞', callback_data='edit_business')
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üë•–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏', callback_data='praciv')
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üíµ–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏',
                                        callback_data='finances')
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='‚ùå–ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ',
                                        callback_data='del_business')
    keyboard.add(button)
    keyboard = menu_footer(keyboard, 'business')
    if lab:
        bot.edit_message_text(text=f'<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>',
                              message_id=m.message_id, chat_id=m.chat.id, reply_markup=keyboard,
                              parse_mode="HTML", disable_web_page_preview=True)
    else:
        bot.send_message(text=f'<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>',
                         chat_id=m.chat.id, reply_markup=keyboard,
                         parse_mode="HTML", disable_web_page_preview=True)


def state_menu_f(u, m, lab=True):
    passport = get_passport(u.id)
    if passport is None:
        keyboard = menu_footer(types.InlineKeyboardMarkup(), 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
        return
    keyboard = types.InlineKeyboardMarkup()
    if passport[8] == '–ë–µ–∑ —Å–∞–Ω—É':
        button = types.InlineKeyboardButton(text='–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ì–æ–ª–æ–≤–∏ –§–¢–Ø', callback_data='fond_trud')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —Å–∞–Ω—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ì–æ–ª–æ–≤–∏ –§–æ–Ω–¥—É –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ—é –Ø—á–º—ñ–Ω—ñ—ó –∑–∞ '
                                       f'–¥–æ–ø–æ–º–æ–≥–æ—é.',
                                  reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —Å–∞–Ω—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ì–æ–ª–æ–≤–∏ –§–æ–Ω–¥—É –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ—é –Ø—á–º—ñ–Ω—ñ—ó –∑–∞ '
                                  f'–¥–æ–ø–æ–º–æ–≥–æ—é.',
                             reply_markup=keyboard)
        return
    sans = passport[8].split(', ')
    for i in sans:
        button = types.InlineKeyboardButton(text=i, callback_data=i)
        keyboard.add(button)
    keyboard = menu_footer(keyboard, 'menus')
    if lab:
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text=f'–ú–µ–Ω—é –¥–µ—Ä–∂—Å–ª—É–∂–±–æ–≤—Ü—è. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –¥—ñ—ó, —è–∫—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–Ω—É.',
                              reply_markup=keyboard)
    else:
        bot.send_message(chat_id=m.chat.id,
                         text=f'–ú–µ–Ω—é –¥–µ—Ä–∂—Å–ª—É–∂–±–æ–≤—Ü—è. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –¥—ñ—ó, —è–∫—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–Ω—É.',
                         reply_markup=keyboard)
    return


def prostir_menu_f(u, m, lab=True):
    passport = get_passport(u.id)
    if passport is None:
        keyboard = menu_footer(types.InlineKeyboardMarkup(), 'menus')
        if lab:
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
        else:
            bot.send_message(chat_id=m.chat.id,
                             text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
        return
    keyboard = types.InlineKeyboardMarkup()
    button0 = types.InlineKeyboardButton(text='–û—Å–æ–±–∏—Å—Ç—ñ —á–∞—Ç–∏', callback_data='private_chats_0')
    button1 = types.InlineKeyboardButton(text='–û—Å–æ–±–∏—Å—Ç—ñ –∫–∞–Ω–∞–ª–∏', callback_data='private_channels_0')
    button2 = types.InlineKeyboardButton(text='üó∫ –î–æ –ø—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó',
                                         callback_data='prostir')
    button3 = types.InlineKeyboardButton(text='üì± –î–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–µ–Ω—é',
                                         callback_data='menus')
    callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
    keyboard.keyboard = [[button0], [button1], [button2, button3], [callback_button]]
    text = f'–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏–º–∏ —á–∞—Ç–∞–º–∏ —Ç–∞ –∫–∞–Ω–∞–ª–∞–º–∏.'
    if lab:
        bot.edit_message_text(text=text,
                              message_id=m.message_id, chat_id=m.chat.id, reply_markup=keyboard,
                              parse_mode="HTML", disable_web_page_preview=True)
    else:
        bot.send_message(text=text,
                         chat_id=m.chat.id, reply_markup=keyboard,
                         parse_mode="HTML", disable_web_page_preview=True)


def simplify(text):
    return re.sub(r'<(/|).*?>', '', text)


def menu_footer(keyboard, call_data, back='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'):
    but0 = types.InlineKeyboardButton(text=back, callback_data=call_data)
    but1 = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –º–µ–Ω—é", callback_data=f"menul")
    """keyboard.add(but0)
    keyboard.add(but1)"""
    keyboard.keyboard.append([but0, but1])
    return keyboard


def register_next_step_handler(m, function, *args, **kwargs):
    args = tuple([function] + list(args))
    bot.register_next_step_handler(m, reg_next, *args, **kwargs)


def reg_next(m, function, is_media=False):
    if not is_media and not m.text:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –º–µ–Ω—é", callback_data=f"menul"))
        bot.send_message(m.chat.id, '–û—Ç—Ä–∏–º–∞–Ω–æ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ '
                                    '–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=keyboard)
    else:
        function(m)


def get_str_passport(id):
    passport = get_passport(id)
    if passport is None:
        try:
            user = get_user(id)
            if user is None:
                u = bot.get_chat(id)
                return f'{name(u)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
            else:
                return f'{user[4]} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
        except:
            return f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ –æ—Å–æ–±–∏.'
    if passport[10] == '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω':
        stat = '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞'
        san = f'<b>–°–∞–Ω:</b> <i>{passport[8]}</i>\n'
    else:
        stat = '–†–µ–∑–∏–¥–µ–Ω—Ç–∞'
        san = ''
    passport_out = f'<a href="passport.{id}">{chr(8205)}</a><b>–ü–∞—Å–ø–æ—Ä—Ç</b>\n'
    passport_out += f'<i>{stat} –Ø—á–º—ñ–Ω—ñ—ó</i>\n\n'
    passport_out += f'''<b>–Ü–º'—è:</b> <i>{user_link(passport[1], passport[2], passport[3])}</i>\n'''
    passport_out += f"{san}"
    passport_out += f"<b>–°—Ç–∞—Ç—å:</b> <i>{passport[6]}</i>\n"
    passport_out += f"<b>–†—ñ–¥:</b> <i>{passport[13]}</i>\n"
    passport_out += f"\n<i>–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ:</i>"
    passport_out += f"\n<i>{passport[7]}</i>"
    return passport_out


def get_business(id):
    business = get_business_id(id)
    if business is None:
        business = get_business_name(id)
    return business


def get_str_business(id):
    """–ø–æ–≤–µ—Ä—Ç–∞—î –±—ñ–∑–Ω–µ—Å —É –≤–∏–≥–ª—è–¥—ñ str"""
    business = get_business(id)
    if business is None:
        return f'–í–∫–∞–∑–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞'
    passport = get_passport(business[3])
    business_out = f'<b>–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ</b>\n'
    business_out += f'''<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>\n\n'''
    business_out += f'<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i>{user_link(passport[1], passport[2], passport[3])}</i>\n'
    business_out += f"<b>–¢–µ–≥:</b> <code>{business[1]}</code>\n"
    business_out += f'<b>–ê–∫—Ç–∏–≤–∏</b>: <i>{business[4]} {glas(business[4])}</i>\n'
    return business_out


def get_str_rid(id):
    """–ø–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–¥ —É –≤–∏–≥–ª—è–¥—ñ str"""
    rid = get_rid(id)
    if rid is None:
        return f'–†—ñ–¥ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ —ñ—Å–Ω—É—î.'
    all_id = list(map(lambda x: int(x), rid[3].split()[2:]))
    passport = get_passport(rid[2])
    all_id.append(passport[1])
    businesses = get_business_owner(all_id)
    del (all_id[-1])
    rid_out = f'<b>–†—ñ–¥</b>\n'
    rid_out += f'''<a href="https://t.me/FamilyRegistry/{rid[5]}">{rid[1]}</a>\n\n'''
    rid_out += f'–ì–æ–ª–æ–≤–∞:\n<b><a href="t.me/{passport[5]}">{passport[2]} {passport[3]}</a></b>\n'
    money = 0
    akt = 0
    if len(all_id) > 0:
        rid_out += f'\n–ß–ª–µ–Ω–∏:\n'
    for i in all_id:
        passport = get_passport(i)
        money += passport[9]
        rid_out += f'<a href="t.me/{passport[5]}">{passport[2]} {passport[3]}</a>\n'
    for i in businesses:
        akt += i[4]

    rid_out += f'\n–°—Ç–∞—Ç–∫–∏: {money} {glas(money)}\n'
    rid_out += f'–ê–∫—Ç–∏–≤–∏: {akt} {glas(akt)}\n'
    return rid_out


def get_str_institution(name):
    """–ø–æ–≤–µ—Ä—Ç–∞—î —É—Å—Ç–∞–Ω–æ–≤—É —É –≤–∏–≥–ª—è–¥—ñ str"""
    inst = get_institution(name)
    if inst is None:
        return f'–í–∫–∞–∑–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–∏'
    get_employers = get_inst_func(inst[1])[0]
    emps = get_employers()
    passport = get_passport(inst[6])
    business_out = f'<b>–£—Å—Ç–∞–Ω–æ–≤–∞</b>\n'
    business_out += f'''<a href="https://t.me/institutions_yachminiya/{inst[8]}">{inst[1]}</a>\n\n'''
    business_out += f'<b>–ì–æ–ª–æ–≤–∞:</b> <i>{user_link(passport[1], passport[2], passport[3])}</i>\n'
    business_out += f'<b>–ê–∫—Ç–∏–≤–∏</b>: <i>{inst[3]} {glas(inst[3])}</i>\n\n'
    if emps:
        business_out += '–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏:\n'
        for i in emps:
            passport = get_passport(i[1])
            business_out += f'<a href="t.me/{passport[5]}">{passport[2]} {passport[3]}</a>\n'
    return business_out


def get_str_aktives(id):
    passport = get_passport(id)
    if passport is None:
        try:
            user = get_user(id)
            if user is None:
                u = bot.get_chat(id)
                return f'{name(u)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
            else:
                return f'{user[4]} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
        except:
            return f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ –æ—Å–æ–±–∏.'
    businesses = get_business_owner((passport[1],))
    summa = 0
    aktives_out = f'<b>–ê–∫—Ç–∏–≤–∏</b>\n'
    aktives_out += f'''{user_link(passport[1], passport[2], passport[3])}\n\n'''
    for i in businesses:
        aktives_out += f'<a href="https://t.me/businesses_yachminiya/{i[7]}">{i[2]}</a> ‚Äî {i[4]} {glas(i[4])}\n'
        summa += i[4]
    aktives_out += f"\n–ó–∞–≥–∞–ª–æ–º: {summa} {glas(summa)}"
    return aktives_out


def update_channel_rid(rid_name):
    if rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫':
        return
    rid = get_rid(rid_name)
    rid_out = get_str_rid(rid[1])
    bot.edit_message_text(chat_id=-1001424413839, text=rid_out, message_id=rid[5], parse_mode='HTML',
                          disable_web_page_preview=True)


def update_channel_business(business_name):
    business = get_business(business_name)
    business_out = get_str_business(business[1])
    bot.edit_message_text(chat_id=-1001162793975, text=business_out, message_id=business[5], parse_mode='HTML',
                          disable_web_page_preview=True)


def update_channel_institution(inst_name):
    inst = get_institution(inst_name)
    inst_out = get_str_institution(inst[1])
    bot.edit_message_text(chat_id=-1001581103239, text=inst_out, message_id=inst[8], parse_mode='HTML',
                          disable_web_page_preview=True)


def get_seans_business(id, m):
    def except_bus(m):
        keyboard = menu_footer(types.InlineKeyboardMarkup(), 'business', "‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤")
        bot.edit_message_text(
            '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É —Å–µ—Å—ñ—ó –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –©–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑–∞–π–¥—ñ—Ç—å —É –º–µ–Ω—é –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —ñ –æ–±–µ—Ä—ñ—Ç—å '
            '—Ü–µ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ.',
            message_id=m.message_id, chat_id=m.chat.id, reply_markup=keyboard)

    try:
        id = business_seans[id]
    except:
        except_bus(m)
        return None
    business = get_business(id)
    if business is None:
        except_bus(m)
        return None
    return business


def get_str_acc(id):
    """–ø–æ–≤–µ—Ä—Ç–∞—î —Ä–∞—Ö—É–Ω–æ–∫"""
    passport = get_passport(id)
    if passport is None:
        try:
            user = get_user(id)
            if user is None:
                u = bot.get_chat(id)
                return f'{name(u)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
            else:
                return f'{user[4]} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.'
        except:
            return f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ –æ—Å–æ–±–∏.'
    id_a = passport[1]
    all_businesses = get_all_businesses()
    akt = 0
    for i in range(len(all_businesses)):
        if all_businesses[i][3] == id_a:
            akt += all_businesses[i][4]

    account = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
    account += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
    account += f'''–Ü–º'—è: {user_link(passport[1], passport[2], passport[3])}\n'''
    account += f'–ö–æ–¥: <code>{passport[18]}</code>\n\n'
    account += f'–°—Ç–∞—Ç–∫–∏: {int(passport[9])} {glas(passport[9])}\n'
    account += f'–ê–∫—Ç–∏–≤–∏: {akt} {glas(akt)}\n'
    account += f'–ó–∞—Ä–ø–ª–∞—Ç–∞: {passport[11]} {glas(passport[11])}'
    return account


def non_reg(u, m):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='ü§ñ –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é', url='t.me/yachminiya_bot')
    keyboard.add(button)
    bot.send_message(m.chat.id,
                     f'{name(u)} –Ω–µ –ø—Ä–æ–π—à–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —É –°–∏—Å—Ç–µ–º—ñ.',
                     parse_mode='HTML', reply_markup=keyboard)


def html(s):
    """–¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ö—Ç–º–ª —Å–∏–º–≤–æ–ª—ñ–≤"""
    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')


def name(user):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è –∞–±–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ. –ü–†–Ü–ó–í–ò–©–ê –°–ê–°–ê–ê–ê–ê–ê–¢–¨"""
    if user.last_name is not None:
        return f'{user.first_name} {user.last_name}'
    return user.first_name


def get_inst_func(inst_name):
    if inst_name == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
        return get_all_zhandarmeria, insert_zhan_l, insert_all_zhandarmeria_g, get_zhan, new_zhan, \
               del_table_zhandarmeria, table_zhandarmeria, insert_all_zhandarmeria_l, get_amount_of_zhans, del_zhan_g
    elif inst_name == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
        return get_all_graphstvo, insert_erl_l, insert_all_graphstvo_g, get_erl, new_erl, del_table_graphstvo, \
               table_graphstvo, insert_all_graphstvo_l, get_amount_of_erls, del_erl_g
    elif inst_name == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
        return get_all_bank, insert_karb_l, insert_all_bank_g, get_karb, new_karb, del_table_bank, table_bank, \
               insert_all_bank_l, get_amount_of_karbs, del_karb_g
    elif inst_name == '–ê–≥—ñ—Ç–∞—Ü—ñ–π–Ω–∏–π –≤—ñ–¥–¥—ñ–ª':
        # return get_all_agit()
        pass
    return [lambda: []]


@bot.message_handler(func=lambda m: m.chat.type == 'private', commands=['start', 'menu'])
def com_start(m):
    u = m.from_user
    bot.delete_message(m.chat.id, m.message_id)
    user = get_user(m.from_user.id)
    if user is None:
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="üìÉ –û—Ñ–æ—Ä–º–∏—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó",
                                                url='https://t.me/Graphstvo')
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(url_button)
        keyboard.add(callback_button)
        out = f'–ü—Ä–∏–≤—ñ—Ç, {html(name(m.from_user))}! –°—Ö–æ–∂–µ, —â–æ —Ç–∏ –≤–ø–µ—Ä—à–µ —Ç—É—Ç, —Ç–æ–º—É —Ç–∏ —â–µ –Ω–∞–ø–µ–≤–Ω–µ –Ω–µ –¥—É–∂–µ —Ä–æ–∑—É–º—ñ—î—à, —â–æ ' \
              f'—Ç–∞–∫–µ –Ø—á–º—ñ–Ω—ñ—è. –¢–æ–º—É –¥—É–∂–µ —Ä–∞–¥–∏–º–æ —Ç–æ–±—ñ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ ' \
              f'<a href="https://telegra.ph/YAchm%D1%96nnij-Pos%D1%96bnik-dlya-novopribulih-01-28">–Ø—á–º—ñ–Ω–Ω–∏–π –ü–æ—Å—ñ–±–Ω–∏–∫ ' \
              f'–¥–ª—è –Ω–æ–≤–æ–ø—Ä–∏–±—É–ª–∏—Ö</a>. –î–∞–ª—ñ –º–∏ —Ç–æ–±—ñ —Ä–∞–¥–∏–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ì—Ä–∞—Ñ—Å—Ç–≤–∞ —Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó ' \
              f'(–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂—á–µ). –ë–∞–∂–∞—î–º–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É!'
        bot.send_message(m.chat.id, out, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)
        # bot.send_message(-1001381818993, f'{user_link(u.id, html(name(u))}\n{u.id}',
        # parse_mode='HTML')
        new_user(m.from_user)
        chats = get_all_chats()
        for i in chats:
            try:
                bot.unban_chat_member(int(i[1]), m.from_user.id, True)
                bot.promote_chat_member(int(i[1]), m.from_user.id)
            except:
                pass
    else:
        code = extract_unique_code(m.text)
        spl_code = code.split('_')
        if spl_code[0] in ('zvit', 'zvitd'):
            passport = get_passport(m.from_user.id)
            if passport is None:
                keyboard = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(text='–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='menul'))
                bot.send_message(m.chat.id, '–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
                return
            m_id = spl_code[2]
            karb = get_karb(m.from_user.id)
            keyboard = types.InlineKeyboardMarkup()
            if spl_code[0] == 'zvit':
                if karb:
                    button = types.InlineKeyboardButton(text='–§—ñ–Ω–∞–Ω—Å—É–≤–∞—Ç–∏',
                                                        callback_data=f'finance_zvit_{spl_code[1]}_{spl_code[2]}')
                    keyboard.add(button)
            bot.copy_message(m.chat.id, -1001511247539, int(m_id), reply_markup=keyboard)
        elif spl_code[0] in ('finzvit', 'finzvitd'):
            passport = get_passport(m.from_user.id)
            if passport is None:
                keyboard = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(text='–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='menul'))
                bot.send_message(m.chat.id, '–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
                return
            m_id = spl_code[2]
            keyboard = types.InlineKeyboardMarkup()
            if spl_code[0] == 'finzvit':
                mess_id = int(spl_code[1])
                msg = bot.forward_message(thrash, -1001543732225, mess_id)
                msg_id = int(msg.reply_markup.keyboard[0][0].url.split('=')[1].split('_')[2])
                zvit_text = msg.text
                inst = get_institution(inst_shorts[" ".join(zvit_text.split('\n')[0].split()[3:-3])])
                if inst[6] == m.from_user.id:
                    button = types.InlineKeyboardButton(text='–†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∫–æ—à—Ç–∏',
                                                        callback_data=f'finzvit_{spl_code[1]}_{spl_code[2]}_{msg_id}')
                    keyboard.add(button)
            bot.copy_message(m.chat.id, -1001511247539, int(m_id), reply_markup=keyboard)
        elif spl_code[0] == 'rozp':
            passport = get_passport(m.from_user.id)
            if passport is None:
                keyboard = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(text='–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='menul'))
                bot.send_message(m.chat.id, '–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
                return
            m_id = spl_code[2]
            keyboard = types.InlineKeyboardMarkup()
            bot.copy_message(m.chat.id, -1001511247539, int(m_id), reply_markup=keyboard)
        elif code == 'prostir':
            prostir_f(m, False)
        elif code == 'all_info':
            all_info_f(m, u, False)
        elif code == "golos":
            pass
        elif code == 'menus':
            menus_f(m, False)
        elif code == 'sud':
            sud_f(m, False)
        else:
            main_menu(m, False)


@bot.message_handler(func=lambda m: m.chat.type == 'supergroup', commands=['start', 'menu'])
def com_start(m):
    try:
        bot.delete_message(m.chat.id, m.message_id)
    except:
        pass
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="üí¨ –û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç –Ø—á–º—ñ–Ω—ñ—ó",
                                            url='https://t.me/Yachminiya')
    keyboard.add(url_button)
    callback_button = types.InlineKeyboardButton(text="üó∫ –ü—Ä–æ—Å—Ç—ñ—Ä –Ø—á–º—ñ–Ω—ñ—ó",
                                                 url="t.me/yachminiya_test_bot?start=prostir")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", url="t.me/yachminiya_test_bot?start=golos")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚öñÔ∏è C—É–¥", url="t.me/yachminiya_test_bot?start=sud")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üì±–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ–Ω—é",
                                                 url="t.me/yachminiya_test_bot?start=menus")
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", url="t.me/yachminiya_test_bot?start=all_info")
    keyboard.add(callback_button)
    bot.send_message(m.chat.id, '–í–∞—Å –≤—ñ—Ç–∞—î –≥—Ä—É–ø–æ–≤–µ –º–µ–Ω—é –°–∏—Å—Ç–µ–º–∏.\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –≥–æ–ª–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –°–∏—Å—Ç–µ–º–∏.',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global voting_q, del_pass

    m = call.message
    u = call.from_user
    if f_queue_call(call):
        return

    if call.data == "pass":
        if call.from_user.id != m.reply_to_message.from_user.id:
            bot.answer_callback_query(callback_query_id=call.id, text='–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è –í–∞—Å!',
                                      show_alert=True)
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text)
        bot.send_message(chat_id=call.message.chat.id, text=pass_form, parse_mode='HTML')
        return

    if call.data == 'menu':
        main_menu(call.message, False)
        return

    if call.data == 'menul':
        main_menu(call.message, True)
        return

    if call.data == 'sud':
        sud_f(m)
        return

    if call.data == 'prostir':
        prostir_f(m)
        return

    if call.data == 'all_info':
        all_info_f(m, u)
        return

    if call.data == 'menus':
        menus_f(m)
        return

    if call.data == 'pass_pp':
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'all_info')

        out = get_str_passport(u.id)
        bot.edit_message_text(out, m.chat.id, m.message_id, parse_mode='HTML', reply_markup=keyboard)
        return

    if call.data == 'acc_pp':
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'all_info')

        out = get_str_acc(u.id)
        bot.edit_message_text(out, m.chat.id, m.message_id, parse_mode='HTML', reply_markup=keyboard)
        return

    if call.data == 'aktyv_pp':
        usr = get_user(u.id)
        all_users = get_all_users()
        all_messages = 0
        all_words = 0
        for i in all_users:
            all_messages += i[7]
            all_words += i[8]

        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, 'all_info')

        out = f'–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n{user_link(u.id, html(name(u)))}\n\n'
        out += f'–†–µ–ø—É—Ç–∞—Ü—ñ—è: {usr[3]}\n'
        out += f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –≤–µ—Å—å —á–∞—Å: {usr[7]}\n'
        out += f'–°–ª—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å: {usr[8]}\n'
        out += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤—É: {round(((usr[7] / all_messages) + (usr[8] / all_words)) * 50, 2)}%"
        bot.edit_message_text(out, m.chat.id, m.message_id, parse_mode='HTML', reply_markup=keyboard)
        return

    if call.data == 'chats':
        chats = get_all_chats()
        u = get_user(u.id)
        keyboard = types.InlineKeyboardMarkup()
        for i in chats:
            if str(i[0]) in u[9].split():
                try:
                    if i[4] != 'NoneURL':
                        url_button = types.InlineKeyboardButton(text=i[1], url=i[4])
                        keyboard.add(url_button)
                except:
                    pass
        keyboard = menu_footer(keyboard, 'prostir')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ –Ø—á–º—ñ–Ω—ñ—ó, –¥–æ —è–∫–∏—Ö –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø.\n–Ø–∫—â–æ —Ç—É—Ç –Ω–µ–º–∞ —è–∫–æ–≥–æ—Å—å —á–∞—Ç—É, —É '
                                   '—è–∫–æ–º—É –≤–∏ —î, –≤–≤–µ–¥—ñ—Ç—å —É —Ç–æ–º—É —á–∞—Ç—ñ –∫–æ–º–∞–Ω–¥—É <code>!–¥–æ–¥–∞—Ç–∏_—á–∞—Ç</code>',
                              reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data == 'channels':
        channels = get_all_channels()
        u = get_user(u.id)
        keyboard = types.InlineKeyboardMarkup()
        for i in channels:
            if str(i[0]) in u[10].split():
                try:
                    if i[3] != 'NoneURL':
                        url_button = types.InlineKeyboardButton(text=i[1], url=i[3])
                        keyboard.add(url_button)
                except:
                    pass
        keyboard = menu_footer(keyboard, 'prostir')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –Ø—á–º—ñ–Ω—ñ—ó, –¥–æ —è–∫–∏—Ö –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø.', reply_markup=keyboard,
                              parse_mode='HTML')
        return

    if call.data[0:9] == 'krime_sud':
        def get_guilty(m0):
            if m0.text == '–°–¢–û–ü':
                bot.send_message(m0.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∏')
                main_menu(m0, False)
                return

            guilty = m0.text.split(', ')
            text = f'{alg}–í–∫–∞–∂—ñ—Ç—å —Å—Ç–∞—Ç—Ç—é, –∑–∞ —è–∫–æ—é –≤–∏ –∑–¥—ñ–π—Å–Ω—é—î—Ç–µ –ø–æ–∑–æ–≤. –Ø–∫—â–æ —Ç–∞–∫–∏–π —Å—Ç–∞—Ç–µ–π –¥–µ–∫—ñ–ª—å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ó—Ö ' \
                   f'—á–µ—Ä–µ–∑ –∫–æ–º—É. <a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86-Krim%D1%96naln%D1%96' \
                   f'-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª –Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É. –ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è</a> '

            def get_articles(m1):
                if m1.text == '–°–¢–û–ü':
                    bot.send_message(m0.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∏')
                    main_menu(m0, False)
                    return

                articles = m1.text.split(', ')
                text = f'{alg}–ù–∞–ø–∏—à—ñ—Ç—å —Å—Ç–∏—Å–ª–∏–π —Ç–∞ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–π –æ–ø–∏—Å  –ø–æ–∑–æ–≤—É. –û–±–º–µ–∂–µ–Ω–Ω—è –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤ ‚Äî 2000.'

                def get_description(m2):
                    if m2.text == '–°–¢–û–ü':
                        bot.send_message(m0.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∏')
                        main_menu(m0, False)
                        return

                    description = m2.text
                    text = f'{alg}–ù–∞–¥—ñ—à–ª—ñ—Ç—å —É—Å—ñ –¥–æ–∫–∞–∑–∏.'
                    messages = []

                    def get_evidence(message):
                        if message.text == '–ó–ê–í–ï–†–®–ò–¢–ò':
                            pass
                        else:
                            messages.append(message)
                            if len(messages)>9:
                                pass
                            else:
                                register_next_step_handler(message, get_evidence)

                    bot.send_message(text=text, chat_id=call.message.chat.id, parse_mode='HTML',
                                     disable_web_page_preview=True)
                    register_next_step_handler(m2, get_evidence)

                bot.send_message(text=text, chat_id=call.message.chat.id, parse_mode='HTML',
                                 disable_web_page_preview=True)
                register_next_step_handler(m1, get_description)

            bot.send_message(text=text, chat_id=call.message.chat.id, parse_mode='HTML', disable_web_page_preview=True)
            register_next_step_handler(m0, get_articles)

        link = '"https://telegra.ph/Algoritm-podach%D1%96-pozovu-09-23"'
        alg = f'''–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≤–∫–∞–∑–∞–Ω–∏–º —É <a href={link}>—Ü—ñ–π —Å—Ç–∞—Ç—Ç—ñ</a>.\n\n'''
        text = f"{alg}" \
               f"–í–∫–∞–∂—ñ—Ç—å –Ω—ñ–∫, —Ç–µ–≥, —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –∫–æ–¥ –æ—Å–æ–±–∏, –ø—Ä–æ—Ç–∏ —è–∫–æ—ó –ø–æ–¥–∞—î—Ç—å—Å—è –ø–æ–∑–æ–≤. –Ø–∫—â–æ —Ç–∞–∫–∏—Ö –æ—Å—ñ–± " \
               f"–¥–µ–∫—ñ–ª—å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ó—Ö —á–µ—Ä–µ–∑ –∫–æ–º—É (–∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏).\n" \
               f"{stop_text}"

        if call.data == 'krime_sud_nm':
            bot.edit_message_reply_markup(m.chat.id, m.message_id, reply_markup=None)
            bot.send_message(text=text, chat_id=call.message.chat.id, parse_mode='HTML', disable_web_page_preview=True)
        else:
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML',
                                  disable_web_page_preview=True)
        register_next_step_handler(call.message, get_guilty)
        return

    if call.data == 'apel_sud':
        def apel_sud(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∏')
                main_menu(m, False)
                return
            bot.send_message(-1001203194174,
                             f'{user_link(m.from_user.id, html(name(m.from_user)))}',
                             parse_mode='HTML')
            bot.forward_message(-1001203194174, m.chat.id, m.message_id)
            bot.send_message(m.chat.id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –ø–æ–∑–æ–≤. –û—á—ñ–∫—É–π—Ç–µ, —ñ–∑ –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è")
            main_menu(m, False)

        text = f'''–î–ª—è –ø–æ–¥–∞—á—ñ –∞–ø–µ–ª—è—Ü—ñ—ó —É –ê–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π –°—É–¥ –æ–ø–∏—à—ñ—Ç—å —ó—ó, –±–∞–∂–∞–Ω–æ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—è –°—É–¥—É. –Ø–∫—â–æ –≤–∏ 
        –ø–æ–¥–∞—î—Ç–µ –Ω–µ –∞–ø–µ–ª—è—Ü—ñ—é, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à –ø–æ–∑–æ–≤. {stop_text}'''
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML',
                              disable_web_page_preview=True)
        register_next_step_handler(call.message, apel_sud)
        return

    if call.data == 'petition':
        passport = get_passport(u.id)
        if passport is None:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', reply_markup=keyboard)
            return
        if passport[10] != '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω':
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó', reply_markup=keyboard)
            return

        def petition_1(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó')
                main_menu(m, False)
                return
            if len(m.text) > 100:
                bot.send_message(m.chat.id, '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
                register_next_step_handler(m, petition_1)
                return

            def petition_2(m, title):
                if m.text == '–°–¢–û–ü':
                    bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ç–∏—Ü—ñ—ó')
                    main_menu(m, False)
                    return
                if len(m.text) > 2000:
                    bot.send_message(m.chat.id, '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ç–∏—Ü—ñ—ó, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
                    register_next_step_handler(m, petition_2)
                    return
                text = m.text
                num = get_petition_last()
                text_p = f'<b>{html(title)}</b>\n' \
                         f'–ê–≤—Ç–æ—Ä: {user_link(passport[1], passport[2], passport[3])}\n\n{html(text)}\n\n' \
                         f'<a href="https://t.me/c/1219790275/{int(num) + 1}">–ü—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ –ø–µ—Ç–∏—Ü—ñ—é</a>'
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ ‚Äî 1', callback_data='petition_vote')
                keyboard.add(button)
                # bot.send_message(-1001403193441, text_p, reply_markup=keyboard, parse_mode='HTML',
                # disable_web_page_preview=True)
                text_p = f'<a href="https://t.me/c/1403193441/{int(num) + 1}">{html(title)}</a>\n\n' \
                         f'{user_link(passport[1], passport[2], passport[3])} id:{m.from_user.id}'
                # bot.send_message(-1001219790275, text_p, parse_mode='HTML', disable_web_page_preview=True)
                insert_petition_last(num + 1)
                bot.send_message(m.chat.id,
                                 f'–ü–µ—Ç–∏—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞.\n'
                                 f'<a href="https://t.me/c/1403193441/{int(num) + 1}">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a>',  # TODO
                                 parse_mode='HTML')
                main_menu(m, False)

            bot.send_message(m.chat.id,
                             f'–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ç–∏—Ü—ñ—ó. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É ‚Äî 2000 —Å–∏–º–≤–æ–ª—ñ–≤.\n{stop_text}',
                             parse_mode='HTML')
            register_next_step_handler(m, petition_2, m.text)

        text = f'''–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ç–∏—Ü—ñ—ó. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É ‚Äî 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n{stop_text}'''
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML',
                              disable_web_page_preview=True)
        register_next_step_handler(call.message, petition_1)
        return

    if call.data == 'petition_vote':
        passport = get_passport(u.id)
        if passport is None:
            bot.answer_callback_query(callback_query_id=call.id, text='–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                      show_alert=True)
            return
        votes_m = bot.forward_message(thrash, -1001219790275, call.message.message_id)
        text = votes_m.text.split('\n')
        for i in range(2, len(text)):
            if str(call.from_user.id) == text[i].split()[-1][3:]:
                bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –≤–∂–µ –ø—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ —Ü—é –ø–µ—Ç–∏—Ü—ñ—é',
                                          show_alert=True)
                return
        text_p = f'<a href="{votes_m.entities[0].url}">{text[0]}</a>\n\n'
        for i in range(2, len(text)):
            text_p += f'<a href="tg://user?id={text[i].split()[-1][3:]}">{" ".join(text[i].split()[:-1])}</a> ' \
                      f'{text[i].split()[-1]}\n'
        text_p += f'{user_link(call.from_user.id, passport[2], passport[3])} id:{call.from_user.id}'
        bot.edit_message_text(text=text_p, chat_id=-1001219790275, message_id=call.message.message_id,
                              parse_mode='HTML', disable_web_page_preview=True)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text=f'–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ ‚Äî {len(text) - 1}', callback_data='petition_vote')
        keyboard.add(button)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=keyboard)
        bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ —Ü—é –ø–µ—Ç–∏—Ü—ñ—é', show_alert=True)
        return

    if call.data == 'menu_changed':
        bot.edit_message_text(f"{call.message.text}", chat_id=call.message.chat.id, message_id=call.message.message_id)
        main_menu(m, False)
        return

    if call.data == 'vidmova':
        user = m.entities[0].user
        if u.id != user.id:
            bot.answer_callback_query(callback_query_id=call.id, text='–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è –í–∞—Å!',
                                      show_alert=True)
            return
        passport = get_passport(u.id)
        all_passports = get_all_passports()
        del (all_passports[passport[0] - 1])
        for i in range(len(all_passports)):
            all_passports[i][0] = i + 1
        del_table_passports()
        db.insert(table_passports)
        insert_all_passports_l(all_passports)
        amount = get_amount_of_passports()
        bot.edit_message_text(chat_id=m.chat.id, message_id=call.message.message_id,
                              text=f'{name(u)} –≤—Ç—Ä–∞—á–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó!')
        del_passport_g(all_passports, amount)
        # TODO —Ä—ñ–¥ —Ç–∞ –±—ñ–∑–Ω–µ—Å

    if call.data == "kvorum":
        starshyna = get_passport(u.id)
        if starshyna is None:
            bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –Ω–µ –°—Ç–∞—Ä—à–∏–Ω–∞',
                                      show_alert=True)
            return
        if not int(starshyna[12].split()[1]):
            bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –Ω–µ –°—Ç–∞—Ä—à–∏–Ω–∞',
                                      show_alert=True)
            return

        stars = call.message.text.split('\n')[-1].split(', ')
        mess = '\n'.join(call.message.text.split('\n')[:-1])

        out = f'{mess}\n'

        if call.message.entities is not None:
            for i in call.message.entities:
                if i.user.id == call.from_user.id:
                    bot.answer_callback_query(callback_query_id=call.id, text='–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏',
                                              show_alert=True)
                    return

            for i in range(len(stars)):
                out += f'<a href="tg://user?id={m.entities[i].user.id}">{stars[i]}</a>, '

        out += f'<a href="tg://user?id={call.from_user.id}">{starshyna[2]} {starshyna[3]}</a>'

        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"–ü—Ä–∏—Å—É—Ç–Ω—ñ–π - {len(stars) + 1}", callback_data="kvorum")
        keyboard.add(callback_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=out,
                              reply_markup=keyboard, parse_mode='HTML')

    if call.data == 'rid':
        rid_f(u, m)
        return

    if call.data == "rid_members":
        keyboard = types.InlineKeyboardMarkup()
        passport = get_passport(call.from_user.id)
        rid = get_rid(passport[13])

        for i in range(2, len(rid[3].split())):
            employer = get_passport(int(rid[3].split()[i]))
            callback_button = types.InlineKeyboardButton(text=f"{employer[2]} {employer[3]}",
                                                         callback_data=f"rid_member{i}")
            keyboard.add(callback_button)

        keyboard = menu_footer(keyboard, 'rid')
        bot.edit_message_text(text=f'–ß–ª–µ–Ω–∏ —Ä–æ–¥—É {rid[1]}', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)
        return

    if call.data == "new_rid":
        def form_bus(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–¥—É')
                main_menu(m, False)
                return
            mess = m.text.split('\n')
            rid_name = html(m.text)
            rid = get_rid(rid_name)
            if rid:
                bot.send_message(m.chat.id,
                                 f'–¢–∞–∫–∏–π —Ä—ñ–¥ —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–Ω–æ–≤—É. {stop_text}')
                register_next_step_handler(m, form_bus)
                return

            if rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫' or rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫–∏':
                bot.send_message(m.chat.id,
                                 f'–ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ "–°–∞–º—ñ—Ç–Ω–∏–∫–∏". '
                                 f'–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. {stop_text}')
                register_next_step_handler(m, form_bus)
                return

            business_out = f'–í–∞—à —Ä—ñ–¥ –º–∞—Ç–∏–º–µ –Ω–∞–∑–≤—É <b>{rid_name}</b>. <b>–£–≤–∞–≥–∞!</b> –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–¥—É –∫–æ—à—Ç—É—î 500 —è—á–æ–∫. ' \
                           f'–ö–æ—à—Ç–∏ –±—É–¥—É—Ç—å —Å–ø–∏—Å–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ ' \
                           f'—è—á–æ–∫, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n\n'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Ä—ñ–¥', callback_data='rid_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É', callback_data='new_rid')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–¥—É', callback_data='rid')
            keyboard.add(button)
            bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)

        bot.edit_message_text(
            text=f'–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —Ä–æ–¥—É. <b>–£–≤–∞–≥–∞!</b> –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ '
                 f'"–°–∞–º—ñ—Ç–Ω–∏–∫–∏". {stop_text}',
            message_id=call.message.id, chat_id=call.message.chat.id, parse_mode='HTML')
        register_next_step_handler(call.message, form_bus)

    if call.data == 'rid_done':
        bot.edit_message_text(
            text=f'–ó–∞—á–µ–∫–∞–π—Ç–µ. –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ä—ñ–¥.',
            message_id=call.message.message_id, chat_id=call.message.chat.id)
        mess = call.message.text.split()
        index_1 = mess.index('–Ω–∞–∑–≤—É')
        index_2 = mess.index('–£–≤–∞–≥–∞!')
        namep = html(' '.join(mess[index_1 + 1:index_2])[:-1])
        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        if int(passport[9]) < 1:
            bot.edit_message_text(text='–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–¥—É',
                                  message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  reply_markup=keyboard)
            return
        passport[9] = int(passport[9]) - 500
        passport[13] = namep

        rid_out = f'<b>–†—ñ–¥</b>\n'
        rid_out += f'''{namep}\n\n'''
        username = passport[5]
        rid_out += f'–ì–æ–ª–æ–≤–∞:\n<b><a href="t.me/{username}">{passport[2]} {passport[3]}</a></b>\n'
        n = bot.send_message(-1001424413839, rid_out, parse_mode='HTML').id
        new_rid(u, m, n)
        update_channel_rid(namep)
        bot.edit_message_text(
            text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ —Ä—ñ–¥ <a href="https://t.me/FamilyRegistry/{n}">{namep}</a>.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard,
            disable_web_page_preview=True, parse_mode='HTML')
        insert_passport_a(passport)

    if call.data == "new_rid_member":
        bot.edit_message_text(
            f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤ —Ä—ñ–¥. '
            f'<a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id '
            f'–∞–∫–∞—É–Ω—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n{stop_text}.',
            chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤ —Ä—ñ–¥')
                rid_f(u, m, False)
                return

            if m.text == str(m.from_user.id):
                bot.send_message(m.chat.id,
                                 f'–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —Å–µ–±–µ —É —Å–≤—ñ–π –∂–µ —Ä—ñ–¥)\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑)\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            if not m.text.isdigit():
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Å–æ–±–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            id = int(m.text)
            new_emp = get_passport(id)
            if new_emp is None:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –æ—Å–æ–±–∞ –Ω–µ –º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó. '
                                 f'–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            if new_emp[13] != '–°–∞–º—ñ—Ç–Ω–∏–∫':
                bot.send_message(m.chat.id,
                                 f'{user_link(new_emp[1], new_emp[2], new_emp[3])} —É–∂–µ —î —á–ª–µ–Ω–æ–º '
                                 f'—Ä–æ–¥—É {new_emp[13]}. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            passport = get_passport(u.id)
            rid = get_rid(passport[13])
            peoples = rid[3].split()

            if m.text in peoples:
                bot.send_message(m.chat.id,
                                 f'–¶–µ–π –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω —É–∂–µ —î —á–ª–µ–Ω–æ–º –≤–∞—à–æ–≥–æ —Ä–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return
            try:
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='new_rid_member_done')
                keyboard.add(button)
                button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='new_rid_member_cancel')
                keyboard.add(button)
                bot.send_message(int(m.text),
                                 f'–í–∞—Å —Ö–æ—á—É—Ç—å –ø—Ä–∏–π–Ω—è—Ç–∏ —É —Ä—ñ–¥ <a href="t.me/FamilyRegistry/{rid[5]}">{rid[1]}</a>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)
                bot.send_message(m.chat.id,
                                 f'{user_link(new_emp[1], new_emp[2], new_emp[3])} –æ—Ç—Ä–∏–º–∞–≤ '
                                 f'–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —É —Ä—ñ–¥. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.',
                                 parse_mode='HTML')
            except:
                bot.send_message(m.chat.id,
                                 '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –°–∏—Å—Ç–µ–º–∏. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —É –Ω—å–æ–≥–æ, —â–æ–± –≤—ñ–Ω '
                                 '–≤—ñ–¥–Ω–æ–≤–∏–≤ —á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é.')
            rid_f(u, m, False)

        register_next_step_handler(call.message, new_emp_id)
        return

    if call.data == 'edit_rid':
        def form_bus(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏ —Ä–æ–¥—É.')
                rid_f(u, m, False)
                return
            rid_name = html(m.text)
            rid = get_rid(rid_name)
            if rid:
                bot.send_message(m.chat.id,
                                 f'–¢–∞–∫–∏–π —Ä—ñ–¥ —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, form_bus)
                return

            if rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫' or rid_name == '–°–∞–º—ñ—Ç–Ω–∏–∫–∏':
                bot.send_message(m.chat.id,
                                 f'–ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ "–°–∞–º—ñ—Ç–Ω–∏–∫–∏". '
                                 f'–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, form_bus)
                return

            business_out = f'–í–∞—à —Ä—ñ–¥ –º–∞—Ç–∏–º–µ –Ω–∞–∑–≤—É <b>{rid_name}</b>.'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É', callback_data='edit_rid_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É', callback_data='edit_rid')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é —Ä–æ–¥—É', callback_data='rid')
            keyboard.add(button)
            bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)

        bot.edit_message_text(
            text=f'–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ä–æ–¥—É. <b>–£–≤–∞–≥–∞!</b> –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ "–°–∞–º—ñ—Ç–Ω–∏–∫" —Ç–∞ '
                 f'"–°–∞–º—ñ—Ç–Ω–∏–∫–∏".\n{stop_text}.',
            message_id=call.message.id, chat_id=call.message.chat.id, parse_mode='HTML')
        register_next_step_handler(call.message, form_bus)

    if call.data == 'edit_rid_done':
        bot.edit_message_text(
            text=f'–ó–∞—á–µ–∫–∞–π—Ç–µ. –ó–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞–∑–≤–∞ —Ä–æ–¥—É.',
            message_id=call.message.message_id, chat_id=call.message.chat.id)
        mess = call.message.text.split()
        index = mess.index('–Ω–∞–∑–≤—É')
        namep = html(mess[index:-1])
        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        rid = get_rid(passport[13])

        rid[1] = namep
        all_id = rid[3].split()[2:]
        all_passports = get_all_passports()
        for i in all_id:
            passport = get_passport(int(i))
            passport[13] = namep
            insert_passport_l(passport)
            all_passports[passport[0] - 1][13] = namep
        insert_rid_a(rid)
        update_channel_rid(rid[1])
        bot.edit_message_text(
            text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –Ω–∞–∑–≤—É —Ä–æ–¥—É –Ω–∞ <a href="https://t.me/FamilyRegistry/{rid[5]}">{namep}</a>.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard,
            disable_web_page_preview=True, parse_mode='HTML')
        insert_all_passports_g(all_passports)
        return

    if call.data == "new_rid_member_done":
        url = call.message.entities[0].url
        ch_id = -1001424413839
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        rid_name = msg.text.split('\n')[1]
        rid = get_rid(rid_name)
        if f'{call.from_user.id}' in rid[3].split():
            bot.edit_message_text(f'–í–∏ –≤–∂–µ —î —á–ª–µ–Ω–æ–º —Ä–æ–¥—É {rid[1]}!', message_id=call.message.message_id,
                                  chat_id=call.message.chat.id)
            return
        rid[3] += f' {call.from_user.id}'
        bot.edit_message_text(f'–¢–µ–ø–µ—Ä –í–∏ —á–ª–µ–Ω —Ä–æ–¥—É {rid[1]}!', message_id=call.message.message_id,
                              chat_id=call.message.chat.id)
        employer = get_passport(call.from_user.id)
        bot.send_message(int(rid[2]),
                         f'{user_link(employer[1], employer[16], employer[17])} '
                         f'—Å—Ç–∞–≤ —á–ª–µ–Ω–æ–º —Ä–æ–¥—É {rid[1]}!',
                         parse_mode='HTML')
        employer[13] = rid[1]
        employer[14] = time.time()
        insert_rid_a(rid)
        insert_passport_a(employer)
        update_channel_rid(rid[1])
        return

    if call.data == "new_rid_member_cancel":
        url = call.message.entities[0].url
        ch_id = -1001424413839
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        rid_name = msg.text.split('\n')[1]
        rid = get_rid(rid_name)
        bot.edit_message_text(f'–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ –∑–∞–ø–∏—Ç—É.', message_id=call.message.message_id,
                              chat_id=call.message.chat.id)
        employer = get_passport(call.from_user.id)
        bot.send_message(rid[2],
                         f'{user_link(employer[1], employer[16], employer[17])} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ '
                         f'–∑–∞–ø–∏—Ç—É –Ω–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —É —Ä—ñ–¥',
                         parse_mode='HTML')
        return

    if call.data == 'del_member':
        member_user = call.message.entities[0].user
        member = get_passport(member_user.id)
        passport = get_passport(u.id)
        rid = get_rid(passport[13])
        employers = rid[3].split()
        number = employers.index(str(member_user.id))
        del (employers[number])
        rid[3] = ' '.join(employers)
        try:
            bot.send_message(member_user.id,
                             f'–í–∞—Å –≤–∏–ª—É—á–∏–ª–∏ –∑ —Ä–æ–¥—É {rid[1]}.')
        except:
            pass

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=f'–í–∏ –≤–∏–ª—É—á–∏–ª–∏ <a href="tg://user?id={member_user.id}">{member[2]} {member[3]}</a> –∑ —Ä–æ–¥—É {rid[1]}.',
            message_id=call.message.message_id,
            parse_mode='HTML'
        )

        rid_f(u, m, False)
        member[13] = '–°–∞–º—ñ—Ç–Ω–∏–∫'
        insert_rid_a(rid)
        insert_passport_a(member)
        update_channel_rid(rid[1])
        return

    if call.data[0:10] == "rid_member":
        i = int(call.data[10:])
        passport = get_passport(u.id)
        rid = get_rid(passport[13])
        rid_member = get_passport(rid[3].split()[i])
        if rid_member is None:
            bot.edit_message_text(f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞', chat_id=call.message.chat.id, message_id=call.message.message_id)
            return

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üö∑–í–∏–ª—É—á–∏—Ç–∏ —á–ª–µ–Ω–∞ —Ä–æ–¥—É", callback_data='del_member')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, 'rid_members')
        bot.edit_message_text(f'{user_link(rid_member[1], rid_member[16], rid_member[17])}',
                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML',
                              reply_markup=keyboard)

    if call.data == 'exit_rid':
        member_user = u
        member = get_passport(u.id)
        rid = get_rid(member[13])
        employers = rid[3].split()
        number = employers.index(str(member_user.id))
        del (employers[number])
        rid[3] = ' '.join(employers)

        keyboard = menu_footer(types.InlineKeyboardMarkup(), 'rid')
        bot.edit_message_text(f'–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–æ–¥—É {rid[1]}.', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)

        try:
            bot.send_message(
                chat_id=rid[2],
                text=f'<a href="tg://user?id={member_user.id}">{member[2]} {member[3]}</a> –≤–∏–π—à–æ–≤ –∑ —Ä–æ–¥—É {rid[1]}.',
                parse_mode='HTML'
            )
        except:
            pass
        rid_f(u, m, False)
        member[13] = '–°–∞–º—ñ—Ç–Ω–∏–∫'
        insert_rid_a(rid)
        insert_passport_a(member)
        update_channel_rid(rid[1])
        return

    if call.data == 'business':
        passport = get_passport(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        if passport is None:
            keyboard = menu_footer(types.InlineKeyboardMarkup(), 'menus')
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–£ –≤–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–∞—Å–ø–æ—Ä—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∞–±–æ –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó.',
                                  reply_markup=keyboard)
            return

        businesses = get_business_owner([u.id])
        if businesses is None:
            callback_button = types.InlineKeyboardButton(text=f"üÜï–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ",
                                                         callback_data=f"new_business")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—î –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ '
                                       '–Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.',
                                  reply_markup=keyboard)
            return

        for i in businesses:
            callback_button = types.InlineKeyboardButton(text=f"{i[2]}",
                                                         callback_data=f"business{i[0]}")
            keyboard.add(callback_button)

        callback_button = types.InlineKeyboardButton(text=f"üÜï–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ",
                                                     callback_data=f"new_business")
        keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, 'menus')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–¶–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –º–µ–Ω—é –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞–º–∏ '
                                   '–∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–µ',
                              reply_markup=keyboard)
        return

    if call.data[0:8] == "business":
        i = int(call.data[8:])
        business_seans[u.id] = get_all_businesses()[i - 1][1]
        business = get_seans_business(u.id, m)
        if not business:
            return
        business_f(business, m)
        return

    if call.data == "praciv":
        keyboard = types.InlineKeyboardMarkup()
        business = get_seans_business(u.id, m)
        if business is None:
            return
        for i in business[5].split()[2:]:
            employer = get_passport(int(i))
            if employer is None:
                continue
            callback_button = types.InlineKeyboardButton(text=f"{employer[2]} {employer[3]}",
                                                         callback_data=f"employer{i}")
            keyboard.add(callback_button)

        callback_button = types.InlineKeyboardButton(text=f"üÜï–ù–∞–π–Ω—è—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", callback_data=f"new_employer")
        keyboard.add(callback_button)
        keyboard = menu_footer(keyboard, f"business{business[0]}")
        bot.edit_message_text(text=f'–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ "{business[2]}"', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)
        return

    if call.data[0:8] == "employer":
        i = int(call.data[8:])
        business = get_seans_business(u.id, m)
        if business is None:
            return
        employer = get_passport(i)
        if employer is None:
            keyboard = menu_footer(types.InlineKeyboardMarkup(), f"praciv")
            bot.edit_message_text(f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞', chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=keyboard)
            return

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üí≥–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—é –ø–ª–∞—Ç—É", callback_data='change_bill')
        keyboard.add(button)
        button = types.InlineKeyboardButton(text="üö∑–ó–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", callback_data='del_employer')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f"praciv")
        bot.edit_message_text(f'{user_link(employer[1], employer[16], employer[17])}',
                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML',
                              reply_markup=keyboard)

    if call.data == 'new_employer':
        bot.edit_message_text(
            f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–π–Ω—è—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—É. '
            f'<a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id '
            f'–∞–∫–∞—É–Ω—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n{stop_text}.',
            chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            business = get_seans_business(u.id, m)
            if business is None:
                return

            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –Ω–∞–π–º–∞–Ω–Ω—è –Ω–∞ —Ä–æ–±–æ—Ç—É')
                business_f(business, m, False)
                return

            if m.text == str(m.from_user.id):
                bot.send_message(m.chat.id,
                                 f'–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π–Ω—è—Ç–∏ —Å–µ–±–µ –Ω–∞ —Å–≤–æ—é –∂ —Ä–æ–±–æ—Ç—É)\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑)\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            new_emp = get_passport(int(m.text))
            if new_emp is None:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –æ—Å–æ–±–∞ –Ω–µ –º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ '
                                 f'–∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            employers = business[5].split()

            if m.text in employers:
                bot.send_message(m.chat.id,
                                 f'–¶–µ–π –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω —É–∂–µ –ø—Ä–∞—Ü—é—î —É –≤–∞—à–æ–º—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='new_employer_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='new_employer_cancel')
            keyboard.add(button)
            try:
                bot.send_message(int(m.text),
                                 f'–í–∞—Å —Ö–æ—á—É—Ç—å –Ω–∞–π–Ω—è—Ç–∏ –Ω–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ '
                                 f'<a href="t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)
                bot.send_message(m.chat.id,
                                 f'{user_link(new_emp[1], new_emp[2], new_emp[3])} –æ—Ç—Ä–∏–º–∞–≤ '
                                 f'–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–π–Ω—è—Ç—Ç—è –Ω–∞ —Ä–æ–±–æ—Ç—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.',
                                 parse_mode='HTML')
            except:

                bot.send_message(m.chat.id,
                                 '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –°–∏—Å—Ç–µ–º–∏. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —É –Ω—å–æ–≥–æ, —â–æ–± –≤—ñ–Ω '
                                 '–≤—ñ–¥–Ω–æ–≤–∏–≤ —á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é.')
            business_f(business, m, False)

        register_next_step_handler(call.message, new_emp_id)
        return

    if call.data == "new_employer_done":
        url = call.message.entities[0].url
        ch_id = -1001162793975
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        tag = msg.text.split()[msg.text.split().index('–¢–µ–≥:') + 1]
        business = get_business(tag)
        if f'{u.id}' in business[5].split():
            bot.edit_message_text(f'–í–∏ –≤–∂–µ —î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]}!',
                                  message_id=call.message.message_id,
                                  chat_id=call.message.chat.id)
            return
        business[5] += f' {call.from_user.id}'
        business[6] += f' 0'
        bot.edit_message_text(f'–¢–µ–ø–µ—Ä –í–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]}!', message_id=call.message.message_id,
                              chat_id=call.message.chat.id)
        insert_business_a(business)
        employer = get_passport(call.from_user.id)
        employer[15] += f' {tag}'
        insert_passport_a(employer)
        try:
            bot.send_message(int(business[3]),
                             f'{user_link(employer[1], employer[16], employer[17])} —Å—Ç–∞–≤ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º '
                             f'–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]}!',
                             parse_mode='HTML')
        except:
            pass
        return

    if call.data == 'edit_business':
        business = get_seans_business(u.id, m)
        if business is None:
            return

        def form_bus(m):
            business = get_seans_business(u.id, m)
            if business is None:
                return
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞')
                business_f(business, m, False)
                return
            mess = m.text.split('\n')
            try:
                namep = ' '.join(mess[-3].split()[1:])
                tag = '_'.join(mess[-2].split()[1:]).upper()
                about = ' '.join(mess[-1].split()[2:])

                low = 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', \
                      't', 'u', 'v', 'w', 'x', 'y', 'z'
                for i in tag:
                    if i.lower() not in low:
                        if not i.isnumeric() and i != '_':
                            bot.send_message(m.chat.id,
                                             f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–≥. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç–µ–≥ —ñ '
                                             f'–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.',
                                             parse_mode='HTML')
                            register_next_step_handler(m, form_bus)
                            return

                business = get_business(namep)

                if business:
                    bot.send_message(m.chat.id,
                                     f'–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ '
                                     f'–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.',
                                     parse_mode='HTML')
                    register_next_step_handler(m, form_bus)
                    return

                business = get_business(tag)

                if business:
                    bot.send_message(m.chat.id,
                                     f'–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ '
                                     f'–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.',
                                     parse_mode='HTML')
                    register_next_step_handler(m, form_bus)
                    return

                passport = get_passport(m.from_user.id)

                business_out = f'–®–∞–±–ª–æ–Ω –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞\n\n'
                business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <i>{namep}</i>\n'''
                business_out += f'''<b>–í–ª–∞—Å–Ω–∏–∫:</b> 
                <i>{user_link(passport[1], passport[2], passport[3])}</i>\n'''
                business_out += f"<b>–¢–µ–≥:</b> <i>{tag}</i>\n"
                business_out += f"<b>–†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:</b> <i>{about}</i>\n"
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —à–∞–±–ª–æ–Ω', callback_data='business_edit_done')
                keyboard.add(button)
                button = types.InlineKeyboardButton(text='–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ', callback_data='edit_business')
                keyboard.add(button)
                bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)
            except:
                bot.send_message(m.chat.id,
                                 '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, 
                                 –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')
                register_next_step_handler(call.message, form_bus)
                return

        bot.edit_message_text(text=business_form, message_id=call.message.id, chat_id=call.message.chat.id,
                              parse_mode='HTML')
        register_next_step_handler(call.message, form_bus)

    if call.data == "new_employer_cancel":
        url = call.message.entities[0].url
        ch_id = -1001162793975
        bus_id = int(url.split('/')[-1])
        msg = bot.forward_message(thrash, ch_id, bus_id)
        tag = msg.text.split()[msg.text.split().index('–¢–µ–≥:') + 1]
        business = get_business(tag)
        bot.edit_message_text(f'–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ –∑–∞–ø–∏—Ç—É', message_id=call.message.message_id,
                              chat_id=call.message.chat.id)
        employer = get_passport(call.from_user.id)
        try:
            bot.send_message(int(business[3]),
                             f'{user_link(employer[1], employer[16], employer[17])} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ '
                             f'–∑–∞–ø–∏—Ç—É –Ω–∞ –Ω–∞–π–Ω—è—Ç—Ç—è –Ω–∞ —Ä–æ–±–æ—Ç—É',
                             parse_mode='HTML')
        except:
            pass
        return

    if call.data == 'business_edit_done':
        mess = m.text.split('\n')
        namep = ' '.join(mess[-4].split()[1:])
        tag = '_'.join(mess[-2].split()[1:]).upper()
        about = ' '.join(mess[-1].split()[2:])

        business = get_seans_business(u.id, m)
        if business is None:
            return

        passport = get_passport(call.from_user.id)
        keyboard = menu_footer(types.InlineKeyboardMarkup(), f"business{business[0]}", "‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞")
        edit_business = [business[0], tag, namep, u.id, business[4], business[5], business[6], business[7], business[8],
                         about]
        bot.edit_message_text(
            text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–ª–∏ <a href="https://t.me/businesses_yachminiya/{business[7]}">{namep}</a>.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard,
            disable_web_page_preview=True, parse_mode='HTML')
        insert_business_a(edit_business)
        update_channel_business(namep)
        if business[1] != tag:
            all_id = business[5].split()[2:]
            all_passports = get_all_passports()
            for i in all_id:
                passport = get_passport(int(i))
                passport[15].replace(f'{business[1]}', namep)
                insert_passport_l(passport)
                all_passports[passport[0] - 1][15].replace(f'{business[1]}', namep)
            insert_all_passports_g(all_passports)
        return

    if call.data == 'new_business':
        def form_bus(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞')
                main_menu(m, False)
                return
            mess = m.text.split('\n')
            try:
                namep = ' '.join(mess[-3].split()[1:])
                tag = '_'.join(mess[-2].split()[1:]).upper()
                about = ' '.join(mess[-1].split()[2:])
            except:
                bot.send_message(m.chat.id,
                                 '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, 
                                 –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')
                register_next_step_handler(call.message, form_bus)
                return

            low = 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', \
                  'u', 'v', 'w', 'x', 'y', 'z'
            for i in tag:
                if i.lower() not in low:
                    if not i.isnumeric() and i != '_':
                        bot.send_message(m.chat.id,
                                         f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–≥. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç–µ–≥ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.',
                                         parse_mode='HTML')
                        register_next_step_handler(m, form_bus)
                        return

            if tag == '':
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–≥. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç–µ–≥ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, form_bus)
                return

            if namep == '':
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, form_bus)
                return

            if about == '.' or about == ' .':
                bot.send_message(m.chat.id,
                                 f'–ó–∞–º—ñ—Å—Ç—å –∫—Ä–∞–ø–∫–∏ –≤ —Ä—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–±–∞ —â–æ—Å—å –≤–ø–∏—Å–∞—Ç–∏. '
                                 f'–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, form_bus)
                return

            business = get_business(namep)

            if business:
                bot.send_message(m.chat.id,
                                 f'–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ '
                                 f'–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.')
                register_next_step_handler(m, form_bus)
                return

            business = get_business(tag)

            if business:
                bot.send_message(m.chat.id,
                                 f'–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –∞–±–æ —Ç–µ–≥–æ–º —É–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É —ñ '
                                 f'–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ä–º—É –∑–Ω–æ–≤—É.\n{stop_text}.')
                register_next_step_handler(m, form_bus)
                return

            passport = get_passport(m.from_user.id)

            business_out = f'–®–∞–±–ª–æ–Ω –≤–∞—à–æ–≥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞. –£–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ ' \
                           f'—Ñ–æ—Ä–º—É. <b>–£–≤–∞–≥–∞!</b> –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—ñ–∑–Ω–µ—Å—É –∫–æ—à—Ç—É—î 500 —è—á–æ–∫. –ö–æ—à—Ç–∏ –±—É–¥—É—Ç—å —Å–ø–∏—Å–∞–Ω—ñ ' \
                           f'–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ' \
                           f'–±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n\n'
            business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <i>{namep}</i>\n'''
            business_out += f'''<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i>
            {user_link(passport[1], passport[2], passport[3])}</i>\n'''
            business_out += f"<b>–¢–µ–≥:</b> <i>{tag}</i>\n"
            business_out += f"<b>–†—ñ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:</b> <i>{about}</i>\n"
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ', callback_data='business_done')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ', callback_data='new_business')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞',
                                                callback_data='business')
            keyboard.add(button)
            bot.send_message(m.chat.id, business_out, parse_mode='HTML', reply_markup=keyboard)

        bot.edit_message_text(text=business_form, message_id=call.message.id, chat_id=call.message.chat.id,
                              parse_mode='HTML')
        register_next_step_handler(call.message, form_bus)

    if call.data == 'business_done':
        mess = call.message.text.split('\n')
        namep = ' '.join(mess[-4].split()[1:])
        tag = '_'.join(mess[-2].split()[1:]).upper()
        about = ' '.join(mess[-1].split()[2:])
        passport = get_passport(u.id)
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        if passport[9] < 500:
            bot.edit_message_text(text='–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞',
                                  message_id=call.message.message_id, chat_id=call.message.chat.id,
                                  reply_markup=keyboard)
            return
        passport[9] = passport[9] - 500
        business_out = f'<b>–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ</b>\n\n'
        business_out += f'''<b>–ù–∞–∑–≤–∞:</b> <i>{namep}</i>\n'''
        business_out += f'<b>–í–ª–∞—Å–Ω–∏–∫:</b> <i>{user_link(passport[1], passport[2], passport[3])}</i>\n'
        business_out += f"<b>–¢–µ–≥:</b> <code>{tag}</code>\n"
        business_out += f'<b>–ê–∫—Ç–∏–≤–∏</b>: <i>0 —è—á–æ–∫</i>'
        n = bot.send_message(-1001162793975, business_out, parse_mode='HTML').id
        bot.edit_message_text(
            text=f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ <a href="https://t.me/businesses_yachminiya/{n}">{namep}</a>.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard,
            disable_web_page_preview=True, parse_mode='HTML')
        new_business(u, namep, n, tag, about)
        insert_passport_a(passport)
        business_out = get_str_business(namep)
        bot.edit_message_text(text=business_out, chat_id=-1001162793975, message_id=n, parse_mode='HTML',
                              disable_web_page_preview=True)

    if call.data == "change_bill":
        employer_user = m.entities[0].user
        employer = get_passport(employer_user.id)

        business = get_seans_business(u.id, m)
        if business is None:
            return

        number = business[5].split().index(str(employer_user.id))
        old_bill = business[6].split()[number]

        bot.edit_message_text(
            f'–í–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ <a href="tg://user?id={employer_user.id}">{employer[2]} '
            f'{employer[3]}</a>\n–ô–æ–≥–æ —Ç–µ–ø–µ—Ä—ñ—à–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {old_bill} {glas(old_bill)}\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ —è—á–æ–∫ '
            f'–¥–ª—è –Ω–æ–≤–æ—ó –∑–∞—Ä–ø–ª–∞—Ç–∏. {stop_text}',
            message_id=call.message.message_id, chat_id=call.message.chat.id, parse_mode='HTML')

        def new_bill_f(m):
            if m.text == '–°–¢–û–ü':
                keyboard = types.InlineKeyboardMarkup()
                callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data=f"praciv")
                keyboard.add(callback_button)
                callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
                keyboard.add(callback_button)
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–º—ñ–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏', reply_markup=keyboard)
                return

            try:
                new_bill = int(m.text)
            except:
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. {stop_text}',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_bill_f)
                return

            if new_bill < 0:
                bot.send_message(m.chat.id,
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. {stop_text}",
                                 parse_mode='HTML')
                register_next_step_handler(m, new_bill_f)
                return

            bills = business[6].split()
            bills[number] = str(new_bill)
            business[6] = ' '.join(bills)

            bot.send_message(m.chat.id,
                             f'–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ <a href="tg://user?id={employer_user.id}">{employer[2]} '
                             f'{employer[3]}</a> –Ω–∞ {new_bill} {glas(new_bill)}',
                             parse_mode='HTML')
            business_f(business, m, False)
            insert_business_a(business)
            try:
                bot.send_message(employer_user.id,
                                 f'–í–∞–º –∑–º—ñ–Ω–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ {business[2]}\n–í–∞—à–∞ –Ω–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ {new_bill} '
                                 f'{glas(new_bill)}')
            except:
                pass

        register_next_step_handler(call.message, new_bill_f)
        return

    if call.data == 'del_employer':
        employer_user = call.message.entities[0].user
        employer = get_passport(employer_user.id)

        business = get_seans_business(u.id, m)
        if business is None:
            return

        number = business[5].split().index(str(employer_user.id))
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text=f"–ó–≤—ñ–ª—å–Ω–∏—Ç–∏", callback_data=f"del_employer_done")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"employer{number}")
        keyboard.add(callback_button)
        bot.edit_message_text(
            f'–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ <a href="tg://user?id={employer_user.id}">{employer[2]} {employer[3]}</a>?',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data == 'del_employer_done':
        employer_user = call.message.entities[0].user
        employer = get_passport(employer_user.id)

        business = get_seans_business(u.id, m)
        if business is None:
            return

        number = business[5].split().index(str(employer_user.id))
        employers = business[5].split()
        bills = business[6].split()
        del (employers[number])
        del (bills[number])
        business[5] = ' '.join(bills)
        business[6] = ' '.join(bills)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=f'–í–∏ –∑–≤—ñ–ª—å–Ω–∏–ª–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ <a href="tg://user?id={employer_user.id}">{employer[2]} {employer[3]}</a>.',
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
        business_f(business, m, False)
        insert_business_a(business)
        try:
            bot.send_message(employer_user.id,
                             f'–í–∞—Å –∑–≤—ñ–ª—å–Ω–∏–ª–∏ –∑ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2][0]}')
        except:
            pass

    if call.data == "finances":
        business = get_seans_business(u.id, m)
        if business is None:
            return

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton('üí∏–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏', callback_data='transfer')
        keyboard.add(button)
        button = types.InlineKeyboardButton('üí≥–ó–Ω—è—Ç–∏ –∫–æ—à—Ç–∏', callback_data='withdraw')
        keyboard.add(button)
        button = types.InlineKeyboardButton('üíµ–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏ –∑—ñ —Å–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É', callback_data='count')
        keyboard.add(button)
        button = types.InlineKeyboardButton('üè¶–í–∏–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º', callback_data='salary')
        keyboard.add(button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"business{business[0]}")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        bot.edit_message_text(f'–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏\n{business[2]}\n–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}',
                              message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard)

    if call.data == 'transfer':
        business = get_seans_business(u.id, m)
        if business is None:
            return
        msg = f"{business[2]}\n–î–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –∫–æ—à—Ç—ñ–≤ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" \
              f"<code>[id –æ—Ç—Ä–∏–º—É–≤–∞—á–∞] [—Å—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É] [–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)]</code>\n{stop_text}\n" \
              f"–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}"
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id, text=msg,
                              parse_mode='HTML')

        def transfer(m):
            nonlocal business
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–µ—Ä–µ–∫–∞–∑—É –∫–æ—à—Ç—ñ–≤.')
                business_f(business, m, False)
                return
            mess = m.text.split()
            if len(mess) < 2:
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, transfer)
                return
            try:
                amount_m = int(mess[1])
            except:
                bot.send_message(m.chat.id,
                                 f'–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, transfer)
                return

            if amount_m < 1:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, transfer)
                return
            acc_t = get_passport(mess[0])
            bus = False
            if acc_t is None:
                acc_t = get_business(mess[0])
                bus = True
                if acc_t is None:
                    bot.send_message(m.chat.id,
                                     f'–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}',
                                     parse_mode='HTML')
                    register_next_step_handler(m, transfer)
                    return

            if len(mess) > 2:
                description = ' '.join(m.text.split()[2:])
            else:
                description = None

            if int(business[4]) < amount_m:
                bot.send_message(m.chat.id,
                                 f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É. '
                                 f'–°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à—É —Å—É–º—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, transfer)
                return

            comm = commission(int(amount_m), 1)

            if business[4] < amount_m + comm:
                bot.send_message(m.chat.id,
                                 f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—ó. '
                                 f'–°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à—É —Å—É–º—É –∫–æ—à—Ç—ñ–≤.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, transfer)
                return

            business[4] = business[4] - amount_m - comm
            namep1 = f'<a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a>'
            if bus:
                acc_t[4] = acc_t[4] + amount_m
                namep2 = f'<a href="https://t.me/businesses_yachminiya/{acc_t[7]}">{acc_t[2]}</a>'
                money_t = acc_t[4]
            else:
                acc_t[9] = acc_t[9] + amount_m
                namep2 = f'{user_link(acc_t[1], acc_t[2], acc_t[3])}'
                money_t = acc_t[9]

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep1} ({business[4]})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep2} ({money_t})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            msg += f'–ö–æ–º—ñ—Å—ñ—è: {comm} {glas(comm)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'

            bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
            # bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

            if bus:
                # bot.edit_message_text(get_str_business(acc_t[1]), -1001162793975, acc_t[7], parse_mode='HTML')

                msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
                msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
                msg += f'–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
                msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep1} ({business[9]})\n'
                msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep2} ({money_t})\n'
                msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
                if description is not None:
                    msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
                try:
                    bot.send_message(acc_t[3], msg, parse_mode='HTML', disable_web_page_preview=True)
                except:
                    pass
            else:
                msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
                msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
                msg = f'–ù–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
                msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep1} ({business[9]})\n'
                msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
                if description is not None:
                    msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
                try:
                    bot.send_message(acc_t[1], msg, parse_mode='HTML', disable_web_page_preview=True)
                except:
                    pass

            business_f(business, m, False)
            insert_business_a(business)
            acc_g = get_passport(business[3])
            if bus:
                insert_business_a(acc_t)
                acc_t = get_passport(acc_t[3])
            else:
                insert_passport_a(acc_t)
            update_channel_business(business[1])
            update_channel_rid(acc_g[13])
            update_channel_rid(acc_t[13])

        register_next_step_handler(m, transfer)
        return

    if call.data == 'withdraw':
        business = get_seans_business(u.id, m)
        if business is None:
            return
        acc_t = get_passport(u.id)

        def withdraw(m):
            nonlocal business, acc_t
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤.')
                business_f(business, m, False)
                return

            try:
                amount_m = int(m.text)
            except:
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, withdraw)
                return

            if business[4] < amount_m:
                bot.send_message(m.chat.id,
                                 f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π –¥–ª—è –∑–Ω—è—Ç—Ç—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
                                 f'\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, withdraw)
                return

            if amount_m < 1:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π –¥–ª—è –∑–Ω—è—Ç—Ç—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, withdraw)
                return

            business[4] = business[4] - amount_m
            acc_t[9] = acc_t[9] + amount_m

            namep = f'{user_link(acc_t[1], acc_t[2], acc_t[3])}'
            money_t = acc_t[9]

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: <a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a> ' \
                   f'({business[4]})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep} ({money_t})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

            business_f(business, m, False)
            insert_business_a(business)
            insert_passport_a(acc_t)
            update_channel_business(business[1])
            update_channel_rid(acc_t[13])

        bot.edit_message_text(
            text=f'{business[2]}\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ—à—Ç—ñ–≤, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω—è—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞\n{stop_text}\n'
                 f'–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}\n–°—Ç–∞—Ç–∫–∏: {acc_t[11]} {glas(acc_t[11])}',
            message_id=call.message.message_id, chat_id=call.message.chat.id, parse_mode='HTML')
        register_next_step_handler(call.message, withdraw)
        return

    if call.data == 'count':
        business = get_seans_business(u.id, m)
        if business is None:
            return
        acc_g = get_passport(u.id)

        def count(m):
            nonlocal business, acc_g
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤.')
                business_f(business, m, False)
                return

            try:
                amount_m = int(m.text)
            except:
                bot.send_message(m.chat.id,
                                 f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, count)
                return

            if acc_g[9] < amount_m:
                bot.send_message(m.chat.id,
                                 f'–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
                                 f'\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, count)
                return

            if amount_m < 1:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π –¥–ª—è –Ω–∞—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, count)
                return

            business[4] = business[4] + amount_m
            acc_g[9] = acc_g[9] - amount_m

            namep = f'{user_link(acc_g[1], acc_g[2], acc_g[3])}'
            money_t = acc_g[9]

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {namep} ({money_t})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: <a href="https://t.me/businesses_yachminiya/{business[7]}">{business[2]}</a> ' \
                   f'({business[4]})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

            business_f(business, m, False)
            insert_business_a(business)
            insert_passport_a(acc_g)
            update_channel_business(business[1])
            update_channel_rid(acc_g[13])

        bot.edit_message_text(
            text=f'{business[2]}\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ—à—Ç—ñ–≤, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω—è—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞\n{stop_text}\n'
                 f'–ê–∫—Ç–∏–≤–∏: {business[4]} {glas(business[4])}\n–°—Ç–∞—Ç–∫–∏: {acc_g[9]} {glas(acc_g[9])}',
            message_id=call.message.message_id, chat_id=call.message.chat.id, parse_mode='HTML')
        register_next_step_handler(call.message, count)
        return

    if call.data == 'salary':
        business = get_seans_business(u.id, m)
        if business is None:
            return

        id_list = business[5].split()
        salary_list = business[6].split()
        summa = 0
        for i in salary_list:
            summa += int(i)
        if summa == 0:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞",
                                                         callback_data=f"business{business[0]}")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(
                f'–£ –≤—Å—ñ—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ {business[2]} –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é.',
                message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard)
            return

        if summa > business[4]:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞",
                                                         callback_data=f"business{business[0]}")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(
                '–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏',
                message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard)
            return

        comm = commission(summa, 1)
        if summa + comm > business[4]:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞",
                                                         callback_data=f"business{business[0]}")
            keyboard.add(callback_button)
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(
                '–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó.',
                message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard)
            return
        for i in range(2, len(id_list)):
            passport = get_passport(id_list[i])
            passport[9] = passport[9] + int(salary_list[i])
            try:
                bot.send_message(int(id_list[i]),
                                 f'–í–∞–º –Ω–∞—Ä–∞—Ö—É–≤–∞–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ {business[2]} —É —Ä–æ–∑–º—ñ—Ä—ñ {salary_list[i]} '
                                 f'{glas(salary_list[i])}')
            except:
                pass

        business[4] = int(business[4]) - summa - comm
        bot.edit_message_text(chat_id=call.message.chat.id, text='–ó–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!',
                              message_id=call.message.message_id)
        bot.send_message(-1001282951480, '–ó–¥—ñ–π—Å–Ω–µ–Ω–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ!')
        return

    if call.data == 'del_business':
        keyboard = types.InlineKeyboardMarkup()
        business = get_seans_business(u.id, m)
        if business is None:
            return
        number = business[7]
        callback_button = types.InlineKeyboardButton(text=f"‚ùå–ó–∞–∫—Ä–∏—Ç–∏", callback_data=f"del_business_done")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"business{number}")
        keyboard.add(callback_button)
        bot.edit_message_text(
            f'–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ <a href="https://t.me/businesses_yachminiya/{number}">{business[2]}'
            f'</a>? –í–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ –≤—Å—ñ —Å–≤–æ—ó –∞–∫—Ç–∏–≤–∏ —É –Ω—å–æ–º—É, '
            f'—Ç–æ–º—É –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤–æ —Ä–∞–¥–∏–º–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ó—Ö –Ω–∞ –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π —Ä–∞—Ö—É–Ω–æ–∫.',
            message_id=call.message.message_id, chat_id=call.message.chat.id, reply_markup=keyboard, parse_mode='HTML',
            disable_web_page_preview=True)
        return

    if call.data == 'del_business_done':
        business = get_seans_business(u.id, m)
        if business is None:
            return

        passport = get_passport(call.from_user.id)
        all_businesses = get_all_businesses()
        index = business[0]
        del all_businesses[index]
        for i in range(len(all_businesses)):
            all_businesses[i][0] = i + 1
        del_table_businesses()
        db.insert(table_businesses)
        insert_all_businesses_l(all_businesses)
        amount = get_amount_of_businesses()
        del_business_g(all_businesses, amount)

        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤", callback_data="business")
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
        keyboard.add(callback_button)
        business_out = f'–ü–Ü–î–ü–†–ò–Ñ–ú–°–¢–í–û –ó–ê–ö–†–ò–¢–ï'
        bot.edit_message_text(business_out, -1001162793975, business[7], parse_mode='HTML')
        del (business_seans[call.from_user.id])
        bot.edit_message_text(text='–í–∏ –∑–∞–∫—Ä–∏–ª–∏ —Å–≤–æ—î –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ.', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)
        return
        # TODO –≤–∏–ª—É—á–µ–Ω–Ω—è –∑ –ø–∞—Å–ø–æ—Ä—Ç—ñ–≤

    if call.data == 'state_menu':
        state_menu_f(u, m)
        return

    if call.data in (
            '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä', '–ì—Ä–∞—Ñ', '–°–∫–∞—Ä–±–Ω–∏–∫', '–°—Ç–∞—Ä—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', '–ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', '–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü—å', '–í—ñ–∫–æ–Ω—Ç', '–ö–∞—Ä–±'):
        state_emps_name = None
        if call.data in ('–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä', '–ì—Ä–∞—Ñ', '–°–∫–∞—Ä–±–Ω–∏–∫'):
            head = True
            if call.data == '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä':
                short_ust = 'zh'
                per_name = '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞'
                state_emps_name = '–ñ–∞–Ω–¥–∞—Ä–º–∞–º–∏'
            elif call.data == '–ì—Ä–∞—Ñ':
                short_ust = 'gr'
                per_name = '–ì—Ä–∞—Ñ–∞'
                state_emps_name = '–ï—Ä–ª–∞–º–∏'
            elif call.data == '–°–∫–∞—Ä–±–Ω–∏–∫':
                short_ust = 'bank'
                per_name = '–°–∫–∞—Ä–±–Ω–∏–∫–∞'
                state_emps_name = '–ö–∞—Ä–±–∞–º–∏'
            else:
                return
        else:
            head = False
            if call.data in ('–°—Ç–∞—Ä—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', '–ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', '–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü—å'):
                short_ust = 'zh'
                per_name = '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞'
            elif call.data == '–í—ñ–∫–æ–Ω—Ç':
                short_ust = 'gr'
                per_name = '–í—ñ–∫–æ–Ω—Ç–∞'
            elif call.data == '–ö–∞—Ä–±':
                short_ust = 'bank'
                per_name = '–ö–∞—Ä–±–∞'
            else:
                return
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'stat_{short_ust}')
        keyboard.add(button)
        if head:
            button = types.InlineKeyboardButton(text=f'–ö–µ—Ä—É–≤–∞–Ω–Ω—è {state_emps_name}', callback_data=f'con_{short_ust}')
            keyboard.add(button)
        button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                            callback_data=f'document_check_{short_ust}')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, 'state_menu')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–ú–µ–Ω—é {per_name}.',
                              reply_markup=keyboard)
        return

    spl_data = call.data.split('_')
    if spl_data[0] == 'stat':
        inst = get_institution(inst_shorts[spl_data[1]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer = get_inst_func(inst[1])[:4]
        if len(spl_data) == 3:
            emp = get_employer(int(spl_data[2]))
            passport = get_passport(int(spl_data[2]))
            back_callback = f'state_emp_{spl_data[2]}_{spl_data[1]}'
        else:
            emp = get_employer(u.id)
            passport = get_passport(u.id)
            back_callback = emp[2]
        keyboard = menu_footer(types.InlineKeyboardMarkup(), f'{back_callback}')
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            doings_word = '–í–∏—Ä–æ–∫—ñ–≤ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ'
            try:
                am = zhan_queue[u.id]
            except:
                am = 0
                zhan_queue[u.id] = 0
            end = f'\n–í–∏—Ä–æ–∫—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É: {am}/{zhan_rank[emp[2]][4]}'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            doings_word = '–î—ñ–π –≤–∏–∫–æ–Ω–∞–Ω–æ'
            end = f''
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            doings_word = '–ó–≤—ñ—Ç—ñ–≤ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ'
            end = f''
        else:
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'{emp[2]}\n{user_link(passport[1], passport[2], passport[3])}'
                                   f'\n\n{doings_word} –∑–∞ –≤–µ—Å—å —á–∞—Å: {emp[3]}\n{doings_word} –∑–∞ —á–∞—Å –ø—ñ–¥–∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ: '
                                   f'{emp[4]}{end}',
                              reply_markup=keyboard, parse_mode='HTML')
        return

    if spl_data[0] == 'con':
        inst = get_institution(inst_shorts[spl_data[1]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer = get_inst_func(inst[1])[:4]
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            all_emps = '–ñ–∞–Ω–¥–∞—Ä–º—ñ–≤'
            new_emp = '–ù–æ–≤–æ–±—Ä–∞–Ω—Ü—è'
            msg_text = '–ñ–∞–Ω–¥–∞—Ä–º–∞–º–∏'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            all_emps = '–ï—Ä–ª—ñ–≤'
            new_emp = '–í—ñ–∫–æ–Ω—Ç–∞'
            msg_text = '–ï—Ä–ª–∞–º–∏'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            all_emps = '–ö–∞—Ä–±—ñ–≤'
            new_emp = '–ö–∞—Ä–±–∞'
            msg_text = '–ö–∞—Ä–±–∞–º–∏'
        else:
            return
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text=f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö {all_emps} —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–≤—ñ—Ç—É',
                                            callback_data=f'all_stat_{spl_data[1]}')
        keyboard.add(button)
        button = types.InlineKeyboardButton(text=f'–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ω–∞ —Å–∞–Ω {new_emp}',
                                            callback_data=f'new_{spl_data[1]}')
        keyboard.add(button)
        button = types.InlineKeyboardButton(text=f'–°–ø–∏—Å–æ–∫ {all_emps}', callback_data=f'list_of_{spl_data[1]}')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, get_employer(u.id)[2])
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è {msg_text}.',
                              reply_markup=keyboard)
        return

    if spl_data[0] == 'document' and spl_data[1] == 'check':
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó', callback_data='pass_check')
        keyboard.add(button)
        if spl_data[2] in ('zh', 'bank'):
            button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                                callback_data='acc_check')
            keyboard.add(button)
            san = get_zhan(u.id)[2]
        elif spl_data[2] == 'gr':
            san = get_erl(u.id)[2]
        else:
            san = 'state_menu'
        button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏—Ç—è–≥ –∑ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó',
                                            callback_data='extract_list')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, san)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–ú–µ–Ω—é –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.',
                              reply_markup=keyboard)
        return

    if spl_data[0] == 'all' and spl_data[1] == 'stat':
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥ –ø—ñ–¥–∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ',
                                            callback_data=f'zvit_{spl_data[2]}')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f'con_{spl_data[2]}')
        inst = get_institution(inst_shorts[spl_data[2]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer = get_inst_func(inst[1])[:4]
        all_emps = get_all_employers()
        msg_out = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –∂–∞–Ω–¥–∞—Ä–º—ñ–≤\n\n–ü–µ—Ä—à–∞ –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –ø–µ—Ä—ñ–æ–¥ –ø—ñ–¥–∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ, –¥—Ä—É–≥–∞ ‚Äî –∑–∞ –≤–µ—Å—å —á–∞—Å\n–ü–µ—Ä—ñ–æ–¥ ' \
                  f'–ø—ñ–¥–∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ ‚Äî {inst[7]}-{datetime.now().date().strftime("%d.%m.%Y")}\n\n'
        all_emps_sorted = sorted(all_emps, key=lambda x: len(get_passport(x[1])[2] + get_passport(x[1])[3]),
                                 reverse=True)
        name_len = len(get_passport(all_emps_sorted[0][1])[2] + get_passport(all_emps_sorted[0][1])[3])
        all_emps_sorted = sorted(all_emps, key=lambda x: x[3], reverse=True)
        per_len = len(str(all_emps_sorted[0][3]))
        all_emps_sorted = sorted(all_emps, key=lambda x: x[4], reverse=True)
        all_len = len(str(all_emps_sorted[0][4]))
        for i in all_emps:
            passport = get_passport(i[1])
            loc_name_len = len(passport[2] + passport[3])
            loc_per_len = len(str(i[3]))
            loc_all_len = len(str(i[4]))
            white1 = ' ' * (name_len - loc_name_len)
            white2 = ' ' * (per_len - loc_per_len)
            white3 = ' ' * (all_len - loc_all_len)
            msg_out += f'<code>{user_link(passport[1], passport[2], passport[3])}' \
                       f'{white1} {white3}{i[4]} {white2}{i[3]}</code>\n'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=msg_out, reply_markup=keyboard, parse_mode='HTML')

    if spl_data[0] == 'new':
        inst = get_institution(inst_shorts[spl_data[1]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer = get_inst_func(inst[1])[:4]
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            new_emp_name = '–ù–æ–≤–æ–±—Ä–∞–Ω—Ü—è –ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—ó'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            new_emp_name = '–í—ñ–∫–æ–Ω—Ç–∞'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            new_emp_name = '–ö–∞—Ä–±–∞'
        else:
            return
        bot.edit_message_text(
            f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞ —Å–∞–Ω {new_emp_name}. '
            f'<a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id –∞–∫–∞—É–Ω—Ç–∞ '
            f'–≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n{stop_text}.',
            chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            nonlocal new_emp, get_all_employers, insert_emp_l, insert_all_employers_g, get_employer
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å–∞–Ω {new_emp_name}')
                state_menu_f(u, m, False)
                return

            if not m.text.isdigit():
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Å–æ–±–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            id = int(m.text)
            new_emp = get_passport(id)
            if new_emp is None:
                bot.send_message(m.chat.id,
                                 f'–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –æ—Å–æ–±–∞ –Ω–µ –º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ø—á–º—ñ–Ω—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ '
                                 f'–∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            emp = get_employer(id)
            if emp:
                bot.send_message(m.chat.id,
                                 f'–¶–µ–π –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω —É–∂–µ —î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –≤–∞—à–æ—ó —É—Å—Ç–∞–Ω–æ–≤–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n{stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, new_emp_id)
                return

            try:
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='–ü—ñ–¥–ø–∏—Å–∞—Ç–∏', callback_data='done_new_zh')
                keyboard.add(button)
                button = types.InlineKeyboardButton(text='–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å', callback_data='cancel_new_zh')
                keyboard.add(button)
                bot.send_message(int(m.text),
                                 f'–í–∞—Å —Ö–æ—á—É—Ç—å –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞ —Å–∞–Ω {new_emp_name}. –ü–æ—Å—Ç–∞–≤—Ç–µ –ø—ñ–¥–ø–∏—Å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è '
                                 f'–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)
                bot.send_message(m.chat.id,
                                 f'{user_link(new_emp[1], new_emp[2], new_emp[3])} –æ—Ç—Ä–∏–º–∞–≤ '
                                 f'–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ù–æ–≤–æ–±—Ä–∞–Ω—Ü–µ–º. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.',
                                 parse_mode='HTML')
            except:
                bot.send_message(m.chat.id,
                                 '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –°–∏—Å—Ç–µ–º–∏. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —É –Ω—å–æ–≥–æ, —â–æ–± –≤—ñ–Ω '
                                 '–≤—ñ–¥–Ω–æ–≤–∏–≤ —á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é.')
            state_menu_f(u, m, False)

        register_next_step_handler(call.message, new_emp_id)
        return

    if spl_data[0] == 'done' and spl_data[1] == 'new':
        inst = get_institution(inst_shorts[spl_data[2]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer, new_emp = get_inst_func(inst[1])[:5]
        passport = get_passport(u.id)
        user = get_user(u.id)
        if passport is None:
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text=f"‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=f"menul")
            keyboard.add(callback_button)
            bot.edit_message_text(text='–£ –≤–∞—Å –Ω–µ–º–∞ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó', chat_id=m.chat.id, message_id=m.message_id,
                                  reply_markup=keyboard)
            return
        sans = passport[8].split(', ')
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            new_san = '–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü—å'
            doc = decree_new_zhan
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            new_san = '–í—ñ–∫–æ–Ω—Ç'
            doc = decree_new_erl
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            new_san = '–ö–∞—Ä–±'
            doc = decree_new_karb
        else:
            return
        if sans[0] == '–ë–µ–∑ —Å–∞–Ω—É' or sans[0] == '–ë–µ–∑—Ä–æ–±—ñ—Ç–Ω–∏–π':
            sans[0] = new_san
        else:
            sans.append(new_san)
        sans_all = get_sans(sans)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='menul')
        keyboard.add(button)
        bot.edit_message_text(f'–¢–µ–ø–µ—Ä –í–∏ {new_san}!', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)

        bill = 0
        us_rights = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
        pass_rights = ['0', '0', '0', '0', '0']
        for i in sans_all:
            bill += i[2]
            us_rights_buf = i[3].split()
            pass_rights_buf = i[4].split()
            for j in range(len(us_rights_buf)):
                us_rights[j] = str(int(us_rights_buf[j]) | int(us_rights[j]))
            for j in range(len(pass_rights_buf)):
                pass_rights[j] = str(int(pass_rights_buf[j]) | int(pass_rights[j]))

        passport[12] = ' '.join(pass_rights)
        user[6] = ' '.join(us_rights)
        old_san = passport[8]
        passport[8] = ', '.join(sans)
        passport[11] = bill
        insert_passport_a(passport)
        insert_user_a(user)
        out = f'{user_link(passport[1], passport[2], passport[3])}\n{old_san} ‚üπ {passport[8]}'
        # bot.send_message(-1001268255961, out, parse_mode='HTML')
        head = get_passport(inst[6])
        out = doc.replace('/link/', inst[5]).replace('/num/', str(inst[4] + 1)).replace(
            '/date/', datetime.now().date().strftime("%d.%m.%Y")).replace('/head_link/',
                                                                          f'{user_link(head[1], head[2], head[3])}'). \
            replace('/new_emp_acc_link/', f'{user_link(passport[1], passport[16], passport[17])}'). \
            replace('/new_emp_link/', f'{user_link(passport[1], passport[2], passport[3])}')
        bot.send_message(-1001124854070, out, parse_mode='HTML')
        new_emp(u)
        inst[4] += 1
        insert_institution_a(inst)
        return

    if spl_data[0] == 'cancel' and spl_data[1] == 'new':
        inst = get_institution(inst_shorts[spl_data[2]])
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            new_emp_name = '–ù–æ–≤–æ–±—Ä–∞–Ω—Ü—è –ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—ó'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            new_emp_name = '–í—ñ–∫–æ–Ω—Ç–∞'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            new_emp_name = '–ö–∞—Ä–±–∞'
        else:
            return
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='menu'))
        bot.edit_message_text(f'–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ –∑–∞–ø–∏—Ç—É', message_id=call.message.message_id,
                              chat_id=call.message.chat.id, reply_markup=keyboard)
        employer = get_passport(u.id)
        try:
            bot.send_message(inst[6],
                             f'{user_link(employer[1], employer[16], employer[17])} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ '
                             f'–∑–∞–ø–∏—Ç—É –Ω–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å–∞–Ω {new_emp_name}',
                             parse_mode='HTML')
        except:
            pass
        return

    if spl_data[0] == 'list' and spl_data[1] == 'of':
        inst = get_institution(inst_shorts[spl_data[2]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer, new_emp = get_inst_func(inst[1])[:5]
        emps = get_all_employers()
        keyboard = types.InlineKeyboardMarkup()
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            zh_lab = True
            msg_end = '–ñ–∞–Ω–¥–∞—Ä–º—ñ–≤\n\n–£–º–æ–≤–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è:\n–°–ñ ‚Äî –°—Ç–∞—Ä—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º\n–ú–ñ ‚Äî –ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º\n–ù–ë ‚Äî –ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü—å'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            zh_lab = False
            msg_end = '–ï—Ä–ª—ñ–≤'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            zh_lab = False
            msg_end = '–ö–∞—Ä–±—ñ–≤'
        else:
            return
        for i in emps[1:]:
            passport = get_passport(i[1])
            if zh_lab:
                zh_rank = f'{zhan_rank[i[2]][0]} ‚Äì '
            else:
                zh_rank = ''
            button = types.InlineKeyboardButton(text=f'{zh_rank}{passport[2]} {passport[3]}',
                                                callback_data=f'state_emp_{passport[1]}_{spl_data[2]}')
            keyboard.add(button)
        emp = get_employer(u.id)
        keyboard = menu_footer(keyboard, emp[2])
        bot.edit_message_text(
            text=f'–°–ø–∏—Å–æ–∫ {msg_end}',
            chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] == 'state' and spl_data[1] == 'emp':
        emp_id = int(spl_data[2])
        inst = get_institution(inst_shorts[spl_data[3]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer, new_emp = get_inst_func(inst[1])[:5]
        emp = get_employer(emp_id)
        passport = get_passport(emp_id)
        keyboard = types.InlineKeyboardMarkup()

        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            button = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –∑–≤–∞–Ω–Ω—è –ñ–∞–Ω–¥–∞—Ä–º–∞', callback_data='change_zhan_rank')
            keyboard.add(button)
            emp_name = '–ñ–∞–Ω–¥–∞—Ä–º–∞'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            emp_name = '–í—ñ–∫–æ–Ω—Ç–∞'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            emp_name = '–ö–∞—Ä–±–∞'
        else:
            return
        button = types.InlineKeyboardButton(text=f'–û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {emp_name}', callback_data=f'stat_zh_{emp_id}')
        keyboard.add(button)
        button = types.InlineKeyboardButton(text=f'–ó–≤—ñ–ª—å–Ω–∏—Ç–∏ {emp_name}', callback_data='del_zh')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f'list_of_{spl_data[3]}')
        bot.edit_message_text(text=f'{emp[2]}\n{user_link(passport[1], passport[2], passport[3])}',
                              chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data == 'change_zhan_rank':
        keyboard = types.InlineKeyboardMarkup()
        mess = m.text.split('\n')
        rank = mess[0]
        rank_l = zhan_rank[rank]
        u = m.entities[0].user
        for i in range(2):
            button = types.InlineKeyboardButton(text=rank_l[2][i], callback_data=rank_l[3][i])
            keyboard.add(button)
        keyboard = menu_footer(keyboard, f'zhandarm{u.id}')
        passport = get_passport(u.id)
        bot.edit_message_text(
            text=f'{rank}\n{user_link(passport[1], passport[2], passport[3])}\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ –∑–≤–∞–Ω–Ω—è '
                 f'–ñ–∞–Ω–¥–∞—Ä–º–∞',
            chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data[:5] == 'up_zh' and len(call.data) < 7:
        r = int(call.data[5])
        u = m.entities[0].user
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ü—ñ–¥–≤–∏—â–∏—Ç–∏', callback_data=f'up_zh_done{r}')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f'zhandarm{u.id}')
        passport = get_passport(u.id)
        if r == 1:
            rank = '–ú–æ–ª–æ–¥—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞'
        else:
            rank = '–°—Ç–∞—Ä—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞'
        bot.edit_message_text(
            text=f'–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ {user_link(passport[1], passport[16], passport[17])} '
                 f'–¥–æ –∑–≤–∞–Ω–Ω—è {rank}?',
            chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data[:10] == 'up_zh_done':
        r = int(call.data[10])
        u = m.entities[0].user
        passport = get_passport(u.id)
        user = get_user(u.id)
        if r == 1:
            rank = '–ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º'
            rank_g = '–ú–æ–ª–æ–¥—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞'
        else:
            rank = '–°—Ç–∞—Ä—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º'
            rank_g = '–°—Ç–∞—Ä—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞'
        new_san = passport[8].replace('–ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', rank).replace('–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü—å', rank)
        sans = new_san.split(', ')
        sans_all = get_sans(sans)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞', callback_data='–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä')
        keyboard.add(button)
        bot.edit_message_text(
            f'{user_link(passport[1], passport[2], passport[3])} –ø—ñ–¥–≤–∏—â–µ–Ω–∏–π —É –∑–≤–∞–Ω–Ω—ñ –¥–æ {rank_g}',
            message_id=call.message.message_id,
            chat_id=call.message.chat.id, parse_mode='HTML', reply_markup=keyboard)

        bill = 0
        us_rights = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
        pass_rights = ['0', '0', '0', '0', '0']
        for i in sans_all:
            bill += i[2]
            us_rights_buf = i[3].split()
            pass_rights_buf = i[4].split()
            for j in range(len(us_rights_buf)):
                us_rights[j] = str(int(us_rights_buf[j]) | int(us_rights[j]))
            for j in range(len(pass_rights_buf)):
                pass_rights[j] = str(int(pass_rights_buf[j]) | int(pass_rights[j]))

        passport[12] = ' '.join(pass_rights)
        user[6] = ' '.join(us_rights)
        old_san = passport[8]
        passport[8] = ', '.join(sans)
        passport[11] = bill
        insert_passport_a(passport)
        insert_user_a(user)
        out = f'{user_link(passport[1], passport[2], passport[3])}\n{old_san} ‚üπ {passport[8]}'
        # bot.send_message(-1001268255961, out, parse_mode='HTML')
        inst = get_institution('–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è')
        head = get_passport(inst[6])
        out = decree_up_zhan.replace('/link/', inst[5]).replace('/num/', str(inst[4] + 1)).replace(
            '/date/', datetime.now().date().strftime("%d.%m.%Y")).replace('/prot_link/',
                                                                          f'<a href="tg://user?id={head[1]}">{head[2]} '
                                                                          f'{head[3]}</a>').replace(
            '/up_zhan_acc_link/', f'{user_link(passport[1], passport[16], passport[17])}').replace(
            '/rank_g/', rank_g)
        bot.send_message(-1001124854070, out, parse_mode='HTML')
        emp = get_zhan(u.id)
        emp[2] = rank
        insert_zhan_a(emp)
        inst[4] += 1
        insert_institution_a(inst)
        return

    if call.data[:7] == 'down_zh' and len(call.data) < 9:
        r = int(call.data[7])
        u = m.entities[0].user
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ü–æ–Ω–∏–∑–∏—Ç–∏', callback_data=f'down_zh_done{r}')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f'zhandarm{u.id}')
        passport = get_passport(u.id)
        if r == 1:
            rank = '–ú–æ–ª–æ–¥—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞'
        else:
            rank = '–ù–æ–≤–æ–±—Ä–∞–Ω—Ü—è'
        bot.edit_message_text(
            text=f'–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç–∏ {user_link(passport[1], passport[16], passport[17])} '
                 f'–¥–æ –∑–≤–∞–Ω–Ω—è {rank}?',
            chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data[:12] == 'down_zh_done':
        r = int(call.data[12])
        u = m.entities[0].user
        passport = get_passport(u.id)
        user = get_user(u.id)
        if r == 1:
            rank = '–ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º'
            rank_g = '–ú–æ–ª–æ–¥—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞'
        else:
            rank = '–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü—å'
            rank_g = '–ù–æ–≤–æ–±—Ä–∞–Ω—Ü—è'
        new_san = passport[8].replace('–ú–æ–ª–æ–¥—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', rank).replace('–°—Ç–∞—Ä—à–∏–π –ñ–∞–Ω–¥–∞—Ä–º', rank)
        sans = new_san.split(', ')
        sans_all = get_sans(sans)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞', callback_data='–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä')
        keyboard.add(button)
        bot.edit_message_text(
            f'{user_link(passport[1], passport[16], passport[17])} –ø–æ–Ω–∏–∂–µ–Ω–∏–π —É –∑–≤–∞–Ω–Ω—ñ –¥–æ {rank_g}',
            message_id=call.message.message_id,
            chat_id=call.message.chat.id, parse_mode='HTML', reply_markup=keyboard)

        bill = 0
        us_rights = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
        pass_rights = ['0', '0', '0', '0', '0']
        for i in sans_all:
            bill += i[2]
            us_rights_buf = i[3].split()
            pass_rights_buf = i[4].split()
            for j in range(len(us_rights_buf)):
                us_rights[j] = str(int(us_rights_buf[j]) | int(us_rights[j]))
            for j in range(len(pass_rights_buf)):
                pass_rights[j] = str(int(pass_rights_buf[j]) | int(pass_rights[j]))

        passport[12] = ' '.join(pass_rights)
        user[6] = ' '.join(us_rights)
        old_san = passport[8]
        passport[8] = ', '.join(sans)
        passport[11] = bill
        insert_passport_a(passport)
        insert_user_a(user)
        out = f'{user_link(passport[1], passport[2], passport[3])}\n{old_san} ‚üπ {passport[8]}'
        # bot.send_message(-1001268255961, out, parse_mode='HTML')
        inst = get_institution('–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è')
        head = get_passport(inst[6])
        out = decree_down_zhan.replace('/link/', inst[5]).replace('/num/', str(inst[4] + 1)).replace(
            '/date/', datetime.now().date().strftime("%d.%m.%Y")).replace('/prot_link/',
                                                                          f'<a href="tg://user?id={head[1]}">{head[2]} '
                                                                          f'{head[3]}</a>').replace(
            '/down_zhan_acc_link/', f'{user_link(passport[1], passport[16], passport[17])}').replace(
            '/rank_g/', rank_g)
        bot.send_message(-1001124854070, out, parse_mode='HTML')
        emp = get_zhan(u.id)
        emp[2] = rank
        insert_zhan_a(emp)
        inst[4] += 1
        insert_institution_a(inst)
        return

    if spl_data[0] == 'del':
        inst = get_institution(inst_shorts[spl_data[1]])
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            emp_name = '–ñ–∞–Ω–¥–∞—Ä–º–∞'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            emp_name = '–í—ñ–∫–æ–Ω—Ç–∞'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            emp_name = '–ö–∞—Ä–±–∞'
        else:
            return
        u = m.entities[0].user
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ó–≤—ñ–ª—å–Ω–∏—Ç–∏', callback_data=f'done_del_{spl_data[1]}')
        keyboard.add(button)
        keyboard = menu_footer(keyboard, f'state_emp_{u.id}_{spl_data[1]}')
        passport = get_passport(u.id)
        bot.edit_message_text(
            text=f'–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ {user_link(passport[1], passport[16], passport[17])} '
                 f'–∑ —Å–∞–Ω—É {emp_name}?',
            chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if spl_data[0] == 'done' and spl_data[1] == 'del':
        inst = get_institution(inst_shorts[spl_data[2]])
        get_all_employers, insert_emp_l, insert_all_employers_g, get_employer, new_emp, del_table_inst, table_inst, \
        insert_all_employers_l, get_amount_of_emps, del_emp_g = get_inst_func(
            inst[1])
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            emp_name = '–ñ–∞–Ω–¥–∞—Ä–º–∞'
            doc = decree_del_zhan
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            emp_name = '–í—ñ–∫–æ–Ω—Ç–∞'
            doc = decree_del_erl
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            emp_name = '–ö–∞—Ä–±–∞'
            doc = decree_del_karb
        else:
            return
        u = m.entities[0].user
        passport = get_passport(u.id)
        user = get_user(u.id)
        emp = get_employer(u.id)
        sans = passport[8].split(', ')
        del (sans[sans.index(emp[2])])
        if len(sans) == 0:
            sans.append('–ë–µ–∑ —Å–∞–Ω—É')
        sans_all = get_sans(sans)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é –¥–µ—Ä–∂—Å–ª—É–∂–±–æ–≤—Ü—è', callback_data=get_employer(u.id)[2])
        keyboard.add(button)
        bot.edit_message_text(
            f'{user_link(passport[1], passport[2], passport[3])} –∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π –∑ —Å–∞–Ω—É {emp_name}.',
            message_id=call.message.message_id,
            chat_id=call.message.chat.id, parse_mode='HTML', reply_markup=keyboard)
        bill = 0
        us_rights = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
        pass_rights = ['0', '0', '0', '0', '0']
        for i in sans_all:
            bill += i[2]
            us_rights_buf = i[3].split()
            pass_rights_buf = i[4].split()
            for j in range(len(us_rights_buf)):
                us_rights[j] = str(int(us_rights_buf[j]) | int(us_rights[j]))
            for j in range(len(pass_rights_buf)):
                pass_rights[j] = str(int(pass_rights_buf[j]) | int(pass_rights[j]))

        passport[12] = ' '.join(pass_rights)
        user[6] = ' '.join(us_rights)
        old_san = passport[8]
        passport[8] = ', '.join(sans)
        passport[11] = bill
        insert_passport_a(passport)
        insert_user_a(user)
        out = f'{user_link(passport[1], passport[2], passport[3])}\n{old_san} ‚üπ {passport[8]}'
        # bot.send_message(-1001268255961, out, parse_mode='HTML')
        inst = get_institution('–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è')
        head = get_passport(inst[6])
        out = doc.replace('/link/', inst[5]).replace('/num/', str(inst[4] + 1)).replace(
            '/date/', datetime.now().date().strftime("%d.%m.%Y")). \
            replace('/head_link/', f'{user_link(head[1], head[2], head[3])}').replace(
            '/del_emp_acc_link/', f'{user_link(passport[1], passport[16], passport[17])}')
        bot.send_message(-1001124854070, out, parse_mode='HTML')

        all_emps = get_all_employers()
        del (all_emps[emp[0] - 1])
        for i in range(len(all_emps)):
            all_emps[i][0] = i + 1
        del_table_inst()
        db.insert(table_inst)
        insert_all_employers_l(all_emps)
        amount = get_amount_of_emps()
        del_emp_g(all_emps, amount)

        inst[4] += 1
        insert_institution_a(inst)
        return

    if call.data == 'pass_check':
        bot.edit_message_text(
            f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —á–∏–π –ø–∞—Å–ø–æ—Ä—Ç –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏. '
            f'<a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id –∞–∫–∞—É–Ω—Ç–∞ '
            f'–≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n{stop_text}',
            chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –ø–∞—Å–ø–æ—Ä—Ç—É')
                state_menu_f(u, m, False)
                return
            keyboard = menu_footer(types.InlineKeyboardMarkup(), '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä')
            bot.send_message(m.chat.id, get_str_passport(m.text), parse_mode='HTML', reply_markup=keyboard)

        register_next_step_handler(call.message, new_emp_id)
        return

    if call.data == 'acc_check':
        bot.edit_message_text(
            f'–í–≤–µ–¥—ñ—Ç—å id –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó, —á–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏. '
            f'<a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id –∞–∫–∞—É–Ω—Ç–∞ '
            f'–≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n{stop_text}.',
            chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')

        def new_emp_id(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–∞—Ö—É–Ω–∫—É')
                state_menu_f(u, m, False)
                return
            keyboard = menu_footer(types.InlineKeyboardMarkup(), '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä')
            bot.send_message(m.chat.id, get_str_acc(m.text), parse_mode='HTML', reply_markup=keyboard)

        register_next_step_handler(call.message, new_emp_id)
        return

    if spl_data[0] == 'zvit':
        inst = get_institution(inst_shorts[spl_data[1]])
        if time.time() - datetime.strptime(inst[7], '%d.%m.%Y').timestamp() < 259200:
            bot.answer_callback_query(callback_query_id=call.id,
                                      text='–ù–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–≤—ñ—Ç–∏ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ —É 3 –¥–Ω—ñ', show_alert=True)
            return
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id,
                              text=f'–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–≤—ñ—Ç—É.\n–Ø–∫—â–æ –≤–∏ –Ω–µ –±–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä, –≤–≤–µ–¥—ñ—Ç—å '
                                   f'<code>–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤</code>.\n{stop_text}',
                              parse_mode='HTML')

        def zvit_done(m):
            nonlocal inst
            if m.text == '–°–¢–û–ü':
                keyboard = menu_footer(types.InlineKeyboardMarkup(), f'all_stat_{spl_data[1]}', '‚¨ÖÔ∏è –î–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–≤—ñ—Ç—É.', reply_markup=keyboard)
                return
            msg_out = f'–ó–≤—ñ—Ç –ø—Ä–æ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å {inst[2]} –∑–∞ –ø–µ—Ä—ñ–æ–¥ ' \
                      f'{inst[7]}-{datetime.now().date().strftime("%d.%m.%Y")}\n\n–í–∏–∫–æ–Ω–∞–Ω–æ –¥—ñ–π –∑–∞ —á–∞—Å –ø—ñ–¥–∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ:\n\n'

            get_all_employers, insert_emp_l, insert_all_employers_g = get_inst_func(inst[1])[:3]
            all_employers = get_all_employers()
            all_employers_sorted = sorted(all_employers,
                                          key=lambda x: len(get_passport(x[1])[2] + get_passport(x[1])[3]),
                                          reverse=True)
            name_len = len(get_passport(all_employers_sorted[0][1])[2] + get_passport(all_employers_sorted[0][1])[3])
            all_employers_sorted = sorted(all_employers, key=lambda x: x[3], reverse=True)
            per_len = len(str(all_employers_sorted[0][3]))
            for i in all_employers:
                passport = get_passport(i[1])
                loc_name_len = len(passport[2] + passport[3])
                loc_per_len = len(str(i[4]))
                white1 = ' ' * (name_len - loc_name_len)
                white2 = ' ' * (per_len - loc_per_len)
                msg_out += f'<code>{user_link(passport[1], passport[2], passport[3])}' \
                           f'{white1} {white2}{i[4]}</code>\n'
            passport = get_passport(m.from_user.id)

            if m.text != '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤':
                msg_out += f'\n–ö–æ–º–µ–Ω—Ç–∞—Ä:\n{m.text}\n'
            msg_out += f'\n–ü—ñ–¥–ø–∏—Å–∞–Ω–æ:\n{user_link(passport[1], passport[2], passport[3])}'
            message = bot.send_message(-1001511247539, msg_out, parse_mode='HTML')
            msg_out = f'–ó–≤—ñ—Ç –ø—Ä–æ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å {inst[2]} –∑–∞ –ø–µ—Ä—ñ–æ–¥ {inst[7]}-{datetime.now().date().strftime("%d.%m.%Y")}'
            n = bot.send_message(-1001543732225, msg_out, parse_mode='HTML').message_id
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç',
                                                url=f't.me/yachminiya_test_bot?start=zvit_{n}_{message.message_id}')
            keyboard.add(button)
            bot.edit_message_reply_markup(-1001543732225, n, reply_markup=keyboard)
            keyboard = menu_footer(types.InlineKeyboardMarkup(), all_employers[0][2], '–î–æ –º–µ–Ω—é –¥–µ—Ä–∂—Å–ª—É–∂–±–æ–≤—Ü—è')
            bot.send_message(u.id,
                             f'<a href="https://t.me/c/1543732225/{n}">–ó–≤—ñ—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ</a>. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ '
                             f'–≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=keyboard, parse_mode='HTML')
            for i in all_employers:
                i[4] = 0
                insert_emp_l(i)
            insert_all_employers_g(all_employers)
            inst[7] = f'{datetime.now().date().strftime("%d.%m.%Y")}'
            insert_institution_a(inst)

        register_next_step_handler(m, zvit_done)
        return

    if spl_data[0] == 'finance' and spl_data[1] == 'zvit':
        passport = get_passport(u.id)
        if passport is None:
            return
        bot.edit_message_reply_markup(m.chat.id, m.message_id, reply_markup=None)
        m_id = int(spl_data[2])
        msg = bot.forward_message(thrash, -1001543732225, m_id)
        zvit_text = msg.text

        def get_am_of_money(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è')
                main_menu(m, False)
                return
            if not m.text.isdigit():
                m = bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É. {stop_text}')
                register_next_step_handler(m, get_am_of_money)
                return
            am = int(m.text)
            if am == 0:
                m = bot.send_message(m.chat.id, f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω—É–ª—å–æ–≤–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É. {stop_text}')
                register_next_step_handler(m, get_am_of_money)
                return
            if am > 1000000:
                m = bot.send_message(m.chat.id, f'–í–≤–µ–¥–µ–Ω–µ –∑–∞–≤–µ–ª–∏–∫–µ —á–∏—Å–ª–æ —è—á–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É. {stop_text}')
                register_next_step_handler(m, get_am_of_money)
                return

            def get_comment(m):
                nonlocal zvit_text, am, passport, u
                if m.text == '–°–¢–û–ü':
                    bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è')
                    main_menu(m, False)
                    return
                if len(m.text) > 2000:
                    m = bot.send_message(m.chat.id, f'–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. {stop_text}')
                    register_next_step_handler(m, get_comment)
                    return
                ln = '\n'
                msg_out = f'–ó–≤—ñ—Ç –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∞—Ö –∑–≤—ñ—Ç—É ' \
                          f'{" ".join(zvit_text.split(ln)[0].split()[1:])}\n'
                msg_out += f'\n–°—É–º–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {am} {glas(am)}\n'
                msg_out += f'\n–ö–æ–º–µ–Ω—Ç–∞—Ä:\n{m.text}\n'
                msg_out += f'\n–ü—ñ–¥–ø–∏—Å–∞–Ω–æ:\n{user_link(passport[1], passport[2], passport[3])}'
                m = bot.send_message(-1001511247539, msg_out, parse_mode='HTML')
                msg_out = f'{zvit_text}\n\n–ó–≤—ñ—Ç –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∞—Ö –∑–≤—ñ—Ç—É ' \
                          f'{" ".join(zvit_text.split()[1:-3])}\n' \
                          f'–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {datetime.now().date().strftime("%d.%m.%Y")}'
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å',
                                                        url=f't.me/yachminiya_test_bot?start=zvitd_'
                                                            f'{spl_data[2]}_{spl_data[3]}'))
                keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤',
                                                        url=f't.me/yachminiya_test_bot?start=finzvit_'
                                                            f'{spl_data[2]}_{m.id}'))
                bot.edit_message_text(text=msg_out, chat_id=-1001543732225, message_id=spl_data[2],
                                      reply_markup=keyboard, parse_mode='HTML')
                inst = get_institution(inst_shorts[" ".join(zvit_text.split()[3:-3])])
                try:
                    keyboard = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç',
                                                        url=f'https://t.me/c/1543732225/{spl_data[2]}')
                    keyboard.add(button)
                    bot.send_message(inst[6],
                                     f"–£—Å—Ç–∞–Ω–æ–≤–∞ <b>{inst[1]}</b> –æ—Ç—Ä–∏–º–∞–ª–∞ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –∑–∞ –ø–µ—Ä—ñ–æ–¥ "
                                     f"{zvit_text.split()[-1]}. –í–∏ –∑–æ–±–æ–≤'—è–∑–∞–Ω—ñ –Ω–∞–¥–∞—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è "
                                     f"–æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏. –î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, –≤–∏ –±—É–¥–µ—Ç–µ "
                                     f"–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ "
                                     f"–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ –∑–≤—ñ—Ç–∞–º–∏. –¢–∞–º –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≥–ª—è–¥—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É, "
                                     f"—è–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å —Å—é–¥–∏.\n\n–£–í–ê–ì–ê!\n–Ø–∫—â–æ –≤–∏ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–µ –∑–≤—ñ—Ç –ø—Ä–æ—Ç—è–≥–æ–º "
                                     f"–Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 3 –¥–Ω—ñ–≤, –≤–∏ –º–æ–∂–µ—Ç–µ –±—É—Ç–∏ –ø—Ä–∏—Ç—è–≥–Ω—É—Ç–∏ –¥–æ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ.",
                                     reply_markup=keyboard, parse_mode='HTML')
                except Exception as e:
                    print(e)
                bot.send_message(u.id,
                                 f'<a href="https://t.me/c/1543732225/{spl_data[2]}">–ó–≤—ñ—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ</a>. –í–∏ –º–æ–∂–µ—Ç–µ '
                                 f'–ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=keyboard, parse_mode='HTML')
                inst[3] += am
                insert_institution_a(inst)

            m = bot.send_message(m.chat.id,
                                 f"–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)\n{stop_text}",
                                 parse_mode='HTML')
            register_next_step_handler(m, get_comment)

        m = bot.send_message(m.chat.id, f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∏. '
                                        f'{stop_text}', parse_mode='HTML')
        register_next_step_handler(m, get_am_of_money)
        return

    if spl_data[0] == 'finzvit':
        bot.edit_message_reply_markup(m.chat.id, m.message_id, reply_markup=None)
        m_id = spl_data[3]
        bot.copy_message(m.chat.id, -1001511247539, int(m_id))
        mess_id = int(spl_data[1])
        msg = bot.forward_message(thrash, -1001543732225, mess_id)
        zvit_text = msg.text
        inst = get_institution(inst_shorts[" ".join(zvit_text.split('\n')[0].split()[3:-3])])
        if inst[1] == '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
            emp_name = '–ñ–∞–Ω–¥–∞—Ä–º–∞–º–∏'
            emp_name_1 = '–ñ–∞–Ω–¥–∞—Ä–º—ñ–≤'
            emp_name_2 = '–ñ–∞–Ω–¥–∞—Ä–º–∞'
        elif inst[1] == '–ì—Ä–∞—Ñ—Å—Ç–≤–æ':
            emp_name = '–í—ñ–∫–æ–Ω—Ç–∞–º–∏'
            emp_name_1 = '–í—ñ–∫–æ–Ω—Ç—ñ–≤'
            emp_name_2 = '–í—ñ–∫–æ–Ω—Ç–∞'
        elif inst[1] == '–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫':
            emp_name = '–ö–∞—Ä–±–∞–º–∏'
            emp_name_1 = '–ö–∞—Ä–±—ñ–≤'
            emp_name_2 = '–ö–∞—Ä–±–∞'
        else:
            return

        msg_out = '–ó–≥—ñ–¥–Ω–æ –∑—ñ –∑–≤—ñ—Ç–∞–º–∏ –ø—Ä–æ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑–¥—ñ–π—Å–Ω—ñ—Ç—å —Ä–æ–∑–ø–æ–¥—ñ–ª –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤ –º—ñ–∂ ' \
                  f'{emp_name} {inst[2]}\n–°–ø–∏—Å–æ–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤:\n\n'
        get_employers, insert_emp_l, insert_all_employers_g = get_inst_func(inst[1])[:3]
        emps = get_employers()
        for i in emps:
            passport = get_passport(i[1])
            msg_out += f'{user_link(passport[1], passport[2], passport[3])}\n'
        msg_out += f'\n–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ–∂–Ω–æ–º—É —ñ–∑ {emp_name_1} —Å—Ç—Ä–æ–≥–æ —É —Ç–æ–º—É –∂ ' \
                   f'–ø–æ—Ä—è–¥–∫—É, —â–æ —ñ –≤ —Ü—å–æ–º—É –ø–æ–≤—ñ–ª–æ–º–ª–µ–Ω–Ω—ñ. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ {emp_name_2} ‚Äî –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞. –ü—Ä–∏–∫–ª–∞–¥.'
        m = bot.send_message(m.chat.id, msg_out, parse_mode='HTML')

        def get_msg(m):
            if m.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫–æ—à—Ç—ñ–≤')
                main_menu(m, False)
                return

            spl_text = m.text.split('\n')
            moneys_list = []
            for i in spl_text:
                if i.isdigit():
                    moneys_list.append(int(i))
                else:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                    register_next_step_handler(m, get_msg)
                    return

            if len(moneys_list) != len(emps):
                bot.send_message(m.chat.id, f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –º–∞—î –±—É—Ç–∏ —Ä—ñ–≤–Ω–æ—é –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {emp_name_2}')
                register_next_step_handler(m, get_msg)
                return

            m = bot.send_message(m.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–≤—ñ—Ç—É.')

            def get_comm(m):
                nonlocal emps
                if m.text == '–°–¢–û–ü':
                    bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫–æ—à—Ç—ñ–≤')
                    main_menu(m, False)
                    return
                m_id = int(spl_data[1])
                msg = bot.forward_message(thrash, -1001543732225, m_id)
                zvit_text = msg.text
                passport = get_passport(m.from_user.id)

                ln = '\n'
                msg_out = f'–ó–≤—ñ—Ç –ø—Ä–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–æ—à—Ç—ñ–≤ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∞—Ö –∑–≤—ñ—Ç—É –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑–∞ ' \
                          f'{zvit_text.split(ln)[3].split(" ")[1]}\n\n'

                all_employers_sorted = sorted(emps,
                                              key=lambda x: len(get_passport(x[1])[2] + get_passport(x[1])[3]),
                                              reverse=True)
                for i in emps:
                    i.append(moneys_list[i[0] - 1])
                name_len = len(
                    get_passport(all_employers_sorted[0][1])[2] + get_passport(all_employers_sorted[0][1])[3])
                all_employers_sorted = sorted(emps, key=lambda x: x[-1], reverse=True)
                per_len = len(str(all_employers_sorted[0][-1]))
                for i in emps:
                    passport = get_passport(i[1])
                    loc_name_len = len(passport[2] + passport[3])
                    loc_per_len = len(str(i[4]))
                    white1 = ' ' * (name_len - loc_name_len)
                    white2 = ' ' * (per_len - loc_per_len)
                    msg_out += f'<code>{user_link(passport[1], passport[2], passport[3])}' \
                               f'{white1} {white2}{i[4]}</code>\n'

                passport = get_passport(m.from_user.id)
                msg_out += f'\n–ö–æ–º–µ–Ω—Ç–∞—Ä:\n{m.text}\n'
                msg_out += f'\n–ü—ñ–¥–ø–∏—Å–∞–Ω–æ:\n{user_link(passport[1], passport[2], passport[3])}'
                m = bot.send_message(-1001511247539, msg_out, parse_mode='HTML')
                msg_out = f'{zvit_text}\n\n–ó–≤—ñ—Ç –ø—Ä–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–æ—à—Ç—ñ–≤ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∞—Ö –∑–≤—ñ—Ç—É –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑–∞ ' \
                          f'{zvit_text.split(ln)[3].split(" ")[1]}\n' \
                          f'–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {datetime.now().date().strftime("%d.%m.%Y")}'
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å',
                                                        url=f't.me/yachminiya_test_bot?start=zvitd_'
                                                            f'{spl_data[1]}_{spl_data[3]}'))
                keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤',
                                                        url=f't.me/yachminiya_test_bot?start=finzvitd_'
                                                            f'{spl_data[1]}_{spl_data[2]}'))
                keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–æ—à—Ç—ñ–≤',
                                                        url=f't.me/yachminiya_test_bot?start=rozp_'
                                                            f'{spl_data[1]}_{m.id}'))
                bot.edit_message_text(text=msg_out, chat_id=-1001543732225, message_id=spl_data[1],
                                      reply_markup=keyboard, parse_mode='HTML')

                '''
                all_passports = get_all_passports()
                for i in range(len(emps)):
                    passport = get_passport(emps[i][1])
                    passport[9] += moneys_list[i]
                    insert_passport_l(passport)
                    all_passports[passport[0] - 1][9] += moneys_list[i]
                insert_all_passports_g(all_passports)'''

            register_next_step_handler(m, get_comm)

        register_next_step_handler(m, get_msg)
        return

    if call.data == 'prostir_menu':
        prostir_menu_f(u, m)
        return

    if spl_data[0] == 'private' and spl_data[1] in ('chats', 'channels'):
        if spl_data[1] == 'chats':
            all_ch = get_all_chats()
            adnum = 13
            str_in0 = 'chat'
            str_in1 = '—á–∞—Ç—ñ–≤'
            str_in2 = '—á–∞—Ç–∏'
            str_in3 = ". –ß–∞—Ç –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç, —ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞—Ç–∏ –π–æ–≥–æ."
        else:
            all_ch = get_all_channels()
            adnum = 7
            str_in0 = 'channel'
            str_in1 = '–∫–∞–Ω–∞–ª—ñ–≤'
            str_in2 = '–∫–∞–Ω–∞–ª–∏'
            str_in3 = " —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª—ñ. " \
                      "–ö–∞–Ω–∞–ª –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç, —ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞—Ç–∏ –π–æ–≥–æ."
        keyboard = types.InlineKeyboardMarkup()
        buttons = []
        for i in all_ch:
            if str(call.from_user.id) in i[adnum].split():
                but = types.InlineKeyboardButton(i[2], callback_data=f'private_{str_in0}_{i[1]}')
                buttons.append(but)
        n = int(spl_data[2])
        ln = 5 + n * 5
        zero = False
        more = True
        if len(buttons) == 0:
            zero = True
        elif len(buttons) <= ln:
            more = False
            ln = len(buttons)

        if zero:
            msg_text = f'–£ –≤–∞—Å –Ω–µ–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö {str_in1}. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É —è–∫–∏–π—Å—å –∑—ñ —Å–≤–æ—ó—Ö {str_in1}{str_in3}'
            keyboard = menu_footer(keyboard, "prostir_menu")
            bot.edit_message_text(msg_text, m.chat.id, m.message_id, reply_markup=keyboard, parse_mode='HTML')
            return
        if more:
            for i in range(n * 5, ln):
                keyboard.keyboard.append([buttons[i]])
            if n:
                but0 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'private_{str_in0}s_{n - 1}')
            else:
                but0 = types.InlineKeyboardButton('‚è∫', callback_data=f'empty')
            but1 = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'private_{str_in0}s_{n + 1}')
            keyboard.keyboard.append([but0, but1])
            msg_text = f'–í–∞—à—ñ –ø—Ä–∏–≤–∞—Ç–Ω—ñ {str_in2}. [{1 + n * 5}-{ln}]'
        else:
            for i in range(n * 5, ln):
                keyboard.keyboard.append([buttons[i]])
            if n:
                but0 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'private_{str_in0}s_{n - 1}')
            else:
                but0 = types.InlineKeyboardButton('‚è∫', callback_data=f'empty')
            but1 = types.InlineKeyboardButton('‚è∫', callback_data=f'empty')
            keyboard.keyboard.append([but0, but1])
            msg_text = f'–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö {str_in1}. [{1 + n * 5}-{ln}]'

        keyboard = menu_footer(keyboard, "prostir_menu")
        bot.edit_message_text(msg_text, m.chat.id, m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if call.data == 'empty':
        bot.answer_callback_query(call.id, text='–¶—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î –¥—ñ–π, –æ–∫—Ä—ñ–º –ø–æ–∫–∞–∑—É —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. '
                                                '–ù–µ –Ω–∞—Ç–∏—Å–∫–∞–π —ó—ó, –±—É–¥—å –ª–∞—Å–∫–∞.', show_alert=True)
        return

    if call.data == 'in_development':
        bot.answer_callback_query(call.id, text='–Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ñ—É–Ω–∫—Ü—ñ—è —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —â–µ '
                                                '–Ω–µ –≥–æ—Ç–æ–≤–∞, —ñ –Ω–∞—Ä–∞–∑—ñ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —ó—ó —Ä–æ–∑—Ä–æ–±–∫–∞.', show_alert=True)
        return

    if spl_data[0] == 'private' and spl_data[1] in ('chat', 'channel') and len(spl_data) < 4:
        if spl_data[1] == 'chat':
            check = True
            ch = get_chat(int(spl_data[2]))
            is_on = 8
            ch_name = 'chat'
            ch_name1 = '—á–∞—Ç—ñ'
            own = 7
            linked = 14
            link = 4
            ch_name2 = '–∫–∞–Ω–∞–ª—É'
            ch_name3 = '–ß–∞—Ç'
        else:
            check = False
            ch = get_channel(int(spl_data[2]))
            is_on = 6
            ch_name = 'channel'
            ch_name1 = '–∫–∞–Ω–∞–ª—ñ'
            own = 5
            linked = 8
            link = 3
            ch_name2 = '—á–∞—Ç—É'
            ch_name3 = '–ö–∞–Ω–∞–ª'

        keyboard = types.InlineKeyboardMarkup()

        if ch[is_on]:
            status = '–í–≤—ñ–º–∫–Ω–µ–Ω–∏–π'
        else:
            status = '–í–≤–∏–º–∫–Ω–µ–Ω–∏–π'

        if ch[own] == call.from_user.id:
            if ch[is_on]:
                keyboard.add(types.InlineKeyboardButton(f'–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞ –≤ {ch_name1}',
                                                        callback_data=f'{ch_name}_turn_off_{spl_data[2]}'))
            else:
                keyboard.add(types.InlineKeyboardButton(f'–í–≤—ñ–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞ –≤ {ch_name1}',
                                                        callback_data=f'{ch_name}_turn_on_{spl_data[2]}'))

            keyboard.add(types.InlineKeyboardButton(f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏', callback_data=f'{ch_name}_admins_{spl_data[2]}'))

            keyboard.add(types.InlineKeyboardButton(f"–ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ {ch_name2}",
                                                    callback_data=f'{ch_name}_linking_{spl_data[2]}'))

            keyboard.add(types.InlineKeyboardButton(f'–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó',
                                                    callback_data=f'{ch_name}_prostir_{spl_data[2]}'))

            if check:
                keyboard.add(types.InlineKeyboardButton(f"‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞",
                                                        callback_data=f'{call.data}_next'))
            else:
                keyboard.add(types.InlineKeyboardButton(f"–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç –∑ —Ä–µ–∞–∫—Ü—ñ—è–º–∏",
                                                        callback_data=f'channel_post_{spl_data[2]}'))
        else:
            if check:
                keyboard.add(
                    types.InlineKeyboardButton(f'–¢—Ä–∏–≥–µ—Ä–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó',
                                               callback_data='in_development')) # f'{ch_name}_reptrig_{spl_data[2]}'
                keyboard.add(
                    types.InlineKeyboardButton(f'–¢—Ä–∏–≥–µ—Ä–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å',
                                               callback_data=f'{ch_name}_messtrig_{spl_data[2]}'))
                keyboard.add(
                    types.InlineKeyboardButton(f'–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                               callback_data=f'{ch_name}_welcmess_{spl_data[2]}'))
            else:
                keyboard.add(types.InlineKeyboardButton(f"–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç –∑ —Ä–µ–∞–∫—Ü—ñ—è–º–∏",
                                                        callback_data=f'channel_post_{spl_data[2]}'))

        if ch[linked]:
            linked = f"–ü—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name2}"
        else:
            linked = f"–ù–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name2}"

        keyboard = menu_footer(keyboard, f'private_{spl_data[1]}s_0')
        bot.edit_message_text(f'{ch_name3} {ch[2]}\n–°—Ç–∞—Ç—É—Å: {status}\n{linked}', message_id=m.message_id,
                              chat_id=m.chat.id, reply_markup=keyboard)
        return

    if spl_data[0] == 'private' and spl_data[1] in ('chat', 'channel') and spl_data[3] == 'next':
        if spl_data[1] == 'chat':
            check = True
            ch = get_chat(int(spl_data[2]))
            is_on = 8
            ch_name = 'chat'
            ch_name1 = '—á–∞—Ç—ñ'
            own = 7
            linked = 14
            link = 4
            ch_name2 = '–∫–∞–Ω–∞–ª—É'
            ch_name3 = '–ß–∞—Ç'
        else:
            check = False
            ch = get_channel(int(spl_data[2]))
            is_on = 6
            ch_name = 'channel'
            ch_name1 = '–∫–∞–Ω–∞–ª—ñ'
            own = 5
            linked = 8
            link = 3
            ch_name2 = '—á–∞—Ç—É'
            ch_name3 = '–ö–∞–Ω–∞–ª'
        keyboard = types.InlineKeyboardMarkup()
        if check:
            keyboard.add(
                types.InlineKeyboardButton(f'–¢—Ä–∏–≥–µ—Ä–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó',
                                           callback_data='in_development')) # f'{ch_name}_reptrig_{spl_data[2]}'
            keyboard.add(
                types.InlineKeyboardButton(f'–¢—Ä–∏–≥–µ—Ä–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å', callback_data=f'{ch_name}_messtrig_0_{spl_data[2]}'))
            keyboard.add(
                types.InlineKeyboardButton(f'–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                           callback_data=f'{ch_name}_welcmess_{spl_data[2]}'))
            keyboard.add(types.InlineKeyboardButton(f"‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞",
                                                    callback_data=f'{"_".join(spl_data[:-1])}'))

        if ch[is_on]:
            status = '–í–≤—ñ–º–∫–Ω–µ–Ω–∏–π'
        else:
            status = '–í–≤–∏–º–∫–Ω–µ–Ω–∏–π'
        if ch[linked]:
            linked = f"–ü—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name2}"
        else:
            linked = f"–ù–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name2}"
        keyboard = menu_footer(keyboard, 'private_chats_0')
        bot.edit_message_text(f'{ch_name3} {ch[2]}\n–°—Ç–∞—Ç—É—Å: {status}\n{linked}', m.chat.id, m.message_id,
                              reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'turn' and spl_data[2] in ('on', 'off') and \
            len(spl_data) == 4:
        if spl_data[2] == 'on':
            keyboard = types.InlineKeyboardMarkup()
            passport = get_passport(u.id)
            day = datetime.today().weekday()
            pay = 5 * (7 - day)
            text = f'–î–ª—è –≤–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –±–æ—Ç–∞ –≤–∏ –º–∞—î—Ç–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ {pay} {glas(pay)}' \
                   f' –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (5 —è—á–æ–∫ –∑–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å). –ù–∞–¥–∞–ª—ñ –≤–∏ —Å–ø–ª–∞—á—É–≤–∞—Ç–∏–º–µ—Ç–µ –ø–æ 35 —è—á–æ–∫ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n' \
                   f'–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É {passport[9]} {glas(passport[9])}.'
            keyboard.add(types.InlineKeyboardButton(text=f'–°–ø–ª–∞—Ç–∏—Ç–∏ {pay} {glas(pay)}',
                                                    callback_data=f'{call.data}_done'))
            keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[3]}')
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=text,
                                  reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            day = datetime.today().weekday()
            pay = 5 * (7 - day)
            text = f'–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞? –í–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ {pay} {glas(pay)}, —è–∫—ñ —Å–ø–ª–∞—á–µ–Ω—ñ' \
                   f' –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (5 —è—á–æ–∫ –∑–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å).'
            keyboard.add(types.InlineKeyboardButton(text=f'–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞',
                                                    callback_data=f'{call.data}_done'))
            keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[3]}')
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=text,
                                  reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'turn' and spl_data[2] in ('on', 'off') and \
            spl_data[4] == 'done':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[3]))
            is_on = 8
            linked = 14
            ch_f = insert_chat_a
            ch_name = '—á–∞—Ç—ñ'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'
        else:
            ch = get_channel(int(spl_data[3]))
            is_on = 6
            linked = 8
            ch_f = insert_channel_a
            ch_name = '–∫–∞–Ω–∞–ª—ñ'
            ch_name1 = '—á–∞—Ç—É'

        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[3]}', '‚¨ÖÔ∏è –î–æ —á–∞—Ç—É')
        passport = get_passport(u.id)
        if spl_data[2] == 'on':
            if ch[linked]:
                keyboard.add(types.InlineKeyboardButton(text=f"–í—ñ–¥–≤'—è–∑–∞—Ç–∏ {ch_name[-1]}",
                                                        callback_data=f'{spl_data[0]}_unlink_{spl_data[3]}'))
                keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[3]}', '‚¨ÖÔ∏è –î–æ —á–∞—Ç—É')
                text = f"–î–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è –±–æ—Ç–∞ –≤ {ch_name} —Ç—Ä–µ–±–∞ –π–æ–≥–æ –≤—ñ–¥–≤'—è–∑–∞—Ç–∏ –≤—ñ–¥ {ch_name1}. –ó—Ä–æ–±–∏—Ç–∏ —Ü–µ –º–æ–∂–Ω–∞ –∑–∞ " \
                       f"–∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ"
                bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=text,
                                      reply_markup=keyboard)
                return

            day = datetime.today().weekday()
            pay = 5 * (7 - day)
            if passport[9] < pay:
                text = '–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è—á–æ–∫.'
                bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=text,
                                      reply_markup=keyboard)
                return
            passport[9] -= pay
            ch[is_on] = 1
            text = f'–ë–æ—Ç —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î –≤ {ch_name} {ch[2]}.'
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=text,
                                  reply_markup=keyboard)
        else:
            ch[is_on] = 0
            text = f'–ë–æ—Ç –±—ñ–ª—å—à–µ –Ω–µ –ø—Ä–∞—Ü—é—î –≤ {ch_name} {ch[2]}.'
            bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=text,
                                  reply_markup=keyboard)
        insert_passport_a(passport)
        ch_f(ch)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'admins':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            link = 13
            ch_name = '—á–∞—Ç—É'
        else:
            ch = get_channel(int(spl_data[2]))
            link = 7
            ch_name = '–∫–∞–Ω–∞–ª—É'
        keyboard = types.InlineKeyboardMarkup()
        admins = ch[link].split()[2:]
        for i in admins:
            if int(i) == u.id:
                continue
            user_admin = get_user(int(i))
            keyboard.add(types.InlineKeyboardButton(text=user_admin[2],
                                                    callback_data=f'{spl_data[0]}_admin_{i}_{spl_data[2]}'))
        keyboard.add(types.InlineKeyboardButton(text='–î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                callback_data=f'{spl_data[0]}_add_admin_{spl_data[2]}'))
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[2]}')
        bot.edit_message_text(text=f'–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ {ch_name} {ch[2]}', chat_id=m.chat.id,
                              message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'admin':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[3]))
            ch_name = '—á–∞—Ç—É'
        else:
            ch = get_channel(int(spl_data[3]))
            ch_name = '–∫–∞–Ω–∞–ª—É'
        keyboard = types.InlineKeyboardMarkup()
        user = get_user(int(spl_data[2]))
        passport = get_passport(int(spl_data[2]))
        if not passport:
            keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[3]}', '‚¨ÖÔ∏è –î–æ —á–∞—Ç—É')
            bot.edit_message_text(text='')
        keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–∏–∫–∞ (–≤ –±–æ—Ç—ñ)',
                                                callback_data=f'{spl_data[0]}_give_creator_{spl_data[2]}_{spl_data[3]}'))
        keyboard.add(types.InlineKeyboardButton(text='–í–∏–ª—É—á–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                callback_data=f'{spl_data[0]}_del_admin_{spl_data[2]}_{spl_data[3]}'))

        keyboard = menu_footer(keyboard, f'{spl_data[0]}_admins_{spl_data[3]}')
        bot.edit_message_text(text=f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {ch_name} {ch[2]}\n{user[2]}', chat_id=m.chat.id,
                              message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'give' and spl_data[2] == 'creator':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[4]))
            ch_name = '—á–∞—Ç—É'
            chl = get_channel(ch[14])
            ch_name1 = '—á–∞—Ç'
            ch_name2 = '–∫–∞–Ω–∞–ª—É'
        else:
            ch = get_channel(int(spl_data[4]))
            ch_name = '–∫–∞–Ω–∞–ª—É'
            chl = get_chat(ch[18])
            ch_name1 = '–∫–∞–Ω–∞–ª'
            ch_name2 = '—á–∞—Ç—É'
        if chl:
            text_in = f'''\n\n–£–í–ê–ì–ê!\n–¢–∞–∫ —è–∫ {ch_name1} "{ch[2]}" –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name2} "{chl[2]}", –≤–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç–µ 
            –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —ñ —á–∞—Ç.'''
        else:
            text_in = ''
        user = get_user(int(spl_data[3]))
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–∏–∫–∞',
                                                callback_data=f'{spl_data[0]}_give_'
                                                              f'creatordone_{spl_data[3]}_{spl_data[4]}'))
        keyboard = menu_footer(keyboard, f'{spl_data[0]}_admins_{spl_data[4]}')
        bot.edit_message_text(text=f'–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–∏–∫–∞ {ch_name} –∞–∫–∞—É–Ω—Ç—É {user[2]}? –¶–µ '
                                   f'–Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—è –¥—ñ—è.{text_in}',
                              chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'give' and spl_data[2] == 'creatordone':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[4]))
            chl = get_channel(ch[14])
            own = 7
            ownl = 5
            ch_f = insert_chat_a
            ch_name = '—á–∞—Ç—É'
            chl_f = insert_channel_a
            ch_name1 = '—á–∞—Ç'
            ch_name2 = '–∫–∞–Ω–∞–ª—É'
        else:
            ch = get_channel(int(spl_data[4]))
            chl = get_chat(ch[18])
            own = 5
            ownl = 7
            ch_f = insert_channel_a
            ch_name = '–∫–∞–Ω–∞–ª—É'
            chl_f = insert_chat_a
            ch_name1 = '–∫–∞–Ω–∞–ª'
            ch_name2 = '—á–∞—Ç—É'
        ch[own] = int(spl_data[3])
        ch_f(ch)
        if chl:
            chl[ownl] = int(spl_data[3])
            chl_f(chl)
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[4]}', f'‚¨ÖÔ∏è –î–æ {ch_name}')
        bot.edit_message_text(text=f'–ü—Ä–∞–≤–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω—ñ.', chat_id=m.chat.id, message_id=m.message_id,
                              reply_markup=keyboard)
        try:
            bot.send_message(int(spl_data[3]), f'–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–∏–∫–∞ {ch_name} "{ch[2]}"')
        except:
            pass
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'del' and spl_data[2] == 'admin':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[4]))
            ch_f = insert_chat_a
            adm = 13
            ch_name = '—á–∞—Ç—É'
        else:
            ch = get_channel(int(spl_data[4]))
            ch_f = insert_channel_a
            adm = 7
            ch_name = '–∫–∞–Ω–∞–ª—É'
        adm_list = ch[adm].split()
        adm_list.remove(spl_data[3])
        ch[adm] = ' '.join(adm_list)
        ch_f(ch)
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[4]}', f'‚¨ÖÔ∏è –î–æ {ch_name}')
        bot.edit_message_text(text=f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–ª—É—á–µ–Ω–∏–π', chat_id=m.chat.id, message_id=m.message_id,
                              reply_markup=keyboard)
        try:
            bot.send_message(int(spl_data[3]), f'–í–∞—Å –≤–∏–ª—É—á–∏–ª–∏ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ {ch_name} "{ch[2]}"')
        except:
            pass
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'add' and spl_data[2] == 'admin':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[3]))
            link = 13
            ch_f = insert_chat_a
            ch_name = '—á–∞—Ç—É'
        else:
            ch = get_channel(int(spl_data[3]))
            link = 7
            ch_f = insert_channel_a
            ch_name = '–∫–∞–Ω–∞–ª—É'
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'{spl_data[0]}_admins_{spl_data[3]}')
        bot.edit_message_text(text=f'–í–≤–µ–¥—ñ—Ç—å id –∞–∫–∞—É–Ω—Ç–∞, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. '
                                     f'<a href="https://telegra.ph/YAk-d%D1%96znatis-id-akaunta-v-Telegram%D1%96-03-12">'
                                     f'–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å id –∞–∫–∞—É–Ω—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ?</a>\n{stop_text}.',
                                     chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     parse_mode='HTML')

        def add_adm(message):
            """ms = bot.forward_message(thrash, m.chat.id, m.message_id)
            if mess.text != ms.text:
                return
            bot.send_message(message.chat.id, '–ª–º–∞–æ')"""
            if message.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=keyboard)
                return

            if not message.text.isdigit():
                bot.send_message(message.chat.id, '–í–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–∫–∞—É–Ω—Ç–∞.', reply_markup=keyboard)
                return

            user = get_user(int(message.text))

            if not user:
                bot.send_message(message.chat.id, '–ê–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–æ—Ç—ñ. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —É –æ—Å–æ–±–∏, —Ö–∞–π –≤–æ–Ω–∞'
                                                  ' —Ä–æ–∑–ø–æ—á–Ω–µ –±–µ—Å—ñ–¥—É –∑ –±–æ—Ç–æ–º.', reply_markup=keyboard)
                return

            ch[link] = f'{ch[link]} {message.text}'
            ch_f(ch)

            try:
                bot.send_message(message.text, f'{user_link(message.from_user.id, html(name(message.from_user)))} '
                                               f'–ø—Ä–∏–∑–Ω–∞—á–∏–≤ –≤–∞—Å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ch_name} "{html(ch[2])}". '
                                               f'–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∏–º —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ü—Ä–æ—Å—Ç–æ—Ä–æ–º –Ø—á–º—ñ–Ω—ñ—ó.',
                                 parse_mode='HTML')
            except:
                pass

            bot.send_message(message.chat.id, f'{user_link(user[1], html(user[2]))} —Å—Ç–∞–≤ '
                                              f'–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ch_name} "{html(ch[2])}"', parse_mode='HTML',
                             reply_markup=keyboard)

        register_next_step_handler(m, add_adm)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'linking':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            link = 14
            ch_f = get_channel
            ch_name0 = '–ß–∞—Ç'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'
        else:
            ch = get_channel(int(spl_data[2]))
            link = 8
            ch_f = get_chat
            ch_name0 = '–ö–∞–Ω–∞–ª'
            ch_name1 = '—á–∞—Ç—É'

        keyboard = types.InlineKeyboardMarkup()
        if ch[link]:
            ch_l = ch_f(ch[link])
            keyboard.add(types.InlineKeyboardButton(text="–í—ñ–¥–≤'—è–∑–∞—Ç–∏",
                                                    callback_data=f'{spl_data[0]}_unlink_{spl_data[2]}'))
            text = f'''{ch_name0} "{ch[2]}" –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name1} "{ch_l[2]}".'''
        else:
            keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–∏–≤'—è–∑–∞—Ç–∏",
                                                    callback_data=f'{spl_data[0]}_link_{spl_data[2]}'))
            text = f'''{ch_name0} –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ {ch_name1}.'''

        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[2]}')
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'unlink':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            ch_l = get_channel(ch[14])
            ch_name0 = '—á–∞—Ç'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'
        else:
            ch = get_channel(int(spl_data[2]))
            ch_l = get_chat(ch[8])
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_name1 = '—á–∞—Ç—É'

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í—ñ–¥–≤'—è–∑–∞—Ç–∏",
                                                callback_data=f'{spl_data[0]}_unlinkdone_{spl_data[2]}'))
        text = f'''–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–≤'—è–∑–∞—Ç–∏ {ch_name0} "{ch[2]}" –≤—ñ–¥ {ch_name1} "{ch_l[2]}"? 
        –í–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ —á–∏–º–∞–ª–æ –ø–µ—Ä–µ–≤–∞–≥.'''
        keyboard = menu_footer(keyboard, f'{spl_data[0]}_linking_{spl_data[2]}')
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'unlinkdone':
        if spl_data[0] == 'chat':
            chat = get_chat(int(spl_data[2]))
            channel = get_channel(chat[14])
            ch_name0 = '—á–∞—Ç'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'
        else:
            channel = get_channel(int(spl_data[2]))
            chat = get_chat(channel[8])
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_name1 = '—á–∞—Ç—É'

        chat[14] = 0
        channel[8] = 0
        insert_chat_a(chat)
        insert_channel_a(channel)
        text = f'''–í–∏ –≤—ñ–¥–≤'—è–∑–∞–ª–∏ {ch_name0} –≤—ñ–¥ {ch_name1}.'''
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[2]}', '‚¨ÖÔ∏è –î–æ —á–∞—Ç—É')
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'link':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            chs = get_all_channels(u.id)
            ch_name0 = '—á–∞—Ç—É'
            ch_name1 = '–∫–∞–Ω–∞–ª'
        else:
            ch = get_channel(int(spl_data[2]))
            chs = get_all_chats(u.id)
            ch_name0 = '–∫–∞–Ω–∞–ª—É'
            ch_name1 = '—á–∞—Ç'
        keyboard = types.InlineKeyboardMarkup()
        for i in chs:
            keyboard.add(types.InlineKeyboardButton(text=i[2],
                                                    callback_data=f'{spl_data[0]}_linkdone_{spl_data[2]}_{i[1]}'))
        keyboard = menu_footer(keyboard, f'{spl_data[0]}_linking_{spl_data[2]}')
        text = f'''–û–±–µ—Ä—ñ—Ç—å {ch_name1}, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –¥–æ {ch_name0} "{ch[2]}".'''
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'linkdone':
        if spl_data[0] == 'chat':
            chat = get_chat(int(spl_data[2]))
            channel = get_channel(int(spl_data[3]))
            ch_name0 = '—á–∞—Ç'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'
        else:
            channel = get_channel(int(spl_data[2]))
            chat = get_chat(int(spl_data[3]))
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_name1 = '—á–∞—Ç—É'

        chat[14] = channel[1]
        channel[8] = chat[1]
        insert_chat_a(chat)
        insert_channel_a(channel)
        text = f'''–í–∏ –ø—Ä–∏–≤'—è–∑–∞–ª–∏ {ch_name0} –¥–æ {ch_name1}.'''
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[2]}', '‚¨ÖÔ∏è –î–æ —á–∞—Ç—É')
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'prostir':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            link = 4
            ch_name0 = '—á–∞—Ç'
            ch_name1 = '—á–∞—Ç—É'
        else:
            ch = get_channel(int(spl_data[2]))
            link = 3
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'

        keyboard = types.InlineKeyboardMarkup()
        if ch[link] == 'NoneURL':
            text = f"–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ {ch_name1}. –í–∫–∞–∑–∞–≤—à–∏ –π–æ–≥–æ –≤–∏ –≤—ñ–¥–∫—Ä–∏—î—Ç–µ {ch_name0} –¥–ª—è –ü—Ä–æ—Å—Ç–æ—Ä—É " \
                   f"–Ø—á–º—ñ–Ω—ñ—ó."
            keyboard.add(types.InlineKeyboardButton(f'–í—ñ–¥–∫—Ä–∏—Ç–∏ {ch_name0} –¥–ª—è –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó',
                                                    callback_data=f'{spl_data[0]}_open_{spl_data[2]}'))
        else:
            text = f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ {ch_name0} –≤–∫–∞–∑–∞–Ω–µ:\n{ch[link]}\n–Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ—Ä–æ–±–æ—á–µ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ " \
                   f"–π–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. –¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫–ª–∏–∫–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç –≤—ñ–¥ " \
                   f"–ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó"

            keyboard.add(types.InlineKeyboardButton(f'–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è',
                                                    callback_data=f'{spl_data[0]}_edit_{spl_data[2]}'))
            keyboard.add(types.InlineKeyboardButton(f'–í—ñ–¥–∫–ª–∏–∫–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏—Ç–∏ {ch_name0} –≤—ñ–¥ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó',
                                                    callback_data=f'{spl_data[0]}_close_{spl_data[2]}'))
        keyboard = menu_footer(keyboard, f'private_{spl_data[0]}_{spl_data[2]}')
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] in ('open', 'edit'):
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            link = 4
            ch_name0 = '—á–∞—Ç'
            ch_name1 = '—á–∞—Ç—É'
            ch_in = insert_chat_a
        else:
            ch = get_channel(int(spl_data[2]))
            link = 3
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_name1 = '–∫–∞–Ω–∞–ª—É'
            ch_in = insert_channel_a
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'{spl_data[0]}_prostir_{spl_data[2]}')
        if spl_data[1] == 'open':
            word0 = f'–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {ch_name1} –¥–ª—è –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó'
            word1 = f'–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {ch_name1}'
            word2 = f'–≤—ñ–¥–∫—Ä–∏–ª–∏ {ch_name0} –¥–ª—è –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó'
        else:
            word0 = f'—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ {ch_name0}'
            word1 = f'—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è'
            word2 = f'–≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ {ch_name0}'

        text = f'''–î–ª—è {word0} –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ. {stop_text}'''
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, parse_mode='HTML')

        def get_link(message):
            if message.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É {word1}.', reply_markup=keyboard)
                return
            if re.fullmatch(r'(https://|)t\.me/(joinchat/|)\w*', message.text):
                ch[link] = message.text
                bot.send_message(m.chat.id, f'–í–∏ —É—Å–ø—ñ—à–Ω–æ {word2}. '
                                            f'–Ø–∫—â–æ –±–æ—Ç —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π —Ç–∞ –æ–ø–ª–∞—á–µ–Ω–∏–π, —Ç–æ {ch_name0} –±—É–¥–µ –≤–∏–¥–∏–º–∏–π –≤ '
                                            f'–ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó. –í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç.', reply_markup=keyboard)
                ch_in(ch)
            else:
                bot.send_message(m.chat.id,
                                 f'–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ {ch_name0}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. {stop_text}.',
                                 parse_mode='HTML')
                register_next_step_handler(m, get_link)
                return
        register_next_step_handler(m, get_link)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'close':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            link = 4
            ch_name0 = '—á–∞—Ç'
            ch_in = insert_chat_a
        else:
            ch = get_channel(int(spl_data[2]))
            link = 3
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_in = insert_channel_a
        ch[link] = 'NoneURL'
        ch_in(ch)
        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'{spl_data[0]}_prostir_{spl_data[2]}')
        text = f'''–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª–∏–∫–∞–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ {ch_name0}.'''
        bot.edit_message_text(text=text, chat_id=m.chat.id, message_id=m.message_id, reply_markup=keyboard)
        return

    if spl_data[0] in ('chat', 'channel') and spl_data[1] == 'reptrig':
        if spl_data[0] == 'chat':
            ch = get_chat(int(spl_data[2]))
            link = 4
            ch_name0 = '—á–∞—Ç'
            ch_in = insert_chat_a
        else:
            ch = get_channel(int(spl_data[2]))
            link = 3
            ch_name0 = '–∫–∞–Ω–∞–ª'
            ch_in = insert_channel_a

        return

    if spl_data[0] == 'chat' and spl_data[1] == 'messtrig':
        chat = get_chat(int(spl_data[3]))
        keyboard = types.InlineKeyboardMarkup()
        if chat[11] == 'None':
            msg_text = '–ù–∞—Ä–∞–∑—ñ —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ –Ω–µ–º–∞ –∂–æ–¥–Ω–æ–≥–æ —Ç—Ä–∏–≥–µ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–æ—Ç–µ –≤–∏ –º–æ–∂–µ—Ç–µ ' \
                   '–¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.'
            keyboard.add(types.InlineKeyboardButton('üÜï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∏–≥–µ—Ä', callback_data=f'chat_addmesstrig_{spl_data[3]}'))
        else:
            triggers = chat[11].split('#*%|%*#')

            buttons = []
            for i in range(len(triggers)):
                but = types.InlineKeyboardButton(triggers[i], callback_data=f'chat_trigger_{i}_{spl_data[3]}')
                buttons.append(but)
            n = int(spl_data[2])
            ln = 5 + n * 5
            more = True
            if len(buttons) <= ln:
                more = False
                ln = len(buttons)

            for i in range(n * 5, ln):
                keyboard.keyboard.append([buttons[i]])
            keyboard.add(types.InlineKeyboardButton('üÜï –î–æ–¥–∞—Ç–∏ —Ç—Ä–∏–≥–µ—Ä', callback_data=f'chat_addmesstrig_{spl_data[3]}'))
            if n:
                but0 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'chat_messtrig_{n-1}_{spl_data[3]}')
            else:
                but0 = types.InlineKeyboardButton('‚è∫', callback_data=f'empty')
            if more:
                but1 = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'chat_messtrig_{n+1}_{spl_data[3]}')
            else:
                but1 = types.InlineKeyboardButton('‚è∫', callback_data=f'empty')
            keyboard.keyboard.append([but0, but1])

            msg_text = f'–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–µ—Ä—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∞—à–æ–≥–æ —á–∞—Ç—É. [{1 + n * 5}-{ln}]'

        keyboard = menu_footer(keyboard, f"private_chat_{spl_data[3]}_next")
        bot.edit_message_text(msg_text, m.chat.id, m.message_id, reply_markup=keyboard, parse_mode='HTML')
        return

    if spl_data[0] == 'chat' and spl_data[1] == 'trigger':
        chat = get_chat(int(spl_data[3]))
        keyboard = types.InlineKeyboardMarkup()
        trigger = chat[11].split('#*%|%*#')[int(spl_data[2])]
        text = chat[12].split('#*%|%*#')[int(spl_data[2])]
        msg_text = f'–¢—Ä–∏–≥–µ—Ä\n{html(trigger)}\n\n–¢–µ–∫—Å—Ç:\n{text}\n\n–î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞ –≤–∏–¥–∞–ª—ñ—Ç—å –π–æ–≥–æ —ñ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π.'
        keyboard.add(types.InlineKeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∏–≥–µ—Ä',
                                                callback_data=f'chat_trigger_delete_{spl_data[2]}_{spl_data[3]}'))
        keyboard = menu_footer(keyboard, f'chat_messtrig_0_{spl_data[3]}')
        bot.edit_message_text(chat_id=m.chat.id, message_id=m.message_id, text=msg_text, parse_mode='HTML',
                              reply_markup=keyboard)
        return

    if spl_data[0] == 'chat' and spl_data[1] == 'addmesstrig':
        chat = get_chat(int(spl_data[2]))

        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'chat_messtrig_0_{spl_data[2]}')

        def get_trig_name(m0):
            if m0.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞.', reply_markup=keyboard)
                return
            if len(m0.text) > 200:
                bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞.', reply_markup=keyboard)
                register_next_step_handler(m0, get_trig_name)
                return

            def get_trig_text(m1):
                if m1.text == '–°–¢–û–ü':
                    bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞.', reply_markup=keyboard)
                    return
                if len(m0.text) > 200:
                    bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞.', reply_markup=keyboard)
                    register_next_step_handler(m0, get_trig_name)
                    return

                try:
                    bot.send_message(thrash, m1.text, parse_mode='HTML')
                except:
                    bot.send_message(m.chat.id, f'–¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π –º—ñ—à–∞, –≤—Å—å–æ —Ö—É–π–Ω—è ', reply_markup=keyboard)
                    return

                chat[11] = m0.text if chat[11] == 'None' else f'{chat[11]}#*%|%*#{m0.text}'
                chat[12] = m1.text if chat[12] == 'None' else f'{chat[12]}#*%|%*#{m1.text}'

                insert_chat_a(chat)
                bot.send_message(text='–¢—Ä–∏–≥–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ', chat_id=m.chat.id, reply_markup=keyboard)
            bot.send_message(text='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—É–¥–µ —Ä–µ–∞–∫—Ü—ñ—î—é –±–æ—Ç–∞ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä.',
                                  chat_id=m.chat.id)
            register_next_step_handler(m0, get_trig_text)

        bot.edit_message_text(text='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—Ä–∏–≥–µ—Ä, –Ω–∞ —è–∫–∏–π —Ä–µ–∞–≥—É–≤–∞—Ç–∏–º–µ –±–æ—Ç.', message_id=m.message_id,
                              chat_id=m.chat.id)
        register_next_step_handler(m, get_trig_name)
        return

    if spl_data[0] == 'chat' and spl_data[1] == 'welcmess':
        chat = get_chat(int(spl_data[2]))
        keyboard = types.InlineKeyboardMarkup()
        if chat[3] == 'None':
            msg_text = '–ù–∞—Ä–∞–∑—ñ —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–æ—Ç–µ –≤–∏ –º–æ–∂–µ—Ç–µ ' \
                   '–¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.'
            keyboard.add(types.InlineKeyboardButton('üÜï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                                    callback_data=f'chat_addwelcmess_{spl_data[2]}'))
        else:
            msg_text = f'–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n{chat[3]}'

            keyboard.add(types.InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                                    callback_data=f'chat_editwelcmess_{spl_data[2]}'))
            keyboard.add(types.InlineKeyboardButton('–í–∏–ª—É—á–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                                    callback_data=f'chat_delwelcmess_{spl_data[2]}'))

        keyboard = menu_footer(keyboard, f'private_chat_{spl_data[2]}_next')
        bot.edit_message_text(msg_text, chat_id=m.chat.id, message_id=m.message_id, parse_mode='HTML',
                              reply_markup=keyboard)
        return

    if spl_data[0] == 'chat' and spl_data[1] in ('addwelcmess', 'editwelcmess'):
        chat = get_chat(int(spl_data[2]))

        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_chat_{spl_data[2]}_next')

        def get_welc(m0):
            if m0.text == '–°–¢–û–ü':
                bot.send_message(m.chat.id, f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.',
                                 reply_markup=keyboard)
                return
            if len(m0.text) > 2000:
                bot.send_message(m.chat.id, f'–ë—ñ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª—ñ–≤.', reply_markup=keyboard)
                register_next_step_handler(m0, get_trig_name)
                return
            try:
                bot.send_message(thrash, m0.text, parse_mode='HTML')
            except:
                bot.send_message(m.chat.id, f'–¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π –º—ñ—à–∞, –≤—Å—å–æ —Ö—É–π–Ω—è ', reply_markup=keyboard)
                return

            chat[3] = m0.text
            insert_chat_a(chat)
            bot.send_message(text='–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ', chat_id=m.chat.id, reply_markup=keyboard)

        bot.edit_message_text(text='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—Ä–∏–≥–µ—Ä, –Ω–∞ —è–∫–∏–π —Ä–µ–∞–≥—É–≤–∞—Ç–∏–º–µ –±–æ—Ç.', message_id=m.message_id,
                              chat_id=m.chat.id)
        register_next_step_handler(m, get_welc)
        return

    if spl_data[0] == 'chat' and spl_data[1] == 'delwelcmess':
        chat = get_chat(int(spl_data[2]))

        keyboard = types.InlineKeyboardMarkup()
        keyboard = menu_footer(keyboard, f'private_chat_{spl_data[2]}_next')

        chat[3] = 'None'
        insert_chat_a(chat)
        bot.edit_message_text(text='–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–ª—É—á–µ–Ω–æ.', message_id=m.message_id,
                              chat_id=m.chat.id, reply_markup=keyboard)
        return

    if spl_data[0] == 'channel' and spl_data[1] == 'post':
        channel = get_channel(int(spl_data[2]))

        def get_post_message(m0):

            def get_react(m1):
                try:
                    m_id = bot.copy_message(channel[1], m0.chat.id, m0.message_id).message_id
                except:
                    keyboard = menu_footer(types.InlineKeyboardMarkup(), f'private_channel_{spl_data[2]}')
                    bot.send_message(m.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞', reply_markup=keyboard)
                    return

                spl_text = m1.text.split('\n')
                reacts = []
                votes = []
                for i in range(len(spl_text)):
                    reacts.append([])
                    votes.append([])
                    for j in spl_text[i].split('|'):
                        reacts[i].append(str(j))
                        votes[i].append([])
                new_post(channel[1], m_id, str(reacts), str(votes))

                keyboard = menu_footer(types.InlineKeyboardMarkup(), f'private_channel_{spl_data[2]}')
                bot.send_message(m.chat.id, '–ì–æ—Ç–æ–≤–æ', reply_markup=keyboard)

            bot.send_message(text='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–µ–∞–∫—Ü—ñ—ó.', chat_id=m.chat.id)
            register_next_step_handler(m0, get_react)

        bot.edit_message_text('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç.', chat_id=m.chat.id, message_id=m.message_id)
        register_next_step_handler(m, get_post_message, True)
        return

    if spl_data[0] == 'react':
        x = int(spl_data[1])
        y = int(spl_data[2])
        channel = get_channel(m.chat.id)
        if not channel:
            return
        keyboard = m.reply_markup
        post = get_post(m.chat.id, m.message_id)
        post[4] = eval(post[4])
        voted = False
        l_x, l_y = None, None
        for i in range(len(post[4])):
            for j in range(len(post[4][i])):
                if u.id in post[4][i][j]:
                    voted = True
                    l_x = i
                    l_y = j
        if voted:
            button = keyboard.keyboard[l_x][l_y]
            react = ' '.join(button.text.split()[:-1])
            num = int(button.text.split()[-1])
            keyboard.keyboard[l_x][l_y] = types.InlineKeyboardButton(f'{react} {num-1}',
                                                                     callback_data=f'react_{l_x}_{l_y}')
            post[4][l_x][l_y].remove(u.id)
            text = f'–í–∏ –∑–∞–±—Ä–∞–ª–∏ —Å–≤–æ—é —Ä–µ–∞–∫—Ü—ñ—é –∑ "{react}"'
            if x != l_x or y != l_y:
                button = keyboard.keyboard[x][y]
                react = ' '.join(button.text.split()[:-1])
                num = int(button.text.split()[-1])
                keyboard.keyboard[x][y] = types.InlineKeyboardButton(f'{react} {num + 1}',
                                                                    callback_data=f'react_{x}_{y}')
                post[4][x][y].append(u.id)
                text = f'–í–∏ –∑–º—ñ–Ω–∏–ª–∏ —Å–≤–æ—é —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ "{react}"'
        else:
            button = keyboard.keyboard[x][y]
            react = ' '.join(button.text.split()[:-1])
            num = int(button.text.split()[-1])
            keyboard.keyboard[x][y] = types.InlineKeyboardButton(f'{react} {num + 1}',
                                                                 callback_data=f'react_{x}_{y}')
            post[4][x][y].append(u.id)
            text = f'–í–∏ –≤—ñ–¥—Ä–µ–∞–≥—É–≤–∞–ª–∏ "{react}"'
        bot.edit_message_reply_markup(m.chat.id, m.message_id, reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=text)
        post[3] = str(post[3])
        post[4] = str(post[4])
        insert_post_a(post)
        return


@bot.message_handler(func=lambda m: m.chat.id == -1001452719524, content_types=['new_chat_members'])
def new_chat_member_gr(m):
    global welcome_m, pass_form_call

    for i in m.new_chat_members:
        if i.is_bot():
            continue
        user = get_user(i.id)
        if user is None:
            non_reg(i, m)
            try:
                bot.restrict_chat_member(chat_id=m.chat.id, user_id=i.id)
            except:
                pass
            continue
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üñã –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç", callback_data="pass")
    keyboard.add(callback_button)
    chat = m.chat
    welc = chat[3]
    welc_l = welc.split('{enter}')
    welc_out = ''
    for i in range(len(welc_l)):
        welc_out += f'{welc_l[i]}\n'
    welc_out = welc_out.replace('{empty}', f'{chr(8205)}')
    welc_out = welc_out.replace('{name}', f'{name(m.from_user)}')

    pass_form_call = m.from_user.id
    bot.send_message(m.chat.id, welc_out, parse_mode='HTML', reply_markup=keyboard, reply_to_message_id=m.message_id)


@bot.message_handler(content_types=['new_chat_members'])
def new_chat_members(m):
    chat = get_chat(m.chat.id)
    """if m.new_chat_members[0].id == BOT_USER:
        if get_chat(m.chat.id) is not None:
            return
        out = f'{chat.title}\n'
        out += f'{chat.id}\n'
        if chat.username is not None:
            out += f'{chat.username}\n\n'
        if chat.description is not None:
            out += f'{chat.description}'
        # bot.send_message(-1001476087749, f'{out}')

        if m.from_user.id != CREATOR:
            bot.send_message(chat.id, f'{out}\n\n–§–ª–µ—à–∫–∞ –∑ —Ü–∏–º–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ –≤–∂–µ –≤ –ì–∞–∞–∑—ñ')
            bot.send_message(chat.id, '–±—É–µ–Ω–æ—Å –¥—ñ–∞—Å, –ø–µ–¥—Ä—ñ–ª–∞—Å!')
            bot.leave_chat(chat.id)
            return

        new_chat(chat)
        return"""

    for i in m.new_chat_members:
        if i.id == BOT_USER:
            out = f'{m.chat.title}\n'
            out += f'{m.chat.id}\n'
            if m.chat.username is not None:
                out += f'{m.chat.username}\n\n'
            if m.chat.description is not None:
                out += f'{m.chat.description}'
            # bot.send_message(-1001476087749, f'{out}')

            if chat:
                continue
            if m.chat.type != 'supergroup':
                bot.send_message(m.chat.id, f'–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –≥—Ä—É–ø–∞ –º–∞—î –±—É—Ç–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–æ—é. –í—ñ–¥–∫—Ä–∏–π—Ç–µ '
                                            f'—ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É, —ñ –≥—Ä—É–ø–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞–Ω–µ —Ç–∞–∫–æ—é. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –¥–æ–¥–∞–π—Ç–µ '
                                            f'–±–æ—Ç–∞ –∑–Ω–æ–≤—É')
                bot.leave_chat(m.chat.id)
                return
            admins = [0, 0]
            cr = 0
            for j in bot.get_chat_administrators(m.chat.id):
                user = j.user
                if j.status == 'creator':
                    cr = user.id
                else:
                    if not get_user(user.id):
                        continue
                admins.append(user.id)
            admins = list(map(lambda x: str(x), admins))
            if cr:
                new_chat(m.chat, '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π', cr, admins)
                keyboard = types.InlineKeyboardMarkup()
                but = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó',
                                                 url='t.me/yachminiya_test_bot?start=prostir_menu')
                keyboard.add(but)
                bot.send_message(m.chat.id, f'–ß–∞—Ç {m.chat.title} –¥–æ–¥–∞–Ω–∏–π –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó. '
                                            f'–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫ —á–∞—Ç—É –º–∞—î –≤–≤—ñ–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞ –≤ –º–µ–Ω—é'
                                            f'–ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –≤–ª–∞—Å–Ω–∏–∫–∞, '
                                            f'–∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {user_link(CREATOR, "–ù–∞–∑–∞—Ä—ñ—è —Ñ–æ–Ω –ì–µ—Ä—Å—Ç–µ")}.',
                                 reply_markup=keyboard, parse_mode='HTML')
                return
            else:
                bot.send_message(m.chat.id, f'–í–ª–∞—Å–Ω–∏–∫ —á–∞—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–∏–º. –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É –∑–º—ñ–Ω—ñ—Ç—å –ø—Ä–∞–≤–∞'
                                            f' –≤–ª–∞—Å–Ω–∏–∫–∞. –ë–æ—Ç –∑–∞—Ä–∞–∑ –ª—ñ–≤–Ω–µ.')
                bot.leave_chat(m.chat.id)
                return

        if chat[6] in ('–û—Å–Ω–æ–≤–Ω–∏–π', '–°–ª—É–∂–±–æ–≤–∏–π'):
            user = get_user(i.id)
            if user is None:
                try:
                    bot.restrict_chat_member(chat_id=m.chat.id, user_id=i.id)
                except:
                    pass
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='ü§ñ –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é', url='t.me/yachminiya_bot')
                keyboard.add(button)
                bot.send_message(m.chat.id,
                                 f'<a href="tg://user?id={i.id}">{name(i)}</a>, –≤—ñ—Ç–∞—î–º–æ! –¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤(–ª–∞) –¥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É '
                                 f'–Ø—á–º—ñ–Ω—ñ—ó, –∞–ª–µ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–∞ '
                                 f'–∫–Ω–æ–ø–∫–æ—é –∑–Ω–∏–∑—É',
                                 parse_mode='HTML', reply_markup=keyboard)
                continue
        if chat[8]:
            welc = chat[3]
            if welc == 'None':
                return
            welc_out = welc.replace('/enter/', '\n')
            welc_out = welc_out.replace('/empty/', f'{chr(8205)}')
            welc_out = welc_out.replace('/name/', f'{name(i.user)}')
            bot.send_message(m.chat.id, welc_out, parse_mode='HTML', reply_to_message_id=m.message_id)
        return


@bot.message_handler(content_types=["text"])
def commands(m):
    global aktyv, lakt, zhandarm, CREATOR, voting_q, del_pass, weekdays, global_user, t, false_day
    tt = time.time()
    mess = m.text.split()

    chat = get_chat(m.chat.id)
    if m.chat.type != 'private':
        if not chat:
            bot.leave_chat(m.chat.id)
            return
        if m.text == '!—á–∞—Ç':
            bot.send_message(m.chat.id, '—á–∞—Ç')
            return
        if not chat[8]:
            return

    if m.from_user.id == 777000:
        if not chat[14]:
            return
        channel_id = m.forward_from_chat.id
        m_id = m.forward_from_message_id
        chat_id = str(m.chat.id)[4:]
        post = get_post(channel_id, m_id)
        if not post:
            return
        keyboard = types.InlineKeyboardMarkup()
        if post[3] == 'None':
            return
        else:
            react = eval(post[3])
            """react_spl = post[3].split('\n')
            for i in range(len(react_spl)):
                react.append([])
                for j in react_spl[i].split('|'):
                    react[i].append(j)"""
            for i in range(len(react)):
                keyboard.keyboard.append([])
                for j in range(len(react[i])):
                    keyboard.keyboard[i].append(types.InlineKeyboardButton(f'{react[i][j]} 0',
                                                                           callback_data=f'react_{i}_{j}'))
        but = types.InlineKeyboardButton(text='üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ', url=f'https://t.me/c/{chat_id}/1?thread={m.message_id}')
        keyboard.add(but)
        bot.edit_message_reply_markup(channel_id, m_id, reply_markup=keyboard)

    if m.reply_to_message:
        """
        if m.reply_to_message.from_user.id == 777000:
            text_of_but = m.reply_to_message.reply_markup.keyboard[-1][-1].text
            num = int(text_of_but.split()[1])
            channel_id = m.reply_to_message.forward_from_chat.id
            m_id = m.reply_to_message.forward_from_message_id
            chat_id = str(m.chat.id)[4:]
            but = types.InlineKeyboardButton(text=f'üí¨ {num+1}', url=f'https://t.me/c/{chat_id}/1?thread={m.message_id}')
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(but)
            bot.edit_message_reply_markup(channel_id, m_id, reply_markup=keyboard)"""
        # pprint(m.json)
        pass

    man = get_user(m.from_user.id)
    man_pass = get_passport(m.from_user.id)
    if man is not None:
        changed = False
        if man[2] != name(m.from_user):
            man[2] = name(m.from_user)
            changed = True
        if man[5] != m.from_user.username:
            man[5] = m.from_user.username
            changed = True
        if changed:
            insert_user_a(man)
    if man_pass is not None:
        changed = False
        if man_pass[4] != name(m.from_user):
            man_pass[4] = name(m.from_user)
            changed = True
        if man_pass[5] != m.from_user.username:
            man_pass[5] = m.from_user.username
            changed = True
        if changed:
            insert_passport_a(man_pass)

    if m.forward_sender_name or m.forward_from or m.forward_from_chat or m.forward_from_message_id:
        return

    try:
        aktyv[m.from_user.id][0] = aktyv[m.from_user.id][0] + 1
        aktyv[m.from_user.id][1] = aktyv[m.from_user.id][1] + len(m.text.split())
        lakt += 1
        if lakt > 14:
            aktyv_r()
    except:
        aktyv[m.from_user.id] = [1, len(m.text.split())]
        lakt += 1
        if lakt > 14:
            aktyv_r()

    if m.text[0] == '!':
        if f_queue(m):
            return

    if chat[11] != 'None' and m.chat.type == 'supergroup':
        triggers = chat[11].split('#*%|%*#')
        if m.text in triggers:
            tr_text = chat[12].split('#*%|%*#')[triggers.index(m.text)]
            bot.send_message(m.chat.id, tr_text, parse_mode='HTML')
            return

    """if m.chat.type == 'private':
        msg = bot.forward_message(-1001344984878, m.chat.id, m.message_id)
        bot.reply_to(msg, f'{m.chat.id} {m.message_id}')

    if m.chat.id == -1001344984878:
        if m.reply_to_message is not None:
            mess_r = m.reply_to_message
            c_id = int(mess_r.text.split()[0])
            m_id = int(mess_r.text.split()[1])
            try:
                if mess()[0] == '—Ä':
                    bot.send_message(chat_id=c_id, text=' '.join(m.text.split()[1:]), reply_to_message_id=m_id)
                else:
                    bot.send_message(chat_id=c_id, text=' '.join(m.text.split()))
            except:
                pass

    if m.chat.id == -1001404271371:
        bot.forward_message(-1001492661297, m.chat.id, m.message_id)"""

    if m.text == '!–æ–Ω–æ–≤–∏—Ç–∏_–±–¥':
        if m.from_user.id != CREATOR:
            return
        update_all_db()
        bot.send_message(m.chat.id, 'good')

    if mess[0] == '!–ø' or m.text == '!me' or m.text == '!pass':
        if len(mess) > 1:
            if mess[1][-1] == '—Å' or mess[1][-1] == 'c':
                if mess[1][:-1].isdigit():
                    t = int(mess[1][:-1])
                else:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                    return
                rig = False
                id = m.from_user.id
                if t > 3600:
                    t = 3600
            else:
                rig = True
                id = mess[1]
        elif m.reply_to_message:
            id = m.reply_to_message.from_user.id
            rig = True
        else:
            id = m.from_user.id
            rig = False
            t = 60

        if rig:
            passport = get_user(m.from_user.id)
            if passport is None:
                non_reg(m.from_user, m)
                return
            if not int(passport[6].split()[1]):
                bot.send_message(m.from_user.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —á—É–∂–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.')
                return
            try:
                bot.send_message(m.from_user.id, get_str_passport(id), parse_mode='HTML')
                bot.send_message(m.chat.id, '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ <a href="t.me/yachminiya_bot">—á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é</a>.',
                                 parse_mode='HTML', disable_web_page_preview=True)
            except:
                bot.send_message(m.chat.id,
                                 '–í—ñ–¥–Ω–æ–≤—ñ—Ç—å <a href="t.me/yachminiya_bot">—á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é</a> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç—É.',
                                 parse_mode='HTML', disable_web_page_preview=True)
        else:
            n = bot.send_message(m.chat.id, get_str_passport(id), parse_mode='HTML').message_id
            Timer(t, del_doc, args=(m.chat.id, n)).start()
        if m.chat.id == -1001329014820:
            bot.send_message(m.chat.id, time.time() - tt)

    if m.text.lower() in reputation or m.text.lower() in bad_reputation:
        if m.chat.type == 'private':
            return
        if m.reply_to_message is None:
            return
        elif m.reply_to_message.from_user.id == m.from_user.id:
            bot.reply_to(m, '–ù–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Å–æ–±—ñ')
            return

        if m.text.lower() in reputation:
            l = 1
            word = '–ø—ñ–¥–≤–∏—â—É—î'
            cooldown = 60
        else:
            l = -1
            word = '–∑–∞–Ω–∏–∂—É—î'
            cooldown = 90

        u_g_id = m.from_user.id
        u_t_id = m.reply_to_message.from_user.id
        u_g = get_user(u_g_id)
        if u_g is None:
            non_reg(m.from_user, m)
            return

        u_t = get_user(u_t_id)
        if u_g is None:
            non_reg(m.reply_to_message.from_user, m)
            return

        if int(u_g[4]) < int(time.time() // 1):
            u_g[4] = int(time.time() // 1) + cooldown
            u_t[3] = int(u_t[3]) + l

            msg = f'{u_g[2]}[{u_g[3]}] {word} —Ä–µ–ø—É—Ç–∞—Ü—ñ—é {u_t[2]}[{u_t[3]}]'
            bot.send_message(m.chat.id, msg, parse_mode='HTML')
            insert_user_a(u_g)
            insert_user_a(u_t)
            return
        else:
            time_to_sfdfsdfsfdsdf = int((float(u_g[4]) - time.time()) // 1) + 2
            last_nums = int(time_to_sfdfsdfsfdsdf) % 100
            last_num = int(time_to_sfdfsdfsfdsdf) % 10
            if 10 < last_nums < 20:
                glas_s = '—Å–µ–∫—É–Ω–¥'
            elif int(last_num) % 10 in (2, 3, 4):
                glas_s = '—Å–µ–∫—É–Ω–¥–∏'
            elif int(last_num) % 10 in (5, 6, 7, 8, 9, 0):
                glas_s = '—Å–µ–∫—É–Ω–¥'
            else:
                glas_s = '—Å–µ–∫—É–Ω–¥—É'
            bot.send_message(m.chat.id, f'–ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {time_to_sfdfsdfsfdsdf} {glas_s}')
            return

    if mess[0] == '!—Ç–µ—Å—Ç':
        '''global_user = m.from_user
        t = Timer(int(mess[1]), timeout, args=(m.from_user, m))
        t.start()'''
        """if len(mess) < 2:
            bot.send_message(m.chat.id, '–π–¥–∏ –Ω–∞—Ö—É–π')
            return"""
        """for i in range(int(mess[1])):
            test_new_timer_pre(bot, m)"""
        """try:
            message = bot.send_message(mess[1], 'test', disable_notification=True)
            bot.delete_message(mess[1], message.message_id)
        except Exception as e:
            print(e)"""
        # print(bot.get_chat_administrators(m.chat.id))
        url = m.reply_to_message.entities[0].url
        p_id = url.split('/')[-2].split('.')[1]
        # bot.send_message(m.chat.id, get_str_passport(int(p_id)))
        if simplify(get_str_passport(int(p_id))) == m.reply_to_message.text:
            bot.send_message(m.chat.id, '–î–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ')
        else:
            bot.send_message(m.chat.id, '–î–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ')

    if mess[0] == '!—Ä–∞–Ω–¥–æ–º_–∞–∫—Ç–∏–≤':
        if m.from_user.id != CREATOR:
            return
        passports = get_all_passports()
        for i in passports:
            i[23] = ' '.join([str(random.randint(0, 150 - i[0])) for _ in range(31)])
            i[24] = ' '.join([str(random.randint(0, 500 - i[0])) for _ in range(31)])
            insert_passport_l(i)
        insert_all_passports_g(passports)

    if mess[0] == '!–æ—á–∏—Å—Ç–∏—Ç–∏_–∞–∫—Ç–∏–≤':
        if m.from_user.id != CREATOR:
            return
        passports = get_all_passports()
        for i in passports:
            i[23] = ' '.join(['0' for _ in range(31)])
            i[24] = ' '.join(['0' for _ in range(31)])
            insert_passport_l(i)
        insert_all_passports_g(passports)

    if mess[0] == '!–¥–µ–Ω—å':
        try:
            false_day = int(mess[1])
            bot.send_message(m.chat.id, f'–¥–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {false_day}')
        except:
            bot.send_message(m.chat.id, '–ø—ñ—à–æ–≤ –Ω–∞—Ö—É–π')

    if mess[0] == '!—Ç–æ–ø' or mess[0] == '!–∫—Ä–∞—â–∏–π_—Ç–æ–ø':
        if mess[0] == '!—Ç–æ–ø':
            top = True
        else:
            top = False
        if len(m.text.split()) > 1:
            try:
                am_n = int(m.text.split()[1])
            except:
                bot.reply_to(m, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                return
        else:
            am_n = 10

        users = get_all_users_rep_order()
        amount = len(users)

        """for i in range(amount):
            for j in range(i, amount):
                if top:
                    if int(users[i][3]) < int(users[j][3]):
                        users[i], users[j] = users[j], users[i]
                else:
                    if int(users[i][3]) > int(users[j][3]):
                        users[i], users[j] = users[j], users[i]"""

        if am_n > 30:
            am_n = 30
        elif am_n > amount:
            am_n = amount
        if top:
            msg_out = f'–ù–∞–π–∫—Ä–∞—â–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è\n'
            users.reverse()
        else:
            msg_out = f'–î—ñ–π—Å–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è\n'

        for i in range(am_n):
            if int(users[i][3]) != 0:
                msg_out += f'{users[i][3]} <a href="t.me/{users[i][5]}">{html(users[i][2])}</a>\n'
        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)
        if m.chat.id == -1001329014820:
            bot.send_message(m.chat.id, time.time() - tt)
        return

    if m.text.split()[0] == '!–∫—Ä–∞—â–∏–π_—Ç–æ–ø':
        if len(m.text.split()) > 1:
            try:
                am_n = int(m.text.split()[1])
            except:
                bot.reply_to(m, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                return
        else:
            am_n = 10

        users = get_all_users()
        amount = len(users)

        for i in range(amount):
            for j in range(i, amount):
                if int(users[i][3]) > int(users[j][3]):
                    users[i], users[j] = users[j], users[i]

        if am_n > 30:
            am_n = 30
        elif am_n > amount:
            am_n = amount
        msg_out = f'–î—ñ–π—Å–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è\n'

        for i in range(am_n):
            msg_out += f'{users[i][3]} <a href="t.me/{users[i][5]}">{html(users[i][2])}</a>\n'
        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)
        return

    if mess[0] == '!—Ä–∞—Ö—É–Ω–æ–∫':
        if len(mess) > 1:
            if mess[1][-1] == '—Å' or mess[1][-1] == 'c':
                if mess[1][:-1].isdigit():
                    t = int(mess[1][:-1])
                else:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                    return
                rig = False
                id = m.from_user.id
                if t > 3600:
                    t = 3600
            else:
                rig = True
                id = mess[1]
        elif m.reply_to_message:
            id = m.reply_to_message.from_user.id
            rig = True
        else:
            id = m.from_user.id
            rig = False
            t = 60

        if rig:
            passport = get_user(m.from_user.id)
            if passport is None:
                non_reg(m.from_user, m)
                return
            if not int(passport[6].split()[1]):
                bot.send_message(m.from_user.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —á—É–∂–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.')
                return
            try:
                bot.send_message(m.from_user.id, get_str_passport(id), parse_mode='HTML')
                bot.send_message(m.chat.id, '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ <a href="t.me/yachminiya_bot">—á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é</a>.',
                                 parse_mode='HTML', disable_web_page_preview=True)
            except:
                bot.send_message(m.chat.id,
                                 '–í—ñ–¥–Ω–æ–≤—ñ—Ç—å <a href="t.me/yachminiya_bot">—á–∞—Ç –∑ –°–∏—Å—Ç–µ–º–æ—é</a> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∫—É–º–µ–Ω—Ç—É.',
                                 parse_mode='HTML', disable_web_page_preview=True)
        else:
            n = bot.send_message(m.chat.id, get_str_acc(id), parse_mode='HTML').message_id
            Timer(t, del_doc, args=(m.chat.id, n)).start()

    if mess[0] == '!–∞–∫—Ç–∏–≤–∏':
        if len(mess) != 2:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
            return
        us_id = mess[1]
        bot.send_message(m.chat.id, get_str_aktives(us_id), parse_mode='HTML', disable_web_page_preview=True)

    if mess[0] == '!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏':
        acc_g = get_passport(m.from_user.id)
        if acc_g is None:
            bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.')

        if m.reply_to_message is None:
            if len(mess) < 3:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[2])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            acc_t = get_passport(mess[1])
            pp_bus = 0
            if acc_t is None:
                acc_t = get_business(mess[1])
                pp_bus = 1
                if acc_t is None:
                    bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                    return

            if len(mess) > 3:
                description = ' '.join(m.text.split()[3:])
            else:
                description = None
        else:
            if len(mess) < 2:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[1])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            try:
                acc_t = get_passport(m.reply_to_message.from_user.id)
                pp_bus = 2
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                return
            if len(mess) > 2:
                description = ' '.join(m.text.split()[2:])
            else:
                description = None

        if int(acc_g[9]) < amount_m:
            bot.send_message(m.chat.id, f'–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É')
            return

        comm = commission(int(amount_m), 2)

        if int(acc_g[9]) < amount_m + comm:
            bot.send_message(m.chat.id,
                             f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à—É —Å—É–º—É –∫–æ—à—Ç—ñ–≤')
            return

        if pp_bus == 0 or pp_bus == 2:
            acc_g[9] = acc_g[9] - amount_m - comm
            acc_t[9] = acc_t[9] + amount_m
            namep = f'{user_link(acc_t[1], acc_t[2], acc_t[3])}'
            money_t = acc_t[9]
        else:
            acc_g[9] = int(acc_g[9]) - amount_m - comm
            acc_t[4] = int(acc_t[4]) + amount_m
            namep = f'<a href="https://t.me/businesses_yachminiya/{acc_t[7]}">{acc_t[2]}</a>'
            money_t = acc_t[4]

        msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
        msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
        msg += f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n'
        msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {user_link(acc_g[1], acc_g[2], acc_g[3])} ({acc_g[9]})\n'
        msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep} ({money_t})\n'
        msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
        msg += f'–ö–æ–º—ñ—Å—ñ—è: {comm} {glas(comm)}\n'
        if description is not None:
            msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'

        bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
        # bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

        if pp_bus == 0:
            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg = f'–ù–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {user_link(acc_g[1], acc_g[2], acc_g[3])} ({acc_g[9]})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
            try:
                bot.send_message(acc_t[1], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass
        elif pp_bus == 1:
            # bot.edit_message_text(get_str_business(acc_t[1]), -1001162793975, acc_t[7], parse_mode='HTML')

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏\n'
            msg += f'–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {user_link(acc_g[1], acc_g[2], acc_g[3])} ({acc_g[9]})\n'
            msg += f'–û—Ç—Ä–∏–º—É–≤–∞—á: {namep} ({money_t})\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
            try:
                bot.send_message(acc_t[3], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass

        insert_passport_a(acc_g)
        if pp_bus == 0 or pp_bus == 2:
            insert_passport_a(acc_t)
        else:
            insert_business_a(acc_t)
            acc_t = get_passport(acc_t[3])

        update_channel_rid(acc_g[13])
        update_channel_rid(acc_t[13])

    if mess[0] == '!–Ω–∞–π–±–∞–≥–∞—Ç—à—ñ':
        if len(mess) < 2:
            bot.send_message(m.chat.id,
                             '–î—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º —ñ–∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö:\n<code>–õ—é–¥–∏</code>\n'
                             '<code>–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞</code>\n<code>–†–æ–¥–∏</code>\n\n'
                             '–ü—Ä–∏–º—ñ—Ç–∫–∞: –≤—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ –∞–∫—Ç–∏–≤–∏, –æ—Å–æ–±–∏—Å—Ç—ñ —Ä–∞—Ö—É–Ω–∫–∏ —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è.',
                             parse_mode='HTML')
            return
        else:
            if mess[1].lower() not in ('–ª—é–¥–∏', '–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞', '—Ä–æ–¥–∏'):
                bot.send_message(m.chat.id,
                                 '–î—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º —ñ–∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö:\n<code>–õ—é–¥–∏</code>\n'
                                 '<code>–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞</code>\n<code>–†–æ–¥–∏</code>\n\n–ü—Ä–∏–º—ñ—Ç–∫–∞: '
                                 '–≤—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ –∞–∫—Ç–∏–≤–∏, –æ—Å–æ–±–∏—Å—Ç—ñ —Ä–∞—Ö—É–Ω–∫–∏ —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è.',
                                 parse_mode='HTML')
                return
            if len(mess) == 3:
                try:
                    am_n = int(mess[2])
                except:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                    return
            else:
                am_n = 10

        msg_out = f'–ù–∞–π–±–∞–≥–∞—Ç—à—ñ {mess[1].lower()}\n'
        passports = get_all_passports()
        businesses = get_all_businesses()
        rids = get_all_rids()
        if mess[1].lower() == '–ª—é–¥–∏':
            for i in range(len(passports)):
                passports[i][9] = 0
                for j in range(len(businesses)):
                    if passports[i][1] == businesses[j][3]:
                        passports[i][9] += businesses[j][4]

            if am_n > 30:
                am_n = 30
            elif am_n > len(passports):
                am_n = len(passports)

            for i in range(len(passports)):
                for j in range(i, len(passports)):
                    if int(passports[i][9]) < int(passports[j][9]):
                        passports[i], passports[j] = passports[j], passports[i]

            for i in range(am_n):
                if int(passports[i][9]) > 0:
                    msg_out += f'{passports[i][9]} ' \
                               f'<a href="t.me/{passports[i][5]}">{passports[i][2]} {passports[i][3]}</a>\n'
        elif mess[1].lower() == '–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞':
            if am_n > 30:
                am_n = 30
            elif am_n > len(businesses):
                am_n = len(businesses)

            for i in range(len(businesses)):
                for j in range(i, len(businesses)):
                    if int(businesses[i][4]) < int(businesses[j][4]):
                        businesses[i], businesses[j] = businesses[j], businesses[i]

            for i in range(am_n):
                if int(businesses[i][4]) > 0:
                    msg_out += f'{businesses[i][4]} <a href="https://t.me/businesses_yachminiya/{businesses[i][7]}">' \
                               f'{businesses[i][2]}</a>\n'
        elif mess[1].lower() == '—Ä–æ–¥–∏':
            if am_n > 30:
                am_n = 30
            elif am_n > len(rids):
                am_n = len(rids)

            for i in range(len(rids)):
                all_id = list(map(lambda x: int(x), rids[i][3].split()[2:]))
                passport = get_passport(rids[i][2])
                all_id.append(passport[1])
                businesses = get_business_owner(all_id)
                for j in businesses:
                    rids[i][4] += j[4]

            for i in range(len(rids)):
                for j in range(i, len(rids)):
                    if int(rids[i][4]) < int(rids[j][4]):
                        rids[i], rids[j] = rids[j], rids[i]

            for i in range(am_n):
                if int(rids[i][4]) > 0:
                    msg_out += f'{rids[i][4]} <a href="https://t.me/FamilyRegistry/{rids[i][5]}">{rids[i][1]}</a>\n'

        bot.send_message(m.chat.id, msg_out, parse_mode='HTML', disable_web_page_preview=True)
        return

    if m.text == '!–æ—á–∏—Å—Ç–∏—Ç–∏':
        if m.chat.type == 'private':
            return
        if m.reply_to_message is None:
            bot.reply_to(m, '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        u = get_user(m.from_user.id)
        if u is None:
            non_reg(m.from_user, m)
            return
        if not int(u[6].split()[3]):
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É')
            return
        try:
            passport = bot.forward_message(thrash, m.chat.id, m.reply_to_message.message_id).forward_from
            bot.delete_message(m.chat.id, m.reply_to_message.message_id)
        except:
            return
        if passport is not None:
            frw = True
        else:
            frw = False

        for i in range(m.reply_to_message.message_id + 1, m.message_id):
            try:
                if frw:
                    passport = bot.forward_message(thrash, m.chat.id, i).forward_from
                    if passport is not None:
                        if passport.id == m.reply_to_message.from_user.id:
                            bot.delete_message(m.chat.id, i)
                else:
                    mess = bot.forward_message(thrash, m.chat.id, i)
                    passport = mess.forward_from
                    usr_name = mess.forward_sender_name
                    if passport is None:
                        if usr_name == name(m.reply_to_message.from_user):
                            bot.delete_message(m.chat.id, i)
            except:
                pass

        try:
            bot.delete_message(m.chat.id, m.message_id)
        except:
            pass

    if m.text == '!–¥–µ–ª':
        if m.chat.type == 'private':
            return
        if m.reply_to_message is None:
            bot.reply_to(m, '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        u = get_user(m.from_user.id)
        if u is None:
            non_reg(m.from_user, m)
            return
        if not int(u[6].split()[3]):
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É')
            return

        try:
            bot.delete_message(m.chat.id, m.reply_to_message.message_id)
            bot.delete_message(m.chat.id, m.message_id)
        except:
            pass

    if m.text == '!–∞–π–¥—ñ':
        if m.reply_to_message is not None:
            bot.send_message(m.chat.id, f'{m.reply_to_message.from_user.id}')
            return
        bot.send_message(m.chat.id, f'{m.chat.id}')

    if m.text == '!id':
        msg = f'Chat id: <code>{m.chat.id}</code>\n'
        msg += f'User id: <code>{m.from_user.id}</code>\n'
        if m.reply_to_message is not None:
            msg += f'Reply user id: <code>{m.reply_to_message.from_user.id}</code>\n'
            msg += f'Reply message id: <code>{m.reply_to_message.message_id}</code>\n'
        try:
            bot.send_message(m.chat.id, msg, parse_mode='HTML')
        except:
            pass

    if m.text == '!–æ–Ω–æ–≤–∏—Ç–∏_–∞–∫—Ç–∏–≤':
        aktyv_r()
        bot.reply_to(m, '–¢–∞–±–ª–∏—Ü—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
        return

    if mess[0] in ('!—ñ–Ω—Ñ–æ', '!–∞'):
        if m.reply_to_message is not None:
            u = m.reply_to_message.from_user
        else:
            u = m.from_user
        passport = get_passport(u.id)
        if passport is None:
            bot.send_message(m.chat.id, f"{user_link(u.id, name(u))} –Ω–µ –º–∞—î –ø—Ä–∞–≤–æ–≤–æ–≥–æ –∑–≤'—è–∑–∫—É –∑ –Ø—á–º—ñ–Ω—ñ—î—é")
            return
        all_passports = get_all_passports()
        all_messages = 0
        all_words = 0
        for i in all_passports:
            all_messages += sum(map(lambda x: int(x), i[23].split()))
            all_words += sum(map(lambda x: int(x), i[24].split()))
        if not (all_messages or all_words):
            bot.send_message(m.chat.id, '–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
            return

        messages = sum(map(lambda x: int(x), passport[23].split()))
        words = sum(map(lambda x: int(x), passport[24].split()))
        per_mess = messages / all_messages
        per_words = words / all_words

        if len(mess) == 1:
            out = f'–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n{user_link(passport[1], passport[2], passport[3])}\n\n'
            out += f'–ö–æ–¥: <code>{passport[18]}</code>\n'
            out += f'–†–µ–ø—É—Ç–∞—Ü—ñ—è: {passport[19]}\n'
            out += f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –º—ñ—Å—è—Ü—å: {messages}\n'
            out += f'–°–ª—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å: {words}\n'
            out += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤—É: {round((per_mess + per_words) * 50, 2)}%"
            bot.send_message(m.chat.id, out, parse_mode='HTML')
            return

        if mess[0] != '!–∞':
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
            return

        if mess[1].isdigit:
            check_day = int(mess[1]) - 1
        else:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
            return

        if check_day not in range(0, 31):
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
            return

        """if mess[1].lower() == '—Ç–∏–∂–¥–µ–Ω—å':
            word1 = '–¢–∏–∂–Ω–µ–≤–∞'
            word2 = '—Ç–∏–∂–¥–µ–Ω—å'
            day = None
            one_day = False
        elif mess[1].lower() == '—Å—å–æ–≥–æ–¥–Ω—ñ':
            day = datetime.today().weekday()
            word1 = '–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è'
            word2 = '—Å—å–æ–≥–æ–¥–Ω—ñ'
            one_day = True
        elif mess[1].lower() == '–≤—á–æ—Ä–∞':
            day = datetime.today().weekday() - 1
            if day < 0:
                day += 7
            word1 = '–í—á–æ—Ä–∞—à–Ω—è'
            word2 = '–≤—á–æ—Ä–∞'
            one_day = True
        elif mess[1].lower() == '–ø–æ–∑–∞–≤—á–æ—Ä–∞':
            day = datetime.today().weekday() - 2
            if day < 0:
                day += 7
            word1 = '–ü–æ–∑–∞–≤—á–æ—Ä–∞—à–Ω—è'
            word2 = '–≤—á–æ—Ä–∞—à–Ω—è'
            one_day = True
        elif mess[1].lower() == '–∑–∞–≤—Ç—Ä–∞':
            time.sleep(1)
            bot.send_message(m.chat.id, '–Ø, –ø–æ —Ç–≤–æ—î–º—É, —Å—Ö–æ–∂–∞ –Ω–∞ –í–∞–Ω–≥—É?')
            return
        elif mess[1].lower() == '–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞':
            time.sleep(1)
            bot.send_message(m.chat.id, '–ù—É —Ü–µ –≤–∂–µ –Ω–µ –ª—ñ–∑–µ –≤ –∂–æ–¥–Ω—ñ —Ä–∞–º–∫–∏. –©–æ —Ç–∏ —Ö–æ—á–µ—à –≤—ñ–¥ –º–µ–Ω–µ?')
            return
        else:
            try:
                day, word2, word1 = weekdays[mess[1].lower()]
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                return
            one_day = True

        if one_day:
            all_msgs = 0
            all_words = 0
            msg = int(passport[23].split()[day])
            word = int(passport[24].split()[day])
            for i in all_passports:
                all_msgs += int(i[23].split()[day])
                all_words += int(i[24].split()[day])
            m_per = msg / all_msgs
            w_per = word / all_words
            percent = round((m_per + w_per) * 50, 2)
        else:
            msg = 0
            word = 0
            all_msgs = 0
            all_words = 0
            msgs = passport[23].split()
            words = passport[24].split()
            for i in all_passports:
                msg_l = i[23].split()
                word_l = i[24].split()
                for j in range(len(msg_l)):
                    all_msgs += int(msg_l[j])
                    all_words += int(word_l[j])

            for i in range(len(msgs)):
                msg += int(msgs[i])
                word += int(words[i])
            m_per = msg / all_msgs
            w_per = word / all_words
            percent = round((m_per + w_per) * 50, 2)"""

        all_msgs = 0
        all_words = 0
        msg = int(passport[23].split()[check_day])
        word = int(passport[24].split()[check_day])
        for i in all_passports:
            all_msgs += int(i[23].split()[check_day])
            all_words += int(i[24].split()[check_day])
        if not (all_msgs or all_words):
            bot.send_message(m.chat.id, '–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
            return
        m_per = msg / all_msgs
        w_per = word / all_words
        percent = round((m_per + w_per) * 50, 2)

        if false_day:
            day = false_day
        else:
            day = datetime.today().day
        month = datetime.today().month
        if check_day + 1 > day:
            month = month_num[month - 2]
        str_date = f'{check_day + 1} {months[month][0]}'

        out = f'–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ {str_date}\n'
        out += f'<a href="tg://user?id={u.id}">{html(name(u))}\n\n</a>'
        out += f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {msg}\n'
        out += f'–°–ª—ñ–≤: {word}\n'
        out += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤—É: {percent}%"
        bot.send_message(m.chat.id, out, parse_mode='HTML')

    if mess[0] == '!—Å—Ç–∞—Ç—Ç—è':
        if m.chat.type == 'private':
            bot.reply_to(m, '–£–¥–∞—á—ñ, –±—Ä–∞—Ç–∞–Ω)')
            return
        try:
            number = int(mess[1])
        except:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
            return
        if len(mess) < 3:
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                return
            id_loh = m.reply_to_message.from_user.id
        else:
            id_loh = int(mess[2])

        zhan = get_user(m.from_user.id)
        if zhan is None:
            non_reg(m.from_user, m)
            return

        zher = get_passport(id_loh)
        if zher is None:
            ban = True
            zher = get_user(id_loh)
            if zher is None:
                try:
                    zher = bot.get_chat(id_loh)
                    zher_name = name(zher)
                except:
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.')
                    return
            else:
                zher_name = zher[2]
        else:
            ban = False
            zher_name = zher[2] + zher[3]

        zhan = get_zhan(m.from_user.id)
        try:
            st_am = zhan_queue[m.from_user.id]
        except:
            zhan_queue[m.from_user.id] = 0
            st_am = 0
        if st_am >= zhan_rank[zhan[2]][4]:
            bot.send_message(m.chat.id,
                             f'–í–∏ –≤–∂–µ –∑–¥—ñ–π—Å–Ω–∏–ª–∏ {st_am} –≤–∏—Ä–æ–∫—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –º–∏–Ω—É–ª–æ—ó –≥–æ–¥–∏–Ω–∏, —â–æ —î –ª—ñ–º—ñ—Ç–æ–º. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å —ñ–Ω—à–æ–≥–æ'
                             f' –∂–∞–Ω–¥–∞—Ä–º–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –≤–∏—Ä–æ–∫.')
            return
        else:
            zhan_queue[m.from_user.id] += 1
            Timer(3600, zhan_hour, args=(m.from_user.id,))

        adm = get_all_admin()
        am = len(adm)
        st = adm[number - 1]
        if number > am:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ.')
            return

        chats = get_all_chats()
        for i in chats:
            if i[6] != '–û—Å–Ω–æ–≤–Ω–∏–π':
                continue
            if ban:
                time_b = time.time() + int(st[2]) * 3600
                try:
                    bot.kick_chat_member(chat_id=i[2], user_id=id_loh, until_date=time_b)
                except:
                    pass
            else:
                time_m = time.time() + int(st[2]) * 3600
                try:
                    bot.restrict_chat_member(chat_id=i[2], user_id=id_loh, until_date=time_m)
                except:
                    pass
        if ban:
            text1 = '–í–∏ –±—É–ª–∏ –≤–∏–ª—É—á–µ–Ω—ñ —ñ–∑ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó'
            text2 = '–≤–∏–ª—É—á–µ–Ω–∏–π —ñ–∑ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó –∑–∞ —Å—Ç–∞—Ç–µ—é'
        else:
            text1 = '–í–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –ø—Ä–∞–≤–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó'
            text2 = '–≤—Ç—Ä–∞—á–∞—î –ø—Ä–∞–≤–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó –∑–∞ —Å—Ç–∞—Ç–µ—é'

        zhan_pass = get_passport(m.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ü–æ–¥–∞—Ç–∏ –ø–æ–∑–æ–≤ —É –ö–∞—Ä–Ω–∏–π –°—É–¥', callback_data='krime_sud_nm')
        keyboard.add(button)
        try:
            bot.send_message(m.chat.id,
                             f'<a href="tg://user?id={id_loh}">{html(zher_name)}</a> {text2} {number} '
                             f'<a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86%D0%86-Adm%D1%96n%D1%96strativn%D1%9'
                             f'6-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª—É –Ü–Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É</a> –Ω–∞ {st[2]} –≥–æ–¥–∏–Ω(–∏)',
                             parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(id_loh,
                             f'{text1} {zhan_rank[zhan[2]][5]} '
                             f'<a href="tg://user?id={m.from_user.id}">{zhan_pass[2]} {zhan_pass[3]}</a> '
                             f'<code>{zhan_pass[18]}</code> –Ω–∞ {st[2]} –≥–æ–¥–∏–Ω(–∏) –∑–∞ —Å—Ç–∞—Ç–µ—é {number} '
                             f'<a href="https://telegra.ph/Rozd%D1%96l-%D0%86%D0%86%D0%86-Adm%D1%96n'
                             f'%D1%96strativn%D1%96-pravoporushennya-04-24">–†–æ–∑–¥—ñ–ª—É –Ü–Ü–Ü –ö–∞—Ä–Ω–æ–≥–æ –∑–≤–æ–¥—É</a>\n'
                             f'–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:\n{st[1]}\n\n–Ø–∫—â–æ –≤–∏ –≤–≤–∞–∂–∞—î—Ç–µ, —â–æ —Ü–µ–π –≤–∏—Ä–æ–∫ –±—É–≤ –Ω–µ–ø—Ä–∞–≤–æ–º—ñ—Ä–Ω–∏–º, –ø–æ–¥–∞–π—Ç–µ '
                             f'–ø–æ–∑–æ–≤ –Ω–∞ –ñ–∞–Ω–¥–∞—Ä–º–∞ —É –ö–∞—Ä–Ω–∏–π –°—É–¥ –∑–∞ —Å—Ç–∞—Ç–µ—é –•.',
                             reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)
        except Exception as e:
            print(e)
        zhan[3] += 1
        zhan[4] += 1
        insert_zhan_a(zhan)

    """if m.text == '!–¥–æ–¥–∞—Ç–∏_—á–∞—Ç':
        if m.chat.type == 'private':
            return
        user = get_user(m.from_user.id)
        if user is None:
            non_reg(m.from_user, m)
            return
        chat = get_chat(m.chat.id)
        number = chat[0]

        user[9] += f' {number}'
        insert_user_a(user)
        bot.reply_to(m, '–¶–µ–π —á–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó!')
        return"""

    if m.text == '!–ø–æ–º–∏–ª—É–≤–∞–Ω–Ω—è':
        if m.chat.type == 'private':
            bot.reply_to(m, '–£–¥–∞—á—ñ, –±—Ä–∞—Ç–∞–Ω)')
            return
        if m.reply_to_message is None:
            bot.send_message(m.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

        zhan = get_user(m.from_user.id)
        if zhan is None:
            non_reg(m.from_user, m)
            return
        rights = zhan[6]
        if not int(rights.split()[4]):
            bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return

        chats = get_all_chats()
        for i in chats:
            try:
                bot.unban_chat_member(chat_id=i[2], user_id=m.reply_to_message.from_user.id, only_if_banned=True)
                bot.promote_chat_member(chat_id=i[2], user_id=m.reply_to_message.from_user.id)
            except:
                pass
        bot.send_message(m.chat.id, f'{html(name(m.reply_to_message.from_user))} –ø–æ–Ω–æ–≤–ª–µ–Ω–∏–π(–∞) —É —Å–≤–æ—ó—Ö –ø—Ä–∞–≤–∞—Ö')
        try:
            bot.send_message(m.reply_to_message.from_user.id, '–í–∏ –ø–æ–Ω–æ–≤–ª–µ–Ω—ñ —É —Å–≤–æ—ó—Ö –ø—Ä–∞–≤–∞—Ö —É –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ø—á–º—ñ–Ω—ñ—ó')
        except:
            pass
        return

    if m.text == '!—á–µ—Ä–≥–∞':
        if m.from_user.id != CREATOR:
            # bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return
        zhandarm = 0
        bot.send_message(m.chat.id, '–ß–µ—Ä–≥—É –ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—ó —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!')
        return

    # if m.text == '!–∑–∞—Ä–ø–ª–∞—Ç–∞':

    # –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è. –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

    if mess[0].split('_')[0] == '!–Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ':
        if len(mess[0].split('_')) == 2:
            if mess[0].split('_')[1].isdigit():
                am_n = int(mess[0].split('_')[1])
            else:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
                return
        elif len(mess[0].split('_')) == 1:
            am_n = 10
        else:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return

        if len(mess) == 1:
            alltime = True
            check_day = None
        elif len(mess) == 2:
            if mess[1].isdigit():
                alltime = False
                check_day = (True, int(mess[1]) - 1)
                if check_day[1] not in range(0, 31):
                    bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                    return
            elif mess[1].lower() == '—Ç–∏–∂–¥–µ–Ω—å':
                alltime = False
                check_day = (False, '—Ç–∏–∂–¥–µ–Ω—å')
            else:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
                return
        else:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return

        passports = get_all_passports()
        if am_n > len(passports):
            am_n = len(passports)
        elif am_n > 40:
            am_n = 40

        if alltime:
            for i in passports:
                i[23] = sum(map(lambda y: int(y), i[23].split()))
                i[24] = sum(map(lambda y: int(y), i[24].split()))
            in_word = ''
        else:
            if check_day[0]:
                for i in passports:
                    i[23] = int(i[23].split()[check_day[1]])
                    i[24] = int(i[24].split()[check_day[1]])

                if false_day:
                    day = false_day
                else:
                    day = datetime.today().day
                month = datetime.today().month
                if check_day[1] + 1 > day:
                    month = month_num[month - 2]
                in_word = f' –∑–∞ {check_day[1] + 1} {months[month][0]}'
            else:
                return
        all_messages = sum((i[23] for i in passports))
        all_words = sum((i[24] for i in passports))
        percentages = [[i[1], round((((i[23] / all_messages) + (i[24] / all_words)) * 50), 2)] for i in passports]
        percentages.sort(key=itemgetter(1), reverse=True)

        msg_out = f'–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ{in_word}\n'
        long_len = len(str(percentages[0][1]))
        for i in percentages:
            i[0] = get_passport(i[0])
            if round(i[1], 1) == i[1]:
                zero = '0'
                minus = 1
            else:
                zero = ''
                minus = 0
            i[1] = f'<code>{" " * (long_len - len(str(i[1])) - minus)}{i[1]}{zero}% </code>'
        for i in range(am_n):
            msg_out += f'{percentages[i][1]}' \
                       f'<a href="t.me/{percentages[i][0][5]}">{percentages[i][0][2]} {percentages[i][0][3]}</a>\n'
        bot.send_message(m.chat.id, msg_out, disable_web_page_preview=True, parse_mode='HTML')

    if m.text.split()[0] == '!–ø—Ä–∞–≤–∞':
        if m.from_user.id != CREATOR:
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!')
            return
        id = int(mess[1])
        rights = ' '.join(mess[2:])
        user = get_user(id)
        if user is None:
            bot.send_message(m.chat.id, '—â–æ—Å—å –Ω–µ —Ç–∞–∫.')
            return
        user[6] = rights
        insert_user_a(user)
        bot.send_message(m.chat.id, '–ü—Ä–∞–≤–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
        return

    if m.text.split()[0] == '!–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞':
        if m.from_user.id != CREATOR:
            return
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è', callback_data='golos')
        keyboard.add(button)
        msg = ''
        bot.send_message(m.chat.id, msg, reply_markup=keyboard)

    if m.text.split()[0] == '!–ª–æ—Ç–µ—Ä–µ—è':
        user = get_user(m.from_user.id)
        if user is None:
            return

        if not int(user[6].split()[7]):
            bot.reply_to(m, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return

        try:
            num = m.text.split()[1].split('-')
            num1 = int(num[0])
            num2 = int(num[1])
            if len(m.text.split()) > 2:
                num3 = int(m.text.split()[2])
                our_list = list(range(num1, num2 + 1))
                num_out = ''
                for i in range(num3):
                    el = random.choice(our_list)
                    our_list.remove(el)
                    num_out += f'{el}\n'
            else:
                num_out = random.randint(num1, num2)
            bot.send_message(m.chat.id, num_out)
        except Exception as e:
            bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç')
            return

    if m.text.split()[0] == '!–ø–æ–≤':
        if m.from_user.id != CREATOR:
            return
        id_t = int(m.text.split()[1])
        text = ' '.join(m.text.split()[2:])
        try:
            bot.send_message(id_t, text)
        except:
            pass
    if m.text.split()[0] == '!–ø–æ–≤—Ä':
        if m.from_user.id != CREATOR:
            return
        id_t = int(m.text.split()[1])
        rep_id = int(m.text.split()[2])
        text = ' '.join(m.text.split()[3:])
        try:
            bot.send_message(id_t, text, reply_to_message_id=rep_id)
        except:
            pass

    if m.text.split()[0] in ('!–Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏', '!—Å–ø–∏—Å–∞—Ç–∏'):
        user = get_user(m.from_user.id)
        if user is None:
            bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó.')
        if not int(user[6].split()[7]):
            bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
            return

        if m.reply_to_message is None:
            if len(mess) < 3:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[2])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            acc_t = get_passport(mess[1])
            pp_bus = 0
            if acc_t is None:
                acc_t = get_business(mess[1])
                pp_bus = 1
                if acc_t is None:
                    bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                    return

            if len(mess) > 3:
                description = ' '.join(m.text.split()[3:])
            else:
                description = None
        else:
            if len(mess) < 2:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
                return
            try:
                amount_m = int(mess[1])
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫.')
                return
            if amount_m < 1:
                bot.send_message(m.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.')

            try:
                acc_t = get_passport(m.reply_to_message.from_user.id)
                pp_bus = 2
            except:
                bot.send_message(m.chat.id, '–í–≤–µ–¥–µ–Ω–æ —Ö–∏–±–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.')
                return
            if len(mess) > 2:
                description = ' '.join(m.text.split()[2:])
            else:
                description = None

        if m.text.split()[0] == '!–Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏':
            line_1 = '–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤'
            line_2 = '–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è'
            line_3 = '–ù–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏ –∫–æ—à—Ç–∏'
            line_4 = '–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–ª–∏ –∫–æ—à—Ç–∏'
            plus = True
        else:
            line_1 = '–°–ø–∏—Å–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤'
            line_2 = '—Å–ø–∏—Å–∞–Ω–Ω—è'
            line_3 = '–ó –≤–∞—à–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —Å–ø–∏—Å–∞–ª–∏ –∫–æ—à—Ç–∏'
            line_4 = '–ó —Ä–∞—Ö—É–Ω–∫—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–ª–∏ –∫–æ—à—Ç–∏'
            plus = False

        if pp_bus == 0 or pp_bus == 2:
            if plus:
                acc_t[9] = acc_t[9] + amount_m
            else:
                acc_t[9] = acc_t[9] - amount_m
            namep = f'{user_link(acc_t[1], acc_t[2], acc_t[3])}'
            money_t = acc_t[9]
        else:
            if plus:
                acc_t[4] = int(acc_t[4]) + amount_m
            else:
                acc_t[4] = int(acc_t[4]) - amount_m
            namep = f'<a href="https://t.me/businesses_yachminiya/{acc_t[7]}">{acc_t[2]}</a>'
            money_t = acc_t[4]

        msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
        msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
        msg += f'{line_1}\n'
        msg += f'–†–∞—Ö—É–Ω–æ–∫: {namep} ({money_t})\n'
        msg += f'–°—É–º–∞ {line_2}: {amount_m} {glas(amount_m)}\n'
        if description is not None:
            msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {line_2}: {description}'

        bot.send_message(m.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)
        # bot.send_message(-1001282951480, f'–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}')

        if pp_bus == 0:
            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg = f'{line_3}\n'
            msg += f'–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É: {description}'
            try:
                bot.send_message(acc_t[1], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass
        elif pp_bus == 1:
            # bot.edit_message_text(get_str_business(acc_t[1]), -1001162793975, acc_t[7], parse_mode='HTML')

            msg = f'–î–µ—Ä–∂–∞–≤–Ω–∏–π –ë–∞–Ω–∫\n'
            msg += f'<b>–Ø—á–º—ñ–Ω—ñ—è</b>\n\n'
            msg += f'{line_4}\n'
            msg += f'–†–∞—Ö—É–Ω–æ–∫: {namep} ({money_t})\n'
            msg += f'–°—É–º–∞ {line_2}: {amount_m} {glas(amount_m)}\n'
            if description is not None:
                msg += f'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {line_2}: {description}'
            try:
                bot.send_message(acc_t[3], msg, parse_mode='HTML', disable_web_page_preview=True)
            except:
                pass

        if pp_bus == 0 or pp_bus == 2:
            insert_passport_a(acc_t)
        else:
            insert_business_a(acc_t)
        return

    if m.text.split()[0] == '!—Å–∞–Ω':
        new_san = ' '.join(mess[1:])
        sans = new_san.split(', ')
        user = get_user(m.from_user.id)
        user_s = get_user(m.reply_to_message.from_user.id)
        passport = get_passport(m.reply_to_message.from_user.id)

        if m.from_user.id != CREATOR:
            if sans[0] == '–ë–µ–∑—Ä–æ–±—ñ—Ç–Ω–∏–π' and int(user[6].split()[8]) == 1 and passport[8] == '–ë–µ–∑ —Å–∞–Ω—É':
                pass
            else:
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É')
                return
        if m.reply_to_message is None:
            bot.reply_to(m, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        try:
            sans_all = get_sans(sans)
        except Exception as e:
            bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∞–Ω\n{e}')
            return
        bill = 0
        us_rights = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        pass_rights = [0, 0, 0, 0, 0]
        for i in sans_all:
            bill += i[2]
            us_rights_buf = i[3].split()
            pass_rights_buf = i[4].split()
            for j in range(len(us_rights_buf)):
                us_rights[j] = str(int(us_rights_buf[j]) | int(us_rights[j]))
            for j in range(len(pass_rights_buf)):
                pass_rights[j] = str(int(pass_rights_buf[j]) | int(pass_rights[j]))

        passport[12] = ' '.join(pass_rights)
        user_s[6] = ' '.join(us_rights)
        old_san = passport[8]
        passport[8] = new_san
        passport[11] = bill
        bot.send_message(m.chat.id, '–°–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ')
        out = f'{user_link(passport[1], passport[2], passport[3])}\n{old_san} ‚üπ {new_san}'
        # bot.send_message(-1001268255961, out, parse_mode='HTML')
        insert_passport_a(passport)
        insert_user_a(user_s)
        return

    if m.text.split()[0] == '!–ø—ñ–Ω':
        if m.from_user.id != CREATOR:
            return
        chat_to_pin = m.text.split()[1]
        message_to_pin = m.text.split()[2]
        bot.pin_chat_message(chat_to_pin, message_to_pin)

    if m.text == "!–∑–∞–∫–æ–Ω":
        if f_queue(m):
            return
        bot.send_message(m.chat.id, '<a href="https://t.me/ZakonYach">–ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó</a>', parse_mode='HTML')

    '''if m.text == '!—Ä–æ–∑—Å–∏–ª–∫–∞':
        if m.from_user.id != CREATOR:
            return
        all_id = get_vote()
        all_passports = get_all_passports()
        passports_id = all_passports[1]
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è', callback_data='golos')
        keyboard.add(button)
        msg = ''
        for i in range(len(passports_id)):
            if passports_id[i] not in all_id:
                if all_passports[10][i] == '1':
                    try:
                        # bot.forward_message(int(passports_id[i]), -1001320320609, 192)
                        bot.send_message(int(passports_id[i]), mes, reply_markup=keyboard)
                        msg += f'<a href="tg://user?id={passports_id[i]}">–ø—ñ–¥–æ—Ä–∞—Å –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤\n</a>'
                    except:
                        msg += f'<a href="tg://user?id={passports_id[i]}">–ø—ñ–¥–æ—Ä–∞—Å –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω–∏–π\n</a>'
        bot.send_message(m.chat.id, msg, parse_mode='HTML')'''

    if m.text.split()[0] == '!—Ä–æ–∑—Å–∏–ª–∫–∞_–Ω':
        if m.from_user.id != CREATOR:
            return
        users = get_all_users()
        n = int(mess[1])
        if n == -1:
            bot.forward_message(CREATOR, -1001320320609, 189)
            return

        for i in range(n * 50, (n + 1) * 50):
            try:
                bot.forward_message(int(users[i][2]), -1001320320609, 189)
            except Exception as e:
                print(e)

    if m.text.split()[0] == '!—Ö—Ç–º–ª':
        if m.from_user.id != CREATOR:
            return
        bot.send_message(CREATOR, ' '.join(m.text.split()[1:]), parse_mode='HTML')

    # TODO –±–∞–Ω —ñ –º—É—Ç

    if m.text == '!–∂–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—è':
        if m.chat.type == 'private':
            return
        chat = get_chat(m.chat.id)
        if chat[4] == 'NoneURL':
            return
        out = f'<a href="tg://user?id={m.from_user.id}">{html(name(m.from_user))}</a>\n' \
              f'<a href="{chat[4]}/{m.message_id}">{m.chat.title}</a>'
        # bot.send_message(-1001422128910, out, parse_mode='HTML')
        bot.send_message(m.chat.id, '–ñ–∞–Ω–¥–∞—Ä–º–µ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ')
        return

    if m.text == '!–∫–æ–º–∞–Ω–¥–∏':
        bot.send_message(m.chat.id,
                         f'<a href="https://telegra.ph/Spisok-komand-Sistemi-YAchm%D1%96n%D1%96ya-02-01">–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ '
                         f'–°–∏—Å—Ç–µ–º–∏</a>',
                         parse_mode='HTML', disable_web_page_preview=True)

    if m.text.split()[0] == '!—Ç–µ–≥':
        try:
            id = mess[1]
            text = mess[2:]
            bot.send_message(m.chat.id, f'<a href="tg://user?id={id}">{" ".join(text)}</a>', parse_mode='HTML')
        except:
            pass

    if mess[0] == '!–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ':
        if len(m.text.split()) < 2:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return
        pidp_id = ' '.join(mess[1:])

        business_out = get_str_business(pidp_id)

        bot.send_message(m.chat.id, business_out, parse_mode='HTML', disable_web_page_preview=True)
        return

    if mess[0] == '!—Ä—ñ–¥':

        if len(m.text.split()) < 2:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return
        rid_id = ' '.join(m.text.split()[1:])

        rid_out = get_str_rid(rid_id)
        bot.send_message(m.chat.id, rid_out, parse_mode='HTML', disable_web_page_preview=True)
        if m.chat.id == -1001329014820:
            bot.send_message(m.chat.id, time.time() - tt)
        return

    if mess[0] == '!—É—Å—Ç–∞–Ω–æ–≤–∞':
        if len(m.text.split()) < 2:
            bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!')
            return
        ust_id = ' '.join(mess[1:])

        inst_out = get_str_institution(ust_id)

        bot.send_message(m.chat.id, inst_out, parse_mode='HTML', disable_web_page_preview=True)
        return

    if m.chat.id == -1001486037908:
        mess = m.text.split('\n')
        mess_words = m.text.split()
        if {'–§–æ—Ä–º–∞', '–¥–ª—è', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è', '–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞', "–Ü–º'—è:", '–ü—Ä—ñ–∑–≤–∏—â–µ:', '–°—Ç–∞—Ç—å:'}.issubset(set(mess_words)):
            try:
                namep = None
                surname = None
                acc_name = None
                acc_surname = None
                sex = None
                for i in mess:
                    if i.split()[0] == "–Ü–º'—è:":
                        namep = ' '.join(i.split()[1:])
                    elif i.split()[0] == "–ü—Ä—ñ–∑–≤–∏—â–µ:":
                        surname = ' '.join(i.split()[1:])
                    elif ' '.join(i.split()[0:4]) == "–Ü–º'—è —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:":
                        acc_name = ' '.join(i.split()[4:])
                    elif ' '.join(i.split()[0:4]) == "–ü—Ä—ñ–∑–≤–∏—â–µ —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:":
                        acc_surname = ' '.join(i.split()[4:])
                    elif i.split()[0] == "–°—Ç–∞—Ç—å:":
                        sex = ' '.join(i.split()[1:])
                if not (namep and surname and acc_name and acc_surname and sex):
                    bot.reply_to(m,
                                 "–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, "
                                 "–∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?")
                    return
                full_name = namep + surname

                # name_i = mess.index("–Ü–º'—è:")
                # surname_i = mess.index("–ü—Ä—ñ–∑–≤–∏—â–µ:")
                # gen_name_i ==
                # sex_i = mess.index("–°—Ç–∞—Ç—å:")
                # namep = ' '.join(mess[name_i + 1:surname_i])
                # surname = ' '.join(mess[surname_i + 1:sex_i])
                # sex = str(mess[sex_i + 1])
                if len(namep) > 25:
                    bot.send_message(m.chat.id, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª—ñ–≤")
                    return
                elif len(surname) > 30:
                    bot.send_message(m.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª—ñ–≤")
                    return
                if len(namep) < 2:
                    bot.send_message(m.chat.id, "–ó–∞–∫–æ—Ä–æ—Ç–∫–µ —ñ–º'—è")
                    return
                elif len(surname) < 2:
                    bot.send_message(m.chat.id, "–ó–∞–∫–æ—Ä–æ—Ç–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ")
                    return
                elif len(full_name) > 45:
                    bot.send_message(m.chat.id, "–°—É–º–∞ –¥–æ–≤–∂–∏–Ω –ø—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ —ñ–º–µ–Ω—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∞ –∑–∞ 40 —Å–∏–º–≤–æ–ª—ñ–≤")
                    return
                elif len(re.split('[- ]', namep)) > 2:
                    bot.send_message(m.chat.id, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ –¥–≤–æ—Ö —Å–ª—ñ–≤")
                    return
                elif len(re.split('[- ]', surname)) > 3:
                    bot.send_message(m.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç—Ä—å–æ—Ö —Å–ª—ñ–≤")
                    return
                spl_name = re.split('[- ]', namep)
                spl_acc_name = re.split('[- ]', acc_name)
                spl_surname = re.split('[- ]', surname)
                spl_acc_surname = re.split('[- ]', acc_surname)
                for i in range(len(spl_name)):
                    if len(spl_name[i]) < 4:
                        if spl_name[i][0:len(spl_name) - 2] != spl_acc_name[i][0:len(spl_name) - 2]:
                            bot.send_message(m.chat.id, "–Ü–º'—è —É –Ω–∞–∑–∏–≤–Ω–æ–º—É —Ç–∞ –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
                            return
                    else:
                        if spl_name[i][0:len(spl_name[i]) - 3] != spl_acc_name[i][0:len(spl_name[i]) - 3]:
                            bot.send_message(m.chat.id, "–Ü–º'—è —É –Ω–∞–∑–∏–≤–Ω–æ–º—É —Ç–∞ –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
                            return
                for i in range(len(spl_surname)):
                    if len(spl_surname[i]) < 4:
                        if spl_surname[i][0:len(spl_surname[i]) - 1] != spl_acc_surname[i][0:len(spl_surname[i]) - 1]:
                            bot.send_message(m.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ —É –Ω–∞–∑–∏–≤–Ω–æ–º—É —Ç–∞ –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
                            return
                    else:
                        if spl_surname[i][0:len(spl_surname[i]) - 2] != spl_acc_surname[i][0:len(spl_surname[i]) - 2]:
                            bot.send_message(m.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ —É –Ω–∞–∑–∏–≤–Ω–æ–º—É —Ç–∞ –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
                            return

                for i in full_name.lower():
                    if i not in alphabet:
                        bot.send_message(m.chat.id,
                                         "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–∏—Ä–∏–ª–∏—á–Ω—ñ –±—É–∫–≤–∏, –¥–µ—Ñ—ñ—Å —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ.")
                        return
                if sex.lower() != '—á–æ–ª–æ–≤—ñ—á–∞' and sex.lower() != '–∂—ñ–Ω–æ—á–∞':
                    bot.send_message(m.chat.id, '–°—Ç–∞—Ç—å –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —á–æ–ª–æ–≤—ñ—á–∞ –∞–±–æ –∂—ñ–Ω–æ—á–∞')
                    return

                passport_out = f'<b>–®–∞–±–ª–æ–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞</b>\n'
                passport_out += f'<i>–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞ –Ø—á–º—ñ–Ω—ñ—ó</i>\n\n'
                passport_out += f'''<b>–Ü–º'—è:</b> '''
                '''<i><a href="tg://user?id={m.from_user.id}">{namep} {surname}</a></i>\n'''
                passport_out += f"<b>–°–∞–Ω:</b> <i>–ë–µ–∑ —Å–∞–Ω—É</i>\n"
                passport_out += f"<b>–°—Ç–∞—Ç—å:</b> <i>{sex}</i>\n"
                passport_out += f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>–ë–µ–∑ —Å—Ç–∞—Ç—É—Å—É</i>\n"
                passport_out += f"\n<i>–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ:</i>"
                passport_out += f"\n<i>0000-00-00 00:00:00</i>"
                passport_out += f'''\n\n<b>–Ü–º'—è —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:</b> '''
                passport_out += f'''<i><a href="tg://user?id={m.from_user.id}">{acc_name} {acc_surname}</a></i>\n'''
                bot.reply_to(m, passport_out, parse_mode='HTML')
            except Exception as e:
                print(e)
                bot.reply_to(m,
                             '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, –∞ –Ω–µ 
                             –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')

        if m.text == '!—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è':
            ms = m.reply_to_message
            passport = get_passport(ms.from_user.id)
            if passport is not None:
                bot.send_message(m.chat.id,
                                 f'{user_link(passport[1], passport[2], passport[3])} –≤–∂–µ –º–∞—î '
                                 f'–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó!',
                                 parse_mode='HTML')
                return
            try:
                namep = None
                surname = None
                acc_name = None
                acc_surname = None
                sex = None
                for i in mess:
                    if i.split()[0] == "–Ü–º'—è:":
                        namep = ' '.join(i.split()[1:])
                    elif i.split()[0] == "–ü—Ä—ñ–∑–≤–∏—â–µ:":
                        surname = ' '.join(i.split()[1:])
                    elif ' '.join(i.split()[0:4]) == "–Ü–º'—è —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:":
                        acc_name = ' '.join(i.split()[4:])
                    elif ' '.join(i.split()[0:4]) == "–ü—Ä—ñ–∑–≤–∏—â–µ —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:":
                        acc_surname = ' '.join(i.split()[4:])
                    elif i.split()[0] == "–°—Ç–∞—Ç—å:":
                        sex = ' '.join(i.split()[1:])
                if not (namep and surname and acc_name and acc_surname and sex):
                    bot.reply_to(m,
                                 '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, 
                                 –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')
                    return
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                return

            new_passport(ms.from_user, namep, surname, sex, acc_name, acc_surname)
            passport = get_str_passport(ms.from_user.id)
            bot.send_message(m.chat.id, passport, parse_mode='HTML')
            keyboard = types.InlineKeyboardMarkup()
            but = types.InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∏–π –ß–∞—Ç –Ø—á–º—ñ–Ω—ñ—ó", url='t.me/Yachminiya')
            keyboard.add(but)
            bot.send_message(m.chat.id,
                             f'–¢–∏ –æ—Ç—Ä–∏–º–∞–≤(–ª–∞) –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ —ñ–∑ —Å—Ç–∞—Ç—É—Å–æ–º "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π". '
                             f'–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ "–ü–æ–≤–Ω–∏–π" —Å—Ç–∞—Ç—É—Å, –≤–∏–∫–æ–Ω–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —É–º–æ–≤–∏ —ñ–∑ '
                             f'<a href="https://telegra.ph/Zakon-pro-gromadyanstvo-01-24">–ó–∞–∫–æ–Ω—É –ø—Ä–æ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ</a>, '
                             f'—Ç–∞ –∑–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏ –≤ –ì—Ä–∞—Ñ—Å—Ç–≤–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –ø—Ä–æ—Ö–∞–Ω–Ω—è–º.\n\n–©–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, '
                             f'–Ω–∞–¥—Å–∏–ª–∞–π –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∫–æ–º–∞–Ω–¥—É !–∞. –î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–∞—Å–ø–æ—Ä—Ç - !–ø.\n',
                             disable_web_page_preview=True, parse_mode='HTML', reply_markup=keyboard,
                             reply_to_message_id=ms.message_id)
            return

        if m.text == '!–æ–Ω–æ–≤–∏—Ç–∏_–ø–∞—Å–ø–æ—Ä—Ç–Ω—ñ_–¥–∞–Ω—ñ':
            mess = m.reply_to_message.text.split('\n')
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                return
            graf = get_passport(m.from_user.id)
            if graf is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            graf = get_user(m.from_user.id)
            if graf is None:
                non_reg(m.from_user, m)
                return
            if not int(graf[6].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return
            passport = get_passport(m.reply_to_message.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return

            try:
                namep = None
                surname = None
                acc_name = None
                acc_surname = None
                sex = None
                for i in mess:
                    if i.split()[0] == "–Ü–º'—è:":
                        namep = ' '.join(i.split()[1:])
                    elif i.split()[0] == "–ü—Ä—ñ–∑–≤–∏—â–µ:":
                        surname = ' '.join(i.split()[1:])
                    elif ' '.join(i.split()[0:4]) == "–Ü–º'—è —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:":
                        acc_name = ' '.join(i.split()[4:])
                    elif ' '.join(i.split()[0:4]) == "–ü—Ä—ñ–∑–≤–∏—â–µ —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É:":
                        acc_surname = ' '.join(i.split()[4:])
                    elif i.split()[0] == "–°—Ç–∞—Ç—å:":
                        sex = ' '.join(i.split()[1:])
                if not (namep and surname and acc_name and acc_surname and sex):
                    bot.reply_to(m,
                                 '''–í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞:\n1. 
                                 –ß–∏ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ —Å–∞–º–µ —Ñ–æ—Ä–º—É, –∞ –Ω–µ –≤—Å–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n2. 
                                 –ß–∏ —Å—Ç–æ—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ—Å–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Ñ–æ—Ä–º–∏?''')
                    return
            except:
                bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö')
                return

            passport[2] = namep
            passport[3] = surname
            passport[6] = sex
            passport[16] = acc_name
            passport[17] = acc_surname
            bot.send_message(m.chat.id, '–ü–∞—Å–ø–æ—Ä—Ç–Ω—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
            insert_passport_a(passport)

        if m.text == '!–≤—ñ–¥–º–æ–≤–∞_–≤—ñ–¥_–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞':
            passport = get_passport(m.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å –≤—ñ–¥ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞', callback_data='vidmova')
            keyboard.add(button)
            button = types.InlineKeyboardButton(text='üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞',
                                                callback_data='stop_vidmova')
            keyboard.add(button)
            bot.send_message(m.chat.id,
                             text=f'{user_link(passport[1], passport[2], passport[3])}, '
                                  f'–í–∏ —Å–ø—Ä–∞–≤–¥—ñ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç–µ—Å—å –≤—ñ–¥ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó? –í–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ –≤—Å—ñ '
                                  f'—Å–≤–æ—ó —Å—Ç–∞—Ç–∫–∏. –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.',
                             reply_markup=keyboard, parse_mode='HTML')

        if m.text == '!–≤–∏–ª—É—á–∏—Ç–∏_–≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ':
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                return
            graf = get_passport(m.from_user.id)
            if graf is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            graf = get_user(m.from_user.id)
            if graf is None:
                non_reg(m.from_user, m)
                return
            if not int(graf[6].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return
            passport = get_passport(m.reply_to_message.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return

            all_passports = get_all_passports()
            del (all_passports[passport[0] - 1])
            for i in range(len(all_passports)):
                all_passports[i][0] = i + 1
            del_table_passports()
            db.insert(table_passports)
            insert_all_passports_l(all_passports)
            amount = get_amount_of_passports()
            bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –≤—Ç—Ä–∞—á–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –Ø—á–º—ñ–Ω—ñ—ó!')
            del_passport_g(all_passports, amount)
            # TODO —Ä—ñ–¥ —Ç–∞ –±—ñ–∑–Ω–µ—Å

        if mess_words[0] == '!—Å—Ç–∞—Ç—É—Å':
            if len(mess_words) < 2:
                return
            if m.reply_to_message is None:
                bot.send_message(m.chat.id, '–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!')
                return
            graf = get_passport(m.from_user.id)
            if graf is None:
                bot.send_message(m.chat.id, f'–í–∏ –Ω–µ –º–∞—î—Ç–µ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            graf = get_user(m.from_user.id)
            if graf is None:
                non_reg(m.from_user, m)
                return
            if not int(graf[6].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return
            if mess_words[1] not in ('–ü–æ–≤–Ω–∏–π', '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π'):
                bot.send_message(m.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞!')
                return
            passport = get_passport(m.reply_to_message.from_user.id)
            if passport is None:
                bot.send_message(m.chat.id, f'{name(m.reply_to_message.from_user)} –Ω–µ –º–∞—î –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ –Ø—á–º—ñ–Ω—ñ—ó!')
                return
            user = get_user(m.reply_to_message.from_user.id)

            if (mess_words[1] == '–ü–æ–≤–Ω–∏–π') and (
                    time.time() - datetime.strptime(passport[7], '%Y-%m-%d %H:%M:%S').timestamp() < 259200 or user[
                7] < 300):
                keyboard = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text='‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='up_status')
                keyboard.add(button)
                bot.send_message(m.chat.id,
                                 f'{user_link(passport[1], passport[2], passport[3])} –Ω–µ –≤–∏–∫–æ–Ω–∞–≤ —É—Å—ñ '
                                 f'–ø—ñ–¥—Å—Ç–∞–≤–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É '
                                 f'–Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –°—Ç–∞—Ä—à–æ–≥–æ –ñ–∞–Ω–¥–∞—Ä–º–∞ –∞–±–æ –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞.',
                                 parse_mode='HTML', reply_markup=keyboard)
                return

            passport[10] = mess_words[1]
            bot.send_message(m.chat.id,
                             f'–°—Ç–∞—Ç—É—Å –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞ <a href="tg://user?id={passport[1]}">{passport[2]} {passport[3]}'
                             f'</a> –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {passport[10]}!',
                             parse_mode='HTML')
            insert_passport_a(passport)

        if m.text == '!—Ñ–æ—Ä–º–∏':
            out = '–§–æ—Ä–º–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚Äì <code>!–ø–∞—Å–ø–æ—Ä—Ç</code>\n–§–æ—Ä–º–∞ –¥–ª—è –ø–∞—Ä—Ç—ñ—ó ‚Äì  <code>!–ø–∞—Ä—Ç—ñ—è</code>'
            bot.send_message(m.chat.id, out, parse_mode='HTML')
            return

        if m.text == '!–ø–∞—Ä—Ç—ñ—è':
            out = '<code>–ü–∞—Ä—Ç—ñ—è –Ø—á–º—ñ–Ω—ñ—ó\n"–ù–∞–∑–≤–∞ –ø–∞—Ä—Ç—ñ—ó"\n\n–ö–µ—Ä—ñ–≤–Ω–∏–∫ ‚Äî @\n\n1. @\n2. @\n3. @\n4. @\n</code>'
            bot.send_message(m.chat.id, out, parse_mode='HTML')
            return

        if m.text == '!–ø–∞—Å–ø–æ—Ä—Ç':
            bot.send_message(m.chat.id, pass_form, parse_mode='HTML')

    if m.chat.id == -1001262104547 or m.chat.id == -1001457025006:
        if mess[0] == '!–≤—ñ–¥–º–æ–≤–∞' and m.reply_to_message is not None:
            passport = get_passport(m.from_user.id)
            if passport is None:
                return
            try:
                bot.send_message(m.reply_to_message.entities[0].user.id,
                                 f'–í–∞–º –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ —É –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—ñ –ø–æ–∑–æ–≤—É\n–ü—Ä–∏—á–∏–Ω–∞:\n{" ".join(m.text.split()[1:])}\n–í–∞–º '
                                 f'–≤—ñ–¥–º–æ–≤–∏–≤ –°—É–¥–¥—è {user_link(passport[1], passport[2], passport[3])}',
                                 parse_mode='HTML')
                bot.send_message(m.chat.id, '–í—ñ–¥–º–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')
            except Exception as e:
                bot.send_message(m.chat.id, f'—â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{e}')
            return

        if m.text.split()[0] == '!–≤—ñ–¥–ø–æ–≤—ñ–¥—å':
            if m.reply_to_message is None:
                return
            try:
                bot.send_message(m.reply_to_message.entities[0].user.id, m.text.split()[1:], parse_mode='HTML')
                bot.send_message(m.chat.id, '–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')
            except Exception as e:
                bot.send_message(m.chat.id, f'—â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{e}')
            return

    if m.chat.id == -1001157589989:
        if m.text == '!–ø–æ—á–∞—Ç–æ–∫_–∑–∞—Å—ñ–¥–∞–Ω–Ω—è':
            rech = get_passport(m.from_user.id)
            if rech is None:
                return
            if not int(rech[12].split()[0]):
                bot.send_message(m.chat.id, '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                return

            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text="–ü—Ä–∏—Å—É—Ç–Ω—ñ–π", callback_data="kvorum")
            keyboard.add(callback_button)

            bot.send_message(m.chat.id, f'–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–≤–æ—Ä—É–º—É\n\n–ü—Ä–∏—Å—É—Ç–Ω—ñ:', reply_markup=keyboard)


@bot.message_handler(content_types=['photo', 'audio', 'document', 'video', 'voice', 'sticker', 'video_note'])
def media(m):
    chat = get_chat(m.chat.id)
    if m.chat.type != 'private':
        if not chat:
            bot.leave_chat(m.chat.id)
            return
        if not chat[8]:
            return

    if m.from_user.id == 777000:
        if not chat[14]:
            return
        channel_id = m.forward_from_chat.id
        m_id = m.forward_from_message_id
        chat_id = str(m.chat.id)[4:]
        post = get_post(channel_id, m_id)
        if not post:
            return
        keyboard = types.InlineKeyboardMarkup()
        if post[3] == 'None':
            return
        else:
            react = eval(post[3])
            """react_spl = post[3].split('\n')
            for i in range(len(react_spl)):
                react.append([])
                for j in react_spl[i].split('|'):
                    react[i].append(j)"""
            for i in range(len(react)):
                keyboard.keyboard.append([])
                for j in range(len(react[i])):
                    keyboard.keyboard[i].append(types.InlineKeyboardButton(f'{react[i][j]} 0',
                                                                           callback_data=f'react_{i}_{j}'))
        but = types.InlineKeyboardButton(text='üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ', url=f'https://t.me/c/{chat_id}/1?thread={m.message_id}')
        keyboard.add(but)
        bot.edit_message_reply_markup(channel_id, m_id, reply_markup=keyboard)


@bot.channel_post_handler()
def channel_handler(m):
    channel = get_channel(m.chat.id)
    if not channel:
        admins = [0, 0]
        cr = 0
        for j in bot.get_chat_administrators(m.chat.id):
            user = j.user
            if j.status == 'creator':
                cr = user.id
            else:
                if not get_user(user.id):
                    continue
            admins.append(user.id)
        # admins.remove(BOT_USER)
        admins = list(map(lambda x: str(x), admins))
        if cr:
            new_channel(m.chat, '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π', cr, admins)
            keyboard = types.InlineKeyboardMarkup()
            but = types.InlineKeyboardButton(text='–î–æ –º–µ–Ω—é –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó',
                                             callback_data='prostir_menu')
            keyboard.add(but)
            try:
                bot.send_message(cr, f'–ö–∞–Ω–∞–ª {m.chat.title} –¥–æ–¥–∞–Ω–∏–π –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó. '
                                     f'–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –≤–∏ –º–∞—î—Ç–µ –≤–≤—ñ–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞ –≤ –º–µ–Ω—é'
                                     f'–ü—Ä–æ—Å—Ç–æ—Ä—É –Ø—á–º—ñ–Ω—ñ—ó. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏, '
                                     f'–∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {user_link(CREATOR, "–ù–∞–∑–∞—Ä—ñ—è —Ñ–æ–Ω –ì–µ—Ä—Å—Ç–µ")}.',
                                 reply_markup=keyboard, parse_mode='HTML')
            except:
                pass
        else:
            bot.leave_chat(m.chat.id)
            return

    """if m.chat.id == -1001227651426:
        if m.text.lower() == '–≤–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞—Ö–∏—Å—Ç':
            script_on_func()
        elif m.text.lower() == '–≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞—Ö–∏—Å—Ç':
            script_off_func()
        elif m.text.lower() == '–≤–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞—Ö–∏—Å—Ç —Ç–µ—Å—Ç':
            script_on_func(True)
        elif m.text.lower() == '–≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞—Ö–∏—Å—Ç —Ç–µ—Å—Ç':
            script_off_func(True)"""


def main():
    while True:
        try:
            bot.polling()
        except Exception:
            t = StringIO()
            print_exc(file=t)
            t = html(t.getvalue())
            link = 'telegra.ph/file/84f9fe5ef05fa6c9edf80.png'
            out = f'<a href="{link}">{chr(8205)}</a>@yachminiya_test_bot:\n{t}'
            bot.send_message(419596848, out, parse_mode='HTML')
            main()


if __name__ == '__main__':
    main()
